// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// ----------------------------------------------------------------------------
//      /usr/include/fcntl.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2015 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/sys/file.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2015 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;
typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct {
	int __val[2];
} __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void *__timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;
typedef long int __fsword_t;
typedef long int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef long int __intptr_t;
typedef unsigned int __socklen_t;
// /usr/include/bits/fcntl.h

struct flock {
	short int l_type;
	short int l_whence;
	__off64_t l_start;
	__off64_t l_len;
	__pid_t l_pid;
};
struct flock64 {
	short int l_type;
	short int l_whence;
	__off64_t l_start;
	__off64_t l_len;
	__pid_t l_pid;
};
// /usr/include/fcntl.h

typedef __mode_t mode_t;
typedef __off64_t off_t;
typedef __off64_t off64_t;
typedef __pid_t pid_t;
extern int fcntl(int __fd, int __cmd, ...);
extern int open64(const char *__file, int __oflag, ...);
extern int creat64(const char *__file, mode_t __mode);
// /usr/include/sys/file.h

extern int flock(int __fd, int __operation);
#define F_GETLK64 (5)
#define F_SETLK64 (6)
#define F_SETLKW64 (7)
#define LOCK_EX (2)
#define LOCK_NB (4)
#define LOCK_SH (1)
#define LOCK_UN (8)
#define L_INCR (1)
#define L_SET (0)
#define L_XTND (2)
#define SEEK_CUR (1)
#define SEEK_END (2)
#define SEEK_SET (0)
#define S_IFBLK __S_IFBLK
#define S_IFCHR __S_IFCHR
#define S_IFDIR __S_IFDIR
#define S_IFIFO __S_IFIFO
#define S_IFLNK __S_IFLNK
#define S_IFMT __S_IFMT
#define S_IFREG __S_IFREG
#define S_IFSOCK __S_IFSOCK
#define S_IRGRP (32)
#define S_IROTH (4)
#define S_IRUSR __S_IREAD
#define S_IRWXG (56)
#define S_IRWXO (7)
#define S_IRWXU (448)
#define S_ISGID __S_ISGID
#define S_ISUID __S_ISUID
#define S_ISVTX __S_ISVTX
#define S_IWGRP (16)
#define S_IWOTH (2)
#define S_IWUSR __S_IWRITE
#define S_IXGRP (8)
#define S_IXOTH (1)
#define S_IXUSR __S_IEXEC
#define _BITS_TYPESIZES_H (1)
#define _BITS_TYPES_H (1)
#define _FCNTL_H (1)
#define _SYS_FILE_H (1)
#define __BLKCNT64_T_TYPE __SQUAD_TYPE
#define __BLKCNT_T_TYPE __SYSCALL_SLONG_TYPE
#define __BLKSIZE_T_TYPE __SYSCALL_SLONG_TYPE
#define __CLOCKID_T_TYPE __S32_TYPE
#define __CLOCK_T_TYPE __SYSCALL_SLONG_TYPE
#define __DADDR_T_TYPE __S32_TYPE
#define __DEV_T_TYPE __UQUAD_TYPE
#define __FD_SETSIZE (1024)
#define __FSBLKCNT64_T_TYPE __UQUAD_TYPE
#define __FSBLKCNT_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSFILCNT64_T_TYPE __UQUAD_TYPE
#define __FSFILCNT_T_TYPE __SYSCALL_ULONG_TYPE
#define __FSID_T_TYPE struct { int __val [ 2 ] ; }
#define __FSWORD_T_TYPE __SYSCALL_SLONG_TYPE
#define __GID_T_TYPE __U32_TYPE
#define __ID_T_TYPE __U32_TYPE
#define __INO64_T_TYPE __UQUAD_TYPE
#define __INO_T_MATCHES_INO64_T (1)
#define __INO_T_TYPE __SYSCALL_ULONG_TYPE
#define __KEY_T_TYPE __S32_TYPE
#define __MODE_T_TYPE __U32_TYPE
#define __NLINK_T_TYPE __SYSCALL_ULONG_TYPE
#define __OFF64_T_TYPE __SQUAD_TYPE
#define __OFF_T_MATCHES_OFF64_T (1)
#define __OFF_T_TYPE __SYSCALL_SLONG_TYPE
#define __OPEN_NEEDS_MODE(oflag) ( ( ( oflag ) & O_CREAT ) != 0 || ( ( oflag ) & __O_TMPFILE ) == __O_TMPFILE )
#define __O_LARGEFILE (0)
#define __PID_T_TYPE __S32_TYPE
#define __RLIM64_T_TYPE __UQUAD_TYPE
#define __RLIM_T_TYPE __SYSCALL_ULONG_TYPE
#define __S16_TYPE short int
#define __S32_TYPE int
#define __S64_TYPE long int
#define __SLONG32_TYPE int
#define __SLONGWORD_TYPE long int
#define __SQUAD_TYPE long int
#define __SSIZE_T_TYPE __SWORD_TYPE
#define __SUSECONDS_T_TYPE __SYSCALL_SLONG_TYPE
#define __SWORD_TYPE long int
#define __SYSCALL_SLONG_TYPE __SLONGWORD_TYPE
#define __SYSCALL_ULONG_TYPE __ULONGWORD_TYPE
#define __TIMER_T_TYPE void *
#define __TIME_T_TYPE __SYSCALL_SLONG_TYPE
#define __U16_TYPE unsigned short int
#define __U32_TYPE unsigned int
#define __U64_TYPE unsigned long int
#define __UID_T_TYPE __U32_TYPE
#define __ULONG32_TYPE unsigned int
#define __ULONGWORD_TYPE unsigned long int
#define __UQUAD_TYPE unsigned long int
#define __USECONDS_T_TYPE __U32_TYPE
#define __UWORD_TYPE unsigned long int
#define __mode_t_defined
#define __off64_t_defined
#define __off_t_defined
#define __pid_t_defined
#define creat creat64
#define open open64
