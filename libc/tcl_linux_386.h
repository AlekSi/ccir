// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// ----------------------------------------------------------------------------
//      /usr/lib/gcc/i686-linux-gnu/5/include/stddef.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/wchar.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1995-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/lib/gcc/i686-linux-gnu/5/include/stdarg.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/libio.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.
   Written by Per Bothner <bothner@cygnus.com>.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.

   As a special exception, if you link the code in this file with
   files compiled with a GNU compiler to produce an executable,
   that does not cause the resulting executable to be covered by
   the GNU Lesser General Public License.  This exception does not
   however invalidate any other reasons why the executable file
   might be covered by the GNU Lesser General Public License.
   This exception applies to code released by its copyright holders
   in files containing the exception.  */

typedef unsigned int size_t;
// /usr/include/i386-linux-gnu/bits/types.h

typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long long int __int64_t;
typedef unsigned long long int __uint64_t;
typedef long long int __quad_t;
typedef unsigned long long int __u_quad_t;
typedef __u_quad_t __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef __u_quad_t __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long int __off_t;
typedef __quad_t __off64_t;
typedef int __pid_t;
typedef struct {
	int __val[2];
} __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef __u_quad_t __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void *__timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef __quad_t __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef __u_quad_t __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef __u_quad_t __fsfilcnt64_t;
typedef int __fsword_t;
typedef int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef int __intptr_t;
typedef unsigned int __socklen_t;
// /usr/include/stdio.h

struct _IO_FILE;
typedef struct _IO_FILE FILE;
typedef struct _IO_FILE __FILE;
// /usr/include/wchar.h

typedef struct {
	int __count;
	union {
		unsigned int __wch;
		char __wchb[4];
	} __value;
} __mbstate_t;
// /usr/include/_G_config.h

typedef struct {
	__off_t __pos;
	__mbstate_t __state;
} _G_fpos_t;
typedef struct {
	__off64_t __pos;
	__mbstate_t __state;
} _G_fpos64_t;
// /usr/lib/gcc/i686-linux-gnu/5/include/stdarg.h

typedef __builtin_va_list __gnuc_va_list;
// /usr/include/libio.h

struct _IO_jump_t;
struct _IO_FILE;
typedef void _IO_lock_t;
struct _IO_marker {
	struct _IO_marker *_next;
	struct _IO_FILE *_sbuf;
	int _pos;
};
enum __codecvt_result { __codecvt_ok, __codecvt_partial, __codecvt_error, __codecvt_noconv };
struct _IO_FILE {
	int _flags;
	char *_IO_read_ptr;
	char *_IO_read_end;
	char *_IO_read_base;
	char *_IO_write_base;
	char *_IO_write_ptr;
	char *_IO_write_end;
	char *_IO_buf_base;
	char *_IO_buf_end;
	char *_IO_save_base;
	char *_IO_backup_base;
	char *_IO_save_end;
	struct _IO_marker *_markers;
	struct _IO_FILE *_chain;
	int _fileno;
	int _flags2;
	__off_t _old_offset;
	unsigned short _cur_column;
	signed char _vtable_offset;
	char _shortbuf[1];
	_IO_lock_t *_lock;
	__off64_t _offset;
	void *__pad1;
	void *__pad2;
	void *__pad3;
	void *__pad4;
	size_t __pad5;
	int _mode;
	char _unused2[40u];
};
typedef struct _IO_FILE _IO_FILE;
struct _IO_FILE_plus;
extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
typedef __ssize_t __io_read_fn(void *__cookie, char *__buf, size_t __nbytes);
typedef __ssize_t __io_write_fn(void *__cookie, const char *__buf, size_t __n);
typedef int __io_seek_fn(void *__cookie, __off64_t * __pos, int __w);
typedef int __io_close_fn(void *__cookie);
extern int __underflow(_IO_FILE *);
extern int __uflow(_IO_FILE *);
extern int __overflow(_IO_FILE *, int);
extern int _IO_getc(_IO_FILE * __fp);
extern int _IO_putc(int __c, _IO_FILE * __fp);
extern int _IO_feof(_IO_FILE * __fp);
extern int _IO_ferror(_IO_FILE * __fp);
extern int _IO_peekc_locked(_IO_FILE * __fp);
extern void _IO_flockfile(_IO_FILE *);
extern void _IO_funlockfile(_IO_FILE *);
extern int _IO_ftrylockfile(_IO_FILE *);
extern int _IO_vfscanf(_IO_FILE *, const char *, __gnuc_va_list, int *);
extern int _IO_vfprintf(_IO_FILE *, const char *, __gnuc_va_list);
extern __ssize_t _IO_padn(_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn(_IO_FILE *, void *, size_t);
extern __off64_t _IO_seekoff(_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos(_IO_FILE *, __off64_t, int);
extern void _IO_free_backup_area(_IO_FILE *);
// /usr/lib/gcc/i686-linux-gnu/5/include/stdarg.h

typedef __gnuc_va_list va_list;
// /usr/include/stdio.h

typedef _G_fpos64_t fpos_t;
typedef _G_fpos64_t fpos64_t;
extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;
extern int remove(const char *__filename);
extern int rename(const char *__old, const char *__new);
extern FILE *tmpfile64(void);
extern char *tmpnam(char *__s);
extern char *tempnam(const char *__dir, const char *__pfx);
extern int fclose(FILE * __stream);
extern int fflush(FILE * __stream);
extern FILE *fopen64(const char *__filename, const char *__modes);
extern FILE *freopen64(const char *__filename, const char *__modes, FILE * __stream);
extern FILE *fdopen(int __fd, const char *__modes);
extern void setbuf(FILE * __stream, char *__buf);
extern int setvbuf(FILE * __stream, char *__buf, int __modes, size_t __n);
extern int fprintf(FILE * __stream, const char *__format, ...);
extern int printf(const char *__format, ...);
extern int sprintf(char *__s, const char *__format, ...);
extern int vfprintf(FILE * __s, const char *__format, __gnuc_va_list __arg);
extern int vprintf(const char *__format, __gnuc_va_list __arg);
extern int vsprintf(char *__s, const char *__format, __gnuc_va_list __arg);
extern int snprintf(char *__s, size_t __maxlen, const char *__format, ...);
extern int vsnprintf(char *__s, size_t __maxlen, const char *__format, __gnuc_va_list __arg);
extern int fscanf(FILE * __stream, const char *__format, ...);
extern int scanf(const char *__format, ...);
extern int sscanf(const char *__s, const char *__format, ...);
extern int __isoc99_fscanf(FILE * __stream, const char *__format, ...);
extern int __isoc99_scanf(const char *__format, ...);
extern int __isoc99_sscanf(const char *__s, const char *__format, ...);
extern int vfscanf(FILE * __s, const char *__format, __gnuc_va_list __arg);
extern int vscanf(const char *__format, __gnuc_va_list __arg);
extern int vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);
extern int __isoc99_vfscanf(FILE * __s, const char *__format, __gnuc_va_list __arg);
extern int __isoc99_vscanf(const char *__format, __gnuc_va_list __arg);
extern int __isoc99_vsscanf(const char *__s, const char *__format, __gnuc_va_list __arg);
extern int fgetc(FILE * __stream);
extern int getc(FILE * __stream);
extern int getchar(void);
extern int getc_unlocked(FILE * __stream);
extern int getchar_unlocked(void);
extern int fputc(int __c, FILE * __stream);
extern int putc(int __c, FILE * __stream);
extern int putchar(int __c);
extern int putc_unlocked(int __c, FILE * __stream);
extern int putchar_unlocked(int __c);
extern int getw(FILE * __stream);
extern int putw(int __w, FILE * __stream);
extern char *fgets(char *__s, int __n, FILE * __stream);
extern char *gets(char *__s);
extern int fputs(const char *__s, FILE * __stream);
extern int puts(const char *__s);
extern int ungetc(int __c, FILE * __stream);
extern size_t fread(void *__ptr, size_t __size, size_t __n, FILE * __stream);
extern size_t fwrite(const void *__ptr, size_t __size, size_t __n, FILE * __s);
extern int fseek(FILE * __stream, long int __off, int __whence);
extern long int ftell(FILE * __stream);
extern void rewind(FILE * __stream);
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence);
extern __off64_t ftello64(FILE * __stream);
extern int fgetpos64(FILE * __stream, fpos64_t * __pos);
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos);
extern void clearerr(FILE * __stream);
extern int feof(FILE * __stream);
extern int ferror(FILE * __stream);
extern void perror(const char *__s);
extern int fileno(FILE * __stream);
extern FILE *popen(const char *__command, const char *__modes);
extern int pclose(FILE * __stream);
extern char *ctermid(char *__s);
extern char *cuserid(char *__s);
extern void flockfile(FILE * __stream);
extern int ftrylockfile(FILE * __stream);
extern void funlockfile(FILE * __stream);
// /usr/include/tcl.h

typedef void *ClientData;
typedef long long Tcl_WideInt;
typedef unsigned long long Tcl_WideUInt;
typedef struct stat Tcl_StatBuf;
typedef struct Tcl_Interp {
	char *resultDontUse;
	void (*freeProcDontUse) (char *);
	int errorLineDontUse;
} Tcl_Interp;
typedef struct Tcl_AsyncHandler_ *Tcl_AsyncHandler;
typedef struct Tcl_Channel_ *Tcl_Channel;
typedef struct Tcl_ChannelTypeVersion_ *Tcl_ChannelTypeVersion;
typedef struct Tcl_Command_ *Tcl_Command;
typedef struct Tcl_Condition_ *Tcl_Condition;
typedef struct Tcl_Dict_ *Tcl_Dict;
typedef struct Tcl_EncodingState_ *Tcl_EncodingState;
typedef struct Tcl_Encoding_ *Tcl_Encoding;
typedef struct Tcl_Event Tcl_Event;
typedef struct Tcl_InterpState_ *Tcl_InterpState;
typedef struct Tcl_LoadHandle_ *Tcl_LoadHandle;
typedef struct Tcl_Mutex_ *Tcl_Mutex;
typedef struct Tcl_Pid_ *Tcl_Pid;
typedef struct Tcl_RegExp_ *Tcl_RegExp;
typedef struct Tcl_ThreadDataKey_ *Tcl_ThreadDataKey;
typedef struct Tcl_ThreadId_ *Tcl_ThreadId;
typedef struct Tcl_TimerToken_ *Tcl_TimerToken;
typedef struct Tcl_Trace_ *Tcl_Trace;
typedef struct Tcl_Var_ *Tcl_Var;
typedef struct Tcl_ZLibStream_ *Tcl_ZlibStream;
typedef void (Tcl_ThreadCreateProc) (ClientData clientData);
typedef struct Tcl_RegExpIndices {
	long start;
	long end;
} Tcl_RegExpIndices;
typedef struct Tcl_RegExpInfo {
	int nsubs;
	Tcl_RegExpIndices *matches;
	long extendStart;
	long reserved;
} Tcl_RegExpInfo;
typedef Tcl_StatBuf *Tcl_Stat_;
typedef struct stat *Tcl_OldStat_;
typedef enum { TCL_INT, TCL_DOUBLE, TCL_EITHER, TCL_WIDE_INT } Tcl_ValueType;
typedef struct Tcl_Value {
	Tcl_ValueType type;
	long intValue;
	double doubleValue;
	Tcl_WideInt wideValue;
} Tcl_Value;
struct Tcl_Obj;
typedef int (Tcl_AppInitProc) (Tcl_Interp * interp);
typedef int (Tcl_AsyncProc) (ClientData clientData, Tcl_Interp * interp, int code);
typedef void (Tcl_ChannelProc) (ClientData clientData, int mask);
typedef void (Tcl_CloseProc) (ClientData data);
typedef void (Tcl_CmdDeleteProc) (ClientData clientData);
typedef int (Tcl_CmdProc) (ClientData clientData, Tcl_Interp * interp, int argc, const char *argv[]);
typedef void (Tcl_CmdTraceProc) (ClientData clientData, Tcl_Interp * interp, int level, char *command, Tcl_CmdProc * proc, ClientData cmdClientData, int argc, const char *argv[]);
typedef int (Tcl_CmdObjTraceProc) (ClientData clientData, Tcl_Interp * interp, int level, const char *command, Tcl_Command commandInfo, int objc, struct Tcl_Obj * const *objv);
typedef void (Tcl_CmdObjTraceDeleteProc) (ClientData clientData);
typedef void (Tcl_DupInternalRepProc) (struct Tcl_Obj * srcPtr, struct Tcl_Obj * dupPtr);
typedef int (Tcl_EncodingConvertProc) (ClientData clientData, const char *src, int srcLen, int flags, Tcl_EncodingState * statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
typedef void (Tcl_EncodingFreeProc) (ClientData clientData);
typedef int (Tcl_EventProc) (Tcl_Event * evPtr, int flags);
typedef void (Tcl_EventCheckProc) (ClientData clientData, int flags);
typedef int (Tcl_EventDeleteProc) (Tcl_Event * evPtr, ClientData clientData);
typedef void (Tcl_EventSetupProc) (ClientData clientData, int flags);
typedef void (Tcl_ExitProc) (ClientData clientData);
typedef void (Tcl_FileProc) (ClientData clientData, int mask);
typedef void (Tcl_FileFreeProc) (ClientData clientData);
typedef void (Tcl_FreeInternalRepProc) (struct Tcl_Obj * objPtr);
typedef void (Tcl_FreeProc) (char *blockPtr);
typedef void (Tcl_IdleProc) (ClientData clientData);
typedef void (Tcl_InterpDeleteProc) (ClientData clientData, Tcl_Interp * interp);
typedef int (Tcl_MathProc) (ClientData clientData, Tcl_Interp * interp, Tcl_Value * args, Tcl_Value * resultPtr);
typedef void (Tcl_NamespaceDeleteProc) (ClientData clientData);
typedef int (Tcl_ObjCmdProc) (ClientData clientData, Tcl_Interp * interp, int objc, struct Tcl_Obj * const *objv);
typedef int (Tcl_PackageInitProc) (Tcl_Interp * interp);
typedef int (Tcl_PackageUnloadProc) (Tcl_Interp * interp, int flags);
typedef void (Tcl_PanicProc) (const char *format, ...);
typedef void (Tcl_TcpAcceptProc) (ClientData callbackData, Tcl_Channel chan, char *address, int port);
typedef void (Tcl_TimerProc) (ClientData clientData);
typedef int (Tcl_SetFromAnyProc) (Tcl_Interp * interp, struct Tcl_Obj * objPtr);
typedef void (Tcl_UpdateStringProc) (struct Tcl_Obj * objPtr);
typedef char *(Tcl_VarTraceProc) (ClientData clientData, Tcl_Interp * interp, const char *part1, const char *part2, int flags);
typedef void (Tcl_CommandTraceProc) (ClientData clientData, Tcl_Interp * interp, const char *oldName, const char *newName, int flags);
typedef void (Tcl_CreateFileHandlerProc) (int fd, int mask, Tcl_FileProc * proc, ClientData clientData);
typedef void (Tcl_DeleteFileHandlerProc) (int fd);
typedef void (Tcl_AlertNotifierProc) (ClientData clientData);
typedef void (Tcl_ServiceModeHookProc) (int mode);
typedef ClientData(Tcl_InitNotifierProc) (void);
typedef void (Tcl_FinalizeNotifierProc) (ClientData clientData);
typedef void (Tcl_MainLoopProc) (void);
typedef struct Tcl_ObjType {
	const char *name;
	Tcl_FreeInternalRepProc *freeIntRepProc;
	Tcl_DupInternalRepProc *dupIntRepProc;
	Tcl_UpdateStringProc *updateStringProc;
	Tcl_SetFromAnyProc *setFromAnyProc;
} Tcl_ObjType;
typedef struct Tcl_Obj {
	int refCount;
	char *bytes;
	int length;
	const Tcl_ObjType *typePtr;
	union {
		long longValue;
		double doubleValue;
		void *otherValuePtr;
		Tcl_WideInt wideValue;
		struct {
			void *ptr1;
			void *ptr2;
		} twoPtrValue;
		struct {
			void *ptr;
			unsigned long value;
		} ptrAndLongRep;
	} internalRep;
} Tcl_Obj;
void Tcl_IncrRefCount(Tcl_Obj * objPtr);
void Tcl_DecrRefCount(Tcl_Obj * objPtr);
int Tcl_IsShared(Tcl_Obj * objPtr);
typedef struct Tcl_SavedResult {
	char *result;
	Tcl_FreeProc *freeProc;
	Tcl_Obj *objResultPtr;
	char *appendResult;
	int appendAvl;
	int appendUsed;
	char resultSpace[201];
} Tcl_SavedResult;
typedef struct Tcl_Namespace {
	char *name;
	char *fullName;
	ClientData clientData;
	Tcl_NamespaceDeleteProc *deleteProc;
	struct Tcl_Namespace *parentPtr;
} Tcl_Namespace;
typedef struct Tcl_CallFrame {
	Tcl_Namespace *nsPtr;
	int dummy1;
	int dummy2;
	void *dummy3;
	void *dummy4;
	void *dummy5;
	int dummy6;
	void *dummy7;
	void *dummy8;
	int dummy9;
	void *dummy10;
	void *dummy11;
	void *dummy12;
	void *dummy13;
} Tcl_CallFrame;
typedef struct Tcl_CmdInfo {
	int isNativeObjectProc;
	Tcl_ObjCmdProc *objProc;
	ClientData objClientData;
	Tcl_CmdProc *proc;
	ClientData clientData;
	Tcl_CmdDeleteProc *deleteProc;
	ClientData deleteData;
	Tcl_Namespace *namespacePtr;
} Tcl_CmdInfo;
typedef struct Tcl_DString {
	char *string;
	int length;
	int spaceAvl;
	char staticSpace[200];
} Tcl_DString;
typedef struct Tcl_HashKeyType Tcl_HashKeyType;
typedef struct Tcl_HashTable Tcl_HashTable;
typedef struct Tcl_HashEntry Tcl_HashEntry;
typedef unsigned (Tcl_HashKeyProc) (Tcl_HashTable * tablePtr, void *keyPtr);
typedef int (Tcl_CompareHashKeysProc) (void *keyPtr, Tcl_HashEntry * hPtr);
typedef Tcl_HashEntry *(Tcl_AllocHashEntryProc) (Tcl_HashTable * tablePtr, void *keyPtr);
typedef void (Tcl_FreeHashEntryProc) (Tcl_HashEntry * hPtr);
struct Tcl_HashEntry {
	Tcl_HashEntry *nextPtr;
	Tcl_HashTable *tablePtr;
	void *hash;
	ClientData clientData;
	union {
		char *oneWordValue;
		Tcl_Obj *objPtr;
		int words[1];
		char string[1];
	} key;
};
struct Tcl_HashKeyType {
	int version;
	int flags;
	Tcl_HashKeyProc *hashKeyProc;
	Tcl_CompareHashKeysProc *compareKeysProc;
	Tcl_AllocHashEntryProc *allocEntryProc;
	Tcl_FreeHashEntryProc *freeEntryProc;
};
struct Tcl_HashTable {
	Tcl_HashEntry **buckets;
	Tcl_HashEntry *staticBuckets[4];
	int numBuckets;
	int numEntries;
	int rebuildSize;
	int downShift;
	int mask;
	int keyType;
	Tcl_HashEntry *(*findProc) (Tcl_HashTable * tablePtr, const char *key);
	Tcl_HashEntry *(*createProc) (Tcl_HashTable * tablePtr, const char *key, int *newPtr);
	const Tcl_HashKeyType *typePtr;
};
typedef struct Tcl_HashSearch {
	Tcl_HashTable *tablePtr;
	int nextIndex;
	Tcl_HashEntry *nextEntryPtr;
} Tcl_HashSearch;
typedef struct {
	void *next;
	int epoch;
	Tcl_Dict dictionaryPtr;
} Tcl_DictSearch;
struct Tcl_Event {
	Tcl_EventProc *proc;
	struct Tcl_Event *nextPtr;
};
typedef enum { TCL_QUEUE_TAIL, TCL_QUEUE_HEAD, TCL_QUEUE_MARK } Tcl_QueuePosition;
typedef struct Tcl_Time {
	long sec;
	long usec;
} Tcl_Time;
typedef void (Tcl_SetTimerProc) (const Tcl_Time * timePtr);
typedef int (Tcl_WaitForEventProc) (const Tcl_Time * timePtr);
typedef void (Tcl_GetTimeProc) (Tcl_Time * timebuf, ClientData clientData);
typedef void (Tcl_ScaleTimeProc) (Tcl_Time * timebuf, ClientData clientData);
typedef int (Tcl_DriverBlockModeProc) (ClientData instanceData, int mode);
typedef int (Tcl_DriverCloseProc) (ClientData instanceData, Tcl_Interp * interp);
typedef int (Tcl_DriverClose2Proc) (ClientData instanceData, Tcl_Interp * interp, int flags);
typedef int (Tcl_DriverInputProc) (ClientData instanceData, char *buf, int toRead, int *errorCodePtr);
typedef int (Tcl_DriverOutputProc) (ClientData instanceData, const char *buf, int toWrite, int *errorCodePtr);
typedef int (Tcl_DriverSeekProc) (ClientData instanceData, long offset, int mode, int *errorCodePtr);
typedef int (Tcl_DriverSetOptionProc) (ClientData instanceData, Tcl_Interp * interp, const char *optionName, const char *value);
typedef int (Tcl_DriverGetOptionProc) (ClientData instanceData, Tcl_Interp * interp, const char *optionName, Tcl_DString * dsPtr);
typedef void (Tcl_DriverWatchProc) (ClientData instanceData, int mask);
typedef int (Tcl_DriverGetHandleProc) (ClientData instanceData, int direction, ClientData * handlePtr);
typedef int (Tcl_DriverFlushProc) (ClientData instanceData);
typedef int (Tcl_DriverHandlerProc) (ClientData instanceData, int interestMask);
typedef Tcl_WideInt(Tcl_DriverWideSeekProc) (ClientData instanceData, Tcl_WideInt offset, int mode, int *errorCodePtr);
typedef void (Tcl_DriverThreadActionProc) (ClientData instanceData, int action);
typedef int (Tcl_DriverTruncateProc) (ClientData instanceData, Tcl_WideInt length);
typedef struct Tcl_ChannelType {
	const char *typeName;
	Tcl_ChannelTypeVersion version;
	Tcl_DriverCloseProc *closeProc;
	Tcl_DriverInputProc *inputProc;
	Tcl_DriverOutputProc *outputProc;
	Tcl_DriverSeekProc *seekProc;
	Tcl_DriverSetOptionProc *setOptionProc;
	Tcl_DriverGetOptionProc *getOptionProc;
	Tcl_DriverWatchProc *watchProc;
	Tcl_DriverGetHandleProc *getHandleProc;
	Tcl_DriverClose2Proc *close2Proc;
	Tcl_DriverBlockModeProc *blockModeProc;
	Tcl_DriverFlushProc *flushProc;
	Tcl_DriverHandlerProc *handlerProc;
	Tcl_DriverWideSeekProc *wideSeekProc;
	Tcl_DriverThreadActionProc *threadActionProc;
	Tcl_DriverTruncateProc *truncateProc;
} Tcl_ChannelType;
typedef enum Tcl_PathType { TCL_PATH_ABSOLUTE, TCL_PATH_RELATIVE, TCL_PATH_VOLUME_RELATIVE } Tcl_PathType;
typedef struct Tcl_GlobTypeData {
	int type;
	int perm;
	Tcl_Obj *macType;
	Tcl_Obj *macCreator;
} Tcl_GlobTypeData;
typedef int (Tcl_FSStatProc) (Tcl_Obj * pathPtr, Tcl_StatBuf * buf);
typedef int (Tcl_FSAccessProc) (Tcl_Obj * pathPtr, int mode);
typedef Tcl_Channel(Tcl_FSOpenFileChannelProc) (Tcl_Interp * interp, Tcl_Obj * pathPtr, int mode, int permissions);
typedef int (Tcl_FSMatchInDirectoryProc) (Tcl_Interp * interp, Tcl_Obj * result, Tcl_Obj * pathPtr, const char *pattern, Tcl_GlobTypeData * types);
typedef Tcl_Obj *(Tcl_FSGetCwdProc) (Tcl_Interp * interp);
typedef int (Tcl_FSChdirProc) (Tcl_Obj * pathPtr);
typedef int (Tcl_FSLstatProc) (Tcl_Obj * pathPtr, Tcl_StatBuf * buf);
typedef int (Tcl_FSCreateDirectoryProc) (Tcl_Obj * pathPtr);
typedef int (Tcl_FSDeleteFileProc) (Tcl_Obj * pathPtr);
typedef int (Tcl_FSCopyDirectoryProc) (Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr, Tcl_Obj ** errorPtr);
typedef int (Tcl_FSCopyFileProc) (Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr);
typedef int (Tcl_FSRemoveDirectoryProc) (Tcl_Obj * pathPtr, int recursive, Tcl_Obj ** errorPtr);
typedef int (Tcl_FSRenameFileProc) (Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr);
typedef void (Tcl_FSUnloadFileProc) (Tcl_LoadHandle loadHandle);
typedef Tcl_Obj *(Tcl_FSListVolumesProc) (void);
struct utimbuf;
typedef int (Tcl_FSUtimeProc) (Tcl_Obj * pathPtr, struct utimbuf * tval);
typedef int (Tcl_FSNormalizePathProc) (Tcl_Interp * interp, Tcl_Obj * pathPtr, int nextCheckpoint);
typedef int (Tcl_FSFileAttrsGetProc) (Tcl_Interp * interp, int index, Tcl_Obj * pathPtr, Tcl_Obj ** objPtrRef);
typedef const char *const *(Tcl_FSFileAttrStringsProc) (Tcl_Obj * pathPtr, Tcl_Obj ** objPtrRef);
typedef int (Tcl_FSFileAttrsSetProc) (Tcl_Interp * interp, int index, Tcl_Obj * pathPtr, Tcl_Obj * objPtr);
typedef Tcl_Obj *(Tcl_FSLinkProc) (Tcl_Obj * pathPtr, Tcl_Obj * toPtr, int linkType);
typedef int (Tcl_FSLoadFileProc) (Tcl_Interp * interp, Tcl_Obj * pathPtr, Tcl_LoadHandle * handlePtr, Tcl_FSUnloadFileProc ** unloadProcPtr);
typedef int (Tcl_FSPathInFilesystemProc) (Tcl_Obj * pathPtr, ClientData * clientDataPtr);
typedef Tcl_Obj *(Tcl_FSFilesystemPathTypeProc) (Tcl_Obj * pathPtr);
typedef Tcl_Obj *(Tcl_FSFilesystemSeparatorProc) (Tcl_Obj * pathPtr);
typedef void (Tcl_FSFreeInternalRepProc) (ClientData clientData);
typedef ClientData(Tcl_FSDupInternalRepProc) (ClientData clientData);
typedef Tcl_Obj *(Tcl_FSInternalToNormalizedProc) (ClientData clientData);
typedef ClientData(Tcl_FSCreateInternalRepProc) (Tcl_Obj * pathPtr);
typedef struct Tcl_FSVersion_ *Tcl_FSVersion;
typedef struct Tcl_Filesystem {
	const char *typeName;
	int structureLength;
	Tcl_FSVersion version;
	Tcl_FSPathInFilesystemProc *pathInFilesystemProc;
	Tcl_FSDupInternalRepProc *dupInternalRepProc;
	Tcl_FSFreeInternalRepProc *freeInternalRepProc;
	Tcl_FSInternalToNormalizedProc *internalToNormalizedProc;
	Tcl_FSCreateInternalRepProc *createInternalRepProc;
	Tcl_FSNormalizePathProc *normalizePathProc;
	Tcl_FSFilesystemPathTypeProc *filesystemPathTypeProc;
	Tcl_FSFilesystemSeparatorProc *filesystemSeparatorProc;
	Tcl_FSStatProc *statProc;
	Tcl_FSAccessProc *accessProc;
	Tcl_FSOpenFileChannelProc *openFileChannelProc;
	Tcl_FSMatchInDirectoryProc *matchInDirectoryProc;
	Tcl_FSUtimeProc *utimeProc;
	Tcl_FSLinkProc *linkProc;
	Tcl_FSListVolumesProc *listVolumesProc;
	Tcl_FSFileAttrStringsProc *fileAttrStringsProc;
	Tcl_FSFileAttrsGetProc *fileAttrsGetProc;
	Tcl_FSFileAttrsSetProc *fileAttrsSetProc;
	Tcl_FSCreateDirectoryProc *createDirectoryProc;
	Tcl_FSRemoveDirectoryProc *removeDirectoryProc;
	Tcl_FSDeleteFileProc *deleteFileProc;
	Tcl_FSCopyFileProc *copyFileProc;
	Tcl_FSRenameFileProc *renameFileProc;
	Tcl_FSCopyDirectoryProc *copyDirectoryProc;
	Tcl_FSLstatProc *lstatProc;
	Tcl_FSLoadFileProc *loadFileProc;
	Tcl_FSGetCwdProc *getCwdProc;
	Tcl_FSChdirProc *chdirProc;
} Tcl_Filesystem;
typedef struct Tcl_NotifierProcs {
	Tcl_SetTimerProc *setTimerProc;
	Tcl_WaitForEventProc *waitForEventProc;
	Tcl_CreateFileHandlerProc *createFileHandlerProc;
	Tcl_DeleteFileHandlerProc *deleteFileHandlerProc;
	Tcl_InitNotifierProc *initNotifierProc;
	Tcl_FinalizeNotifierProc *finalizeNotifierProc;
	Tcl_AlertNotifierProc *alertNotifierProc;
	Tcl_ServiceModeHookProc *serviceModeHookProc;
} Tcl_NotifierProcs;
typedef struct Tcl_Token {
	int type;
	const char *start;
	int size;
	int numComponents;
} Tcl_Token;
typedef struct Tcl_Parse {
	const char *commentStart;
	int commentSize;
	const char *commandStart;
	int commandSize;
	int numWords;
	Tcl_Token *tokenPtr;
	int numTokens;
	int tokensAvailable;
	int errorType;
	const char *string;
	const char *end;
	Tcl_Interp *interp;
	const char *term;
	int incomplete;
	Tcl_Token staticTokens[20];
} Tcl_Parse;
typedef struct Tcl_EncodingType {
	const char *encodingName;
	Tcl_EncodingConvertProc *toUtfProc;
	Tcl_EncodingConvertProc *fromUtfProc;
	Tcl_EncodingFreeProc *freeProc;
	ClientData clientData;
	int nullSize;
} Tcl_EncodingType;
typedef unsigned short Tcl_UniChar;
typedef struct Tcl_Config {
	const char *key;
	const char *value;
} Tcl_Config;
typedef void (Tcl_LimitHandlerProc) (ClientData clientData, Tcl_Interp * interp);
typedef void (Tcl_LimitHandlerDeleteProc) (ClientData clientData);
typedef struct mp_int mp_int;
typedef unsigned int mp_digit;
typedef struct {
	int type;
	const char *keyStr;
	void *srcPtr;
	void *dstPtr;
	const char *helpStr;
	ClientData clientData;
} Tcl_ArgvInfo;
typedef int (Tcl_ArgvFuncProc) (ClientData clientData, Tcl_Obj * objPtr, void *dstPtr);
typedef int (Tcl_ArgvGenFuncProc) (ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj * const *objv, void *dstPtr);
typedef int (Tcl_NRPostProc) (ClientData data[], Tcl_Interp * interp, int result);
const char *Tcl_InitStubs(Tcl_Interp * interp, const char *version, int exact);
const char *TclTomMathInitializeStubs(Tcl_Interp * interp, const char *version, int epoch, int revision);
extern void Tcl_MainEx(int argc, char **argv, Tcl_AppInitProc * appInitProc, Tcl_Interp * interp);
extern const char *Tcl_PkgInitStubsCheck(Tcl_Interp * interp, const char *version, int exact);
extern void Tcl_GetMemoryInfo(Tcl_DString * dsPtr);
// /usr/include/tclDecls.h

extern int Tcl_PkgProvideEx(Tcl_Interp * interp, const char *name, const char *version, const void *clientData);
extern const char *Tcl_PkgRequireEx(Tcl_Interp * interp, const char *name, const char *version, int exact, void *clientDataPtr);
extern void Tcl_Panic(const char *format, ...);
extern char *Tcl_Alloc(unsigned int size);
extern void Tcl_Free(char *ptr);
extern char *Tcl_Realloc(char *ptr, unsigned int size);
extern char *Tcl_DbCkalloc(unsigned int size, const char *file, int line);
extern void Tcl_DbCkfree(char *ptr, const char *file, int line);
extern char *Tcl_DbCkrealloc(char *ptr, unsigned int size, const char *file, int line);
extern void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc * proc, ClientData clientData);
extern void Tcl_DeleteFileHandler(int fd);
extern void Tcl_SetTimer(const Tcl_Time * timePtr);
extern void Tcl_Sleep(int ms);
extern int Tcl_WaitForEvent(const Tcl_Time * timePtr);
extern int Tcl_AppendAllObjTypes(Tcl_Interp * interp, Tcl_Obj * objPtr);
extern void Tcl_AppendStringsToObj(Tcl_Obj * objPtr, ...);
extern void Tcl_AppendToObj(Tcl_Obj * objPtr, const char *bytes, int length);
extern Tcl_Obj *Tcl_ConcatObj(int objc, Tcl_Obj * const objv[]);
extern int Tcl_ConvertToType(Tcl_Interp * interp, Tcl_Obj * objPtr, const Tcl_ObjType * typePtr);
extern void Tcl_DbDecrRefCount(Tcl_Obj * objPtr, const char *file, int line);
extern void Tcl_DbIncrRefCount(Tcl_Obj * objPtr, const char *file, int line);
extern int Tcl_DbIsShared(Tcl_Obj * objPtr, const char *file, int line);
extern Tcl_Obj *Tcl_DbNewBooleanObj(int boolValue, const char *file, int line);
extern Tcl_Obj *Tcl_DbNewByteArrayObj(const unsigned char *bytes, int length, const char *file, int line);
extern Tcl_Obj *Tcl_DbNewDoubleObj(double doubleValue, const char *file, int line);
extern Tcl_Obj *Tcl_DbNewListObj(int objc, Tcl_Obj * const *objv, const char *file, int line);
extern Tcl_Obj *Tcl_DbNewLongObj(long longValue, const char *file, int line);
extern Tcl_Obj *Tcl_DbNewObj(const char *file, int line);
extern Tcl_Obj *Tcl_DbNewStringObj(const char *bytes, int length, const char *file, int line);
extern Tcl_Obj *Tcl_DuplicateObj(Tcl_Obj * objPtr);
extern void TclFreeObj(Tcl_Obj * objPtr);
extern int Tcl_GetBoolean(Tcl_Interp * interp, const char *src, int *boolPtr);
extern int Tcl_GetBooleanFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr, int *boolPtr);
extern unsigned char *Tcl_GetByteArrayFromObj(Tcl_Obj * objPtr, int *lengthPtr);
extern int Tcl_GetDouble(Tcl_Interp * interp, const char *src, double *doublePtr);
extern int Tcl_GetDoubleFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr, double *doublePtr);
extern int Tcl_GetIndexFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr, const char *const *tablePtr, const char *msg, int flags, int *indexPtr);
extern int Tcl_GetInt(Tcl_Interp * interp, const char *src, int *intPtr);
extern int Tcl_GetIntFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr, int *intPtr);
extern int Tcl_GetLongFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr, long *longPtr);
extern const Tcl_ObjType *Tcl_GetObjType(const char *typeName);
extern char *Tcl_GetStringFromObj(Tcl_Obj * objPtr, int *lengthPtr);
extern void Tcl_InvalidateStringRep(Tcl_Obj * objPtr);
extern int Tcl_ListObjAppendList(Tcl_Interp * interp, Tcl_Obj * listPtr, Tcl_Obj * elemListPtr);
extern int Tcl_ListObjAppendElement(Tcl_Interp * interp, Tcl_Obj * listPtr, Tcl_Obj * objPtr);
extern int Tcl_ListObjGetElements(Tcl_Interp * interp, Tcl_Obj * listPtr, int *objcPtr, Tcl_Obj *** objvPtr);
extern int Tcl_ListObjIndex(Tcl_Interp * interp, Tcl_Obj * listPtr, int index, Tcl_Obj ** objPtrPtr);
extern int Tcl_ListObjLength(Tcl_Interp * interp, Tcl_Obj * listPtr, int *lengthPtr);
extern int Tcl_ListObjReplace(Tcl_Interp * interp, Tcl_Obj * listPtr, int first, int count, int objc, Tcl_Obj * const objv[]);
extern Tcl_Obj *Tcl_NewBooleanObj(int boolValue);
extern Tcl_Obj *Tcl_NewByteArrayObj(const unsigned char *bytes, int length);
extern Tcl_Obj *Tcl_NewDoubleObj(double doubleValue);
extern Tcl_Obj *Tcl_NewIntObj(int intValue);
extern Tcl_Obj *Tcl_NewListObj(int objc, Tcl_Obj * const objv[]);
extern Tcl_Obj *Tcl_NewLongObj(long longValue);
extern Tcl_Obj *Tcl_NewObj(void);
extern Tcl_Obj *Tcl_NewStringObj(const char *bytes, int length);
extern void Tcl_SetBooleanObj(Tcl_Obj * objPtr, int boolValue);
extern unsigned char *Tcl_SetByteArrayLength(Tcl_Obj * objPtr, int length);
extern void Tcl_SetByteArrayObj(Tcl_Obj * objPtr, const unsigned char *bytes, int length);
extern void Tcl_SetDoubleObj(Tcl_Obj * objPtr, double doubleValue);
extern void Tcl_SetIntObj(Tcl_Obj * objPtr, int intValue);
extern void Tcl_SetListObj(Tcl_Obj * objPtr, int objc, Tcl_Obj * const objv[]);
extern void Tcl_SetLongObj(Tcl_Obj * objPtr, long longValue);
extern void Tcl_SetObjLength(Tcl_Obj * objPtr, int length);
extern void Tcl_SetStringObj(Tcl_Obj * objPtr, const char *bytes, int length);
extern void Tcl_AddErrorInfo(Tcl_Interp * interp, const char *message);
extern void Tcl_AddObjErrorInfo(Tcl_Interp * interp, const char *message, int length);
extern void Tcl_AllowExceptions(Tcl_Interp * interp);
extern void Tcl_AppendElement(Tcl_Interp * interp, const char *element);
extern void Tcl_AppendResult(Tcl_Interp * interp, ...);
extern Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc * proc, ClientData clientData);
extern void Tcl_AsyncDelete(Tcl_AsyncHandler async);
extern int Tcl_AsyncInvoke(Tcl_Interp * interp, int code);
extern void Tcl_AsyncMark(Tcl_AsyncHandler async);
extern int Tcl_AsyncReady(void);
extern void Tcl_BackgroundError(Tcl_Interp * interp);
extern char Tcl_Backslash(const char *src, int *readPtr);
extern int Tcl_BadChannelOption(Tcl_Interp * interp, const char *optionName, const char *optionList);
extern void Tcl_CallWhenDeleted(Tcl_Interp * interp, Tcl_InterpDeleteProc * proc, ClientData clientData);
extern void Tcl_CancelIdleCall(Tcl_IdleProc * idleProc, ClientData clientData);
extern int Tcl_Close(Tcl_Interp * interp, Tcl_Channel chan);
extern int Tcl_CommandComplete(const char *cmd);
extern char *Tcl_Concat(int argc, const char *const *argv);
extern int Tcl_ConvertElement(const char *src, char *dst, int flags);
extern int Tcl_ConvertCountedElement(const char *src, int length, char *dst, int flags);
extern int Tcl_CreateAlias(Tcl_Interp * slave, const char *slaveCmd, Tcl_Interp * target, const char *targetCmd, int argc, const char *const *argv);
extern int Tcl_CreateAliasObj(Tcl_Interp * slave, const char *slaveCmd, Tcl_Interp * target, const char *targetCmd, int objc, Tcl_Obj * const objv[]);
extern Tcl_Channel Tcl_CreateChannel(const Tcl_ChannelType * typePtr, const char *chanName, ClientData instanceData, int mask);
extern void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask, Tcl_ChannelProc * proc, ClientData clientData);
extern void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc * proc, ClientData clientData);
extern Tcl_Command Tcl_CreateCommand(Tcl_Interp * interp, const char *cmdName, Tcl_CmdProc * proc, ClientData clientData, Tcl_CmdDeleteProc * deleteProc);
extern void Tcl_CreateEventSource(Tcl_EventSetupProc * setupProc, Tcl_EventCheckProc * checkProc, ClientData clientData);
extern void Tcl_CreateExitHandler(Tcl_ExitProc * proc, ClientData clientData);
extern Tcl_Interp *Tcl_CreateInterp(void);
extern void Tcl_CreateMathFunc(Tcl_Interp * interp, const char *name, int numArgs, Tcl_ValueType * argTypes, Tcl_MathProc * proc, ClientData clientData);
extern Tcl_Command Tcl_CreateObjCommand(Tcl_Interp * interp, const char *cmdName, Tcl_ObjCmdProc * proc, ClientData clientData, Tcl_CmdDeleteProc * deleteProc);
extern Tcl_Interp *Tcl_CreateSlave(Tcl_Interp * interp, const char *slaveName, int isSafe);
extern Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds, Tcl_TimerProc * proc, ClientData clientData);
extern Tcl_Trace Tcl_CreateTrace(Tcl_Interp * interp, int level, Tcl_CmdTraceProc * proc, ClientData clientData);
extern void Tcl_DeleteAssocData(Tcl_Interp * interp, const char *name);
extern void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc * proc, ClientData clientData);
extern void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc * proc, ClientData clientData);
extern int Tcl_DeleteCommand(Tcl_Interp * interp, const char *cmdName);
extern int Tcl_DeleteCommandFromToken(Tcl_Interp * interp, Tcl_Command command);
extern void Tcl_DeleteEvents(Tcl_EventDeleteProc * proc, ClientData clientData);
extern void Tcl_DeleteEventSource(Tcl_EventSetupProc * setupProc, Tcl_EventCheckProc * checkProc, ClientData clientData);
extern void Tcl_DeleteExitHandler(Tcl_ExitProc * proc, ClientData clientData);
extern void Tcl_DeleteHashEntry(Tcl_HashEntry * entryPtr);
extern void Tcl_DeleteHashTable(Tcl_HashTable * tablePtr);
extern void Tcl_DeleteInterp(Tcl_Interp * interp);
extern void Tcl_DetachPids(int numPids, Tcl_Pid * pidPtr);
extern void Tcl_DeleteTimerHandler(Tcl_TimerToken token);
extern void Tcl_DeleteTrace(Tcl_Interp * interp, Tcl_Trace trace);
extern void Tcl_DontCallWhenDeleted(Tcl_Interp * interp, Tcl_InterpDeleteProc * proc, ClientData clientData);
extern int Tcl_DoOneEvent(int flags);
extern void Tcl_DoWhenIdle(Tcl_IdleProc * proc, ClientData clientData);
extern char *Tcl_DStringAppend(Tcl_DString * dsPtr, const char *bytes, int length);
extern char *Tcl_DStringAppendElement(Tcl_DString * dsPtr, const char *element);
extern void Tcl_DStringEndSublist(Tcl_DString * dsPtr);
extern void Tcl_DStringFree(Tcl_DString * dsPtr);
extern void Tcl_DStringGetResult(Tcl_Interp * interp, Tcl_DString * dsPtr);
extern void Tcl_DStringInit(Tcl_DString * dsPtr);
extern void Tcl_DStringResult(Tcl_Interp * interp, Tcl_DString * dsPtr);
extern void Tcl_DStringSetLength(Tcl_DString * dsPtr, int length);
extern void Tcl_DStringStartSublist(Tcl_DString * dsPtr);
extern int Tcl_Eof(Tcl_Channel chan);
extern const char *Tcl_ErrnoId(void);
extern const char *Tcl_ErrnoMsg(int err);
extern int Tcl_Eval(Tcl_Interp * interp, const char *script);
extern int Tcl_EvalFile(Tcl_Interp * interp, const char *fileName);
extern int Tcl_EvalObj(Tcl_Interp * interp, Tcl_Obj * objPtr);
extern void Tcl_EventuallyFree(ClientData clientData, Tcl_FreeProc * freeProc);
extern void Tcl_Exit(int status);
extern int Tcl_ExposeCommand(Tcl_Interp * interp, const char *hiddenCmdToken, const char *cmdName);
extern int Tcl_ExprBoolean(Tcl_Interp * interp, const char *expr, int *ptr);
extern int Tcl_ExprBooleanObj(Tcl_Interp * interp, Tcl_Obj * objPtr, int *ptr);
extern int Tcl_ExprDouble(Tcl_Interp * interp, const char *expr, double *ptr);
extern int Tcl_ExprDoubleObj(Tcl_Interp * interp, Tcl_Obj * objPtr, double *ptr);
extern int Tcl_ExprLong(Tcl_Interp * interp, const char *expr, long *ptr);
extern int Tcl_ExprLongObj(Tcl_Interp * interp, Tcl_Obj * objPtr, long *ptr);
extern int Tcl_ExprObj(Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_Obj ** resultPtrPtr);
extern int Tcl_ExprString(Tcl_Interp * interp, const char *expr);
extern void Tcl_Finalize(void);
extern void Tcl_FindExecutable(const char *argv0);
extern Tcl_HashEntry *Tcl_FirstHashEntry(Tcl_HashTable * tablePtr, Tcl_HashSearch * searchPtr);
extern int Tcl_Flush(Tcl_Channel chan);
extern void Tcl_FreeResult(Tcl_Interp * interp);
extern int Tcl_GetAlias(Tcl_Interp * interp, const char *slaveCmd, Tcl_Interp ** targetInterpPtr, const char **targetCmdPtr, int *argcPtr, const char ***argvPtr);
extern int Tcl_GetAliasObj(Tcl_Interp * interp, const char *slaveCmd, Tcl_Interp ** targetInterpPtr, const char **targetCmdPtr, int *objcPtr, Tcl_Obj *** objv);
extern ClientData Tcl_GetAssocData(Tcl_Interp * interp, const char *name, Tcl_InterpDeleteProc ** procPtr);
extern Tcl_Channel Tcl_GetChannel(Tcl_Interp * interp, const char *chanName, int *modePtr);
extern int Tcl_GetChannelBufferSize(Tcl_Channel chan);
extern int Tcl_GetChannelHandle(Tcl_Channel chan, int direction, ClientData * handlePtr);
extern ClientData Tcl_GetChannelInstanceData(Tcl_Channel chan);
extern int Tcl_GetChannelMode(Tcl_Channel chan);
extern const char *Tcl_GetChannelName(Tcl_Channel chan);
extern int Tcl_GetChannelOption(Tcl_Interp * interp, Tcl_Channel chan, const char *optionName, Tcl_DString * dsPtr);
extern const Tcl_ChannelType *Tcl_GetChannelType(Tcl_Channel chan);
extern int Tcl_GetCommandInfo(Tcl_Interp * interp, const char *cmdName, Tcl_CmdInfo * infoPtr);
extern const char *Tcl_GetCommandName(Tcl_Interp * interp, Tcl_Command command);
extern int Tcl_GetErrno(void);
extern const char *Tcl_GetHostName(void);
extern int Tcl_GetInterpPath(Tcl_Interp * askInterp, Tcl_Interp * slaveInterp);
extern Tcl_Interp *Tcl_GetMaster(Tcl_Interp * interp);
extern const char *Tcl_GetNameOfExecutable(void);
extern Tcl_Obj *Tcl_GetObjResult(Tcl_Interp * interp);
extern int Tcl_GetOpenFile(Tcl_Interp * interp, const char *chanID, int forWriting, int checkUsage, ClientData * filePtr);
extern Tcl_PathType Tcl_GetPathType(const char *path);
extern int Tcl_Gets(Tcl_Channel chan, Tcl_DString * dsPtr);
extern int Tcl_GetsObj(Tcl_Channel chan, Tcl_Obj * objPtr);
extern int Tcl_GetServiceMode(void);
extern Tcl_Interp *Tcl_GetSlave(Tcl_Interp * interp, const char *slaveName);
extern Tcl_Channel Tcl_GetStdChannel(int type);
extern const char *Tcl_GetStringResult(Tcl_Interp * interp);
extern const char *Tcl_GetVar(Tcl_Interp * interp, const char *varName, int flags);
extern const char *Tcl_GetVar2(Tcl_Interp * interp, const char *part1, const char *part2, int flags);
extern int Tcl_GlobalEval(Tcl_Interp * interp, const char *command);
extern int Tcl_GlobalEvalObj(Tcl_Interp * interp, Tcl_Obj * objPtr);
extern int Tcl_HideCommand(Tcl_Interp * interp, const char *cmdName, const char *hiddenCmdToken);
extern int Tcl_Init(Tcl_Interp * interp);
extern void Tcl_InitHashTable(Tcl_HashTable * tablePtr, int keyType);
extern int Tcl_InputBlocked(Tcl_Channel chan);
extern int Tcl_InputBuffered(Tcl_Channel chan);
extern int Tcl_InterpDeleted(Tcl_Interp * interp);
extern int Tcl_IsSafe(Tcl_Interp * interp);
extern char *Tcl_JoinPath(int argc, const char *const *argv, Tcl_DString * resultPtr);
extern int Tcl_LinkVar(Tcl_Interp * interp, const char *varName, char *addr, int type);
extern Tcl_Channel Tcl_MakeFileChannel(ClientData handle, int mode);
extern int Tcl_MakeSafe(Tcl_Interp * interp);
extern Tcl_Channel Tcl_MakeTcpClientChannel(ClientData tcpSocket);
extern char *Tcl_Merge(int argc, const char *const *argv);
extern Tcl_HashEntry *Tcl_NextHashEntry(Tcl_HashSearch * searchPtr);
extern void Tcl_NotifyChannel(Tcl_Channel channel, int mask);
extern Tcl_Obj *Tcl_ObjGetVar2(Tcl_Interp * interp, Tcl_Obj * part1Ptr, Tcl_Obj * part2Ptr, int flags);
extern Tcl_Obj *Tcl_ObjSetVar2(Tcl_Interp * interp, Tcl_Obj * part1Ptr, Tcl_Obj * part2Ptr, Tcl_Obj * newValuePtr, int flags);
extern Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp * interp, int argc, const char **argv, int flags);
extern Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp * interp, const char *fileName, const char *modeString, int permissions);
extern Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp * interp, int port, const char *address, const char *myaddr, int myport, int async);
extern Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp * interp, int port, const char *host, Tcl_TcpAcceptProc * acceptProc, ClientData callbackData);
extern void Tcl_Preserve(ClientData data);
extern void Tcl_PrintDouble(Tcl_Interp * interp, double value, char *dst);
extern int Tcl_PutEnv(const char *assignment);
extern const char *Tcl_PosixError(Tcl_Interp * interp);
extern void Tcl_QueueEvent(Tcl_Event * evPtr, Tcl_QueuePosition position);
extern int Tcl_Read(Tcl_Channel chan, char *bufPtr, int toRead);
extern void Tcl_ReapDetachedProcs(void);
extern int Tcl_RecordAndEval(Tcl_Interp * interp, const char *cmd, int flags);
extern int Tcl_RecordAndEvalObj(Tcl_Interp * interp, Tcl_Obj * cmdPtr, int flags);
extern void Tcl_RegisterChannel(Tcl_Interp * interp, Tcl_Channel chan);
extern void Tcl_RegisterObjType(const Tcl_ObjType * typePtr);
extern Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp * interp, const char *pattern);
extern int Tcl_RegExpExec(Tcl_Interp * interp, Tcl_RegExp regexp, const char *text, const char *start);
extern int Tcl_RegExpMatch(Tcl_Interp * interp, const char *text, const char *pattern);
extern void Tcl_RegExpRange(Tcl_RegExp regexp, int index, const char **startPtr, const char **endPtr);
extern void Tcl_Release(ClientData clientData);
extern void Tcl_ResetResult(Tcl_Interp * interp);
extern int Tcl_ScanElement(const char *src, int *flagPtr);
extern int Tcl_ScanCountedElement(const char *src, int length, int *flagPtr);
extern int Tcl_SeekOld(Tcl_Channel chan, int offset, int mode);
extern int Tcl_ServiceAll(void);
extern int Tcl_ServiceEvent(int flags);
extern void Tcl_SetAssocData(Tcl_Interp * interp, const char *name, Tcl_InterpDeleteProc * proc, ClientData clientData);
extern void Tcl_SetChannelBufferSize(Tcl_Channel chan, int sz);
extern int Tcl_SetChannelOption(Tcl_Interp * interp, Tcl_Channel chan, const char *optionName, const char *newValue);
extern int Tcl_SetCommandInfo(Tcl_Interp * interp, const char *cmdName, const Tcl_CmdInfo * infoPtr);
extern void Tcl_SetErrno(int err);
extern void Tcl_SetErrorCode(Tcl_Interp * interp, ...);
extern void Tcl_SetMaxBlockTime(const Tcl_Time * timePtr);
extern void Tcl_SetPanicProc(Tcl_PanicProc * panicProc);
extern int Tcl_SetRecursionLimit(Tcl_Interp * interp, int depth);
extern void Tcl_SetResult(Tcl_Interp * interp, char *result, Tcl_FreeProc * freeProc);
extern int Tcl_SetServiceMode(int mode);
extern void Tcl_SetObjErrorCode(Tcl_Interp * interp, Tcl_Obj * errorObjPtr);
extern void Tcl_SetObjResult(Tcl_Interp * interp, Tcl_Obj * resultObjPtr);
extern void Tcl_SetStdChannel(Tcl_Channel channel, int type);
extern const char *Tcl_SetVar(Tcl_Interp * interp, const char *varName, const char *newValue, int flags);
extern const char *Tcl_SetVar2(Tcl_Interp * interp, const char *part1, const char *part2, const char *newValue, int flags);
extern const char *Tcl_SignalId(int sig);
extern const char *Tcl_SignalMsg(int sig);
extern void Tcl_SourceRCFile(Tcl_Interp * interp);
extern int Tcl_SplitList(Tcl_Interp * interp, const char *listStr, int *argcPtr, const char ***argvPtr);
extern void Tcl_SplitPath(const char *path, int *argcPtr, const char ***argvPtr);
extern void Tcl_StaticPackage(Tcl_Interp * interp, const char *pkgName, Tcl_PackageInitProc * initProc, Tcl_PackageInitProc * safeInitProc);
extern int Tcl_StringMatch(const char *str, const char *pattern);
extern int Tcl_TellOld(Tcl_Channel chan);
extern int Tcl_TraceVar(Tcl_Interp * interp, const char *varName, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
extern int Tcl_TraceVar2(Tcl_Interp * interp, const char *part1, const char *part2, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
extern char *Tcl_TranslateFileName(Tcl_Interp * interp, const char *name, Tcl_DString * bufferPtr);
extern int Tcl_Ungets(Tcl_Channel chan, const char *str, int len, int atHead);
extern void Tcl_UnlinkVar(Tcl_Interp * interp, const char *varName);
extern int Tcl_UnregisterChannel(Tcl_Interp * interp, Tcl_Channel chan);
extern int Tcl_UnsetVar(Tcl_Interp * interp, const char *varName, int flags);
extern int Tcl_UnsetVar2(Tcl_Interp * interp, const char *part1, const char *part2, int flags);
extern void Tcl_UntraceVar(Tcl_Interp * interp, const char *varName, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
extern void Tcl_UntraceVar2(Tcl_Interp * interp, const char *part1, const char *part2, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
extern void Tcl_UpdateLinkedVar(Tcl_Interp * interp, const char *varName);
extern int Tcl_UpVar(Tcl_Interp * interp, const char *frameName, const char *varName, const char *localName, int flags);
extern int Tcl_UpVar2(Tcl_Interp * interp, const char *frameName, const char *part1, const char *part2, const char *localName, int flags);
extern int Tcl_VarEval(Tcl_Interp * interp, ...);
extern ClientData Tcl_VarTraceInfo(Tcl_Interp * interp, const char *varName, int flags, Tcl_VarTraceProc * procPtr, ClientData prevClientData);
extern ClientData Tcl_VarTraceInfo2(Tcl_Interp * interp, const char *part1, const char *part2, int flags, Tcl_VarTraceProc * procPtr, ClientData prevClientData);
extern int Tcl_Write(Tcl_Channel chan, const char *s, int slen);
extern void Tcl_WrongNumArgs(Tcl_Interp * interp, int objc, Tcl_Obj * const objv[], const char *message);
extern int Tcl_DumpActiveMemory(const char *fileName);
extern void Tcl_ValidateAllMemory(const char *file, int line);
extern void Tcl_AppendResultVA(Tcl_Interp * interp, va_list argList);
extern void Tcl_AppendStringsToObjVA(Tcl_Obj * objPtr, va_list argList);
extern char *Tcl_HashStats(Tcl_HashTable * tablePtr);
extern const char *Tcl_ParseVar(Tcl_Interp * interp, const char *start, const char **termPtr);
extern const char *Tcl_PkgPresent(Tcl_Interp * interp, const char *name, const char *version, int exact);
extern const char *Tcl_PkgPresentEx(Tcl_Interp * interp, const char *name, const char *version, int exact, void *clientDataPtr);
extern int Tcl_PkgProvide(Tcl_Interp * interp, const char *name, const char *version);
extern const char *Tcl_PkgRequire(Tcl_Interp * interp, const char *name, const char *version, int exact);
extern void Tcl_SetErrorCodeVA(Tcl_Interp * interp, va_list argList);
extern int Tcl_VarEvalVA(Tcl_Interp * interp, va_list argList);
extern Tcl_Pid Tcl_WaitPid(Tcl_Pid pid, int *statPtr, int options);
extern void Tcl_PanicVA(const char *format, va_list argList);
extern void Tcl_GetVersion(int *major, int *minor, int *patchLevel, int *type);
extern void Tcl_InitMemory(Tcl_Interp * interp);
extern Tcl_Channel Tcl_StackChannel(Tcl_Interp * interp, const Tcl_ChannelType * typePtr, ClientData instanceData, int mask, Tcl_Channel prevChan);
extern int Tcl_UnstackChannel(Tcl_Interp * interp, Tcl_Channel chan);
extern Tcl_Channel Tcl_GetStackedChannel(Tcl_Channel chan);
extern void Tcl_SetMainLoop(Tcl_MainLoopProc * proc);
extern void Tcl_AppendObjToObj(Tcl_Obj * objPtr, Tcl_Obj * appendObjPtr);
extern Tcl_Encoding Tcl_CreateEncoding(const Tcl_EncodingType * typePtr);
extern void Tcl_CreateThreadExitHandler(Tcl_ExitProc * proc, ClientData clientData);
extern void Tcl_DeleteThreadExitHandler(Tcl_ExitProc * proc, ClientData clientData);
extern void Tcl_DiscardResult(Tcl_SavedResult * statePtr);
extern int Tcl_EvalEx(Tcl_Interp * interp, const char *script, int numBytes, int flags);
extern int Tcl_EvalObjv(Tcl_Interp * interp, int objc, Tcl_Obj * const objv[], int flags);
extern int Tcl_EvalObjEx(Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
extern void Tcl_ExitThread(int status);
extern int Tcl_ExternalToUtf(Tcl_Interp * interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState * statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
extern char *Tcl_ExternalToUtfDString(Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString * dsPtr);
extern void Tcl_FinalizeThread(void);
extern void Tcl_FinalizeNotifier(ClientData clientData);
extern void Tcl_FreeEncoding(Tcl_Encoding encoding);
extern Tcl_ThreadId Tcl_GetCurrentThread(void);
extern Tcl_Encoding Tcl_GetEncoding(Tcl_Interp * interp, const char *name);
extern const char *Tcl_GetEncodingName(Tcl_Encoding encoding);
extern void Tcl_GetEncodingNames(Tcl_Interp * interp);
extern int Tcl_GetIndexFromObjStruct(Tcl_Interp * interp, Tcl_Obj * objPtr, const void *tablePtr, int offset, const char *msg, int flags, int *indexPtr);
extern void *Tcl_GetThreadData(Tcl_ThreadDataKey * keyPtr, int size);
extern Tcl_Obj *Tcl_GetVar2Ex(Tcl_Interp * interp, const char *part1, const char *part2, int flags);
extern ClientData Tcl_InitNotifier(void);
extern void Tcl_MutexLock(Tcl_Mutex * mutexPtr);
extern void Tcl_MutexUnlock(Tcl_Mutex * mutexPtr);
extern void Tcl_ConditionNotify(Tcl_Condition * condPtr);
extern void Tcl_ConditionWait(Tcl_Condition * condPtr, Tcl_Mutex * mutexPtr, const Tcl_Time * timePtr);
extern int Tcl_NumUtfChars(const char *src, int length);
extern int Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj * objPtr, int charsToRead, int appendFlag);
extern void Tcl_RestoreResult(Tcl_Interp * interp, Tcl_SavedResult * statePtr);
extern void Tcl_SaveResult(Tcl_Interp * interp, Tcl_SavedResult * statePtr);
extern int Tcl_SetSystemEncoding(Tcl_Interp * interp, const char *name);
extern Tcl_Obj *Tcl_SetVar2Ex(Tcl_Interp * interp, const char *part1, const char *part2, Tcl_Obj * newValuePtr, int flags);
extern void Tcl_ThreadAlert(Tcl_ThreadId threadId);
extern void Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event * evPtr, Tcl_QueuePosition position);
extern Tcl_UniChar Tcl_UniCharAtIndex(const char *src, int index);
extern Tcl_UniChar Tcl_UniCharToLower(int ch);
extern Tcl_UniChar Tcl_UniCharToTitle(int ch);
extern Tcl_UniChar Tcl_UniCharToUpper(int ch);
extern int Tcl_UniCharToUtf(int ch, char *buf);
extern const char *Tcl_UtfAtIndex(const char *src, int index);
extern int Tcl_UtfCharComplete(const char *src, int length);
extern int Tcl_UtfBackslash(const char *src, int *readPtr, char *dst);
extern const char *Tcl_UtfFindFirst(const char *src, int ch);
extern const char *Tcl_UtfFindLast(const char *src, int ch);
extern const char *Tcl_UtfNext(const char *src);
extern const char *Tcl_UtfPrev(const char *src, const char *start);
extern int Tcl_UtfToExternal(Tcl_Interp * interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState * statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
extern char *Tcl_UtfToExternalDString(Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString * dsPtr);
extern int Tcl_UtfToLower(char *src);
extern int Tcl_UtfToTitle(char *src);
extern int Tcl_UtfToUniChar(const char *src, Tcl_UniChar * chPtr);
extern int Tcl_UtfToUpper(char *src);
extern int Tcl_WriteChars(Tcl_Channel chan, const char *src, int srcLen);
extern int Tcl_WriteObj(Tcl_Channel chan, Tcl_Obj * objPtr);
extern char *Tcl_GetString(Tcl_Obj * objPtr);
extern const char *Tcl_GetDefaultEncodingDir(void);
extern void Tcl_SetDefaultEncodingDir(const char *path);
extern void Tcl_AlertNotifier(ClientData clientData);
extern void Tcl_ServiceModeHook(int mode);
extern int Tcl_UniCharIsAlnum(int ch);
extern int Tcl_UniCharIsAlpha(int ch);
extern int Tcl_UniCharIsDigit(int ch);
extern int Tcl_UniCharIsLower(int ch);
extern int Tcl_UniCharIsSpace(int ch);
extern int Tcl_UniCharIsUpper(int ch);
extern int Tcl_UniCharIsWordChar(int ch);
extern int Tcl_UniCharLen(const Tcl_UniChar * uniStr);
extern int Tcl_UniCharNcmp(const Tcl_UniChar * ucs, const Tcl_UniChar * uct, unsigned long numChars);
extern char *Tcl_UniCharToUtfDString(const Tcl_UniChar * uniStr, int uniLength, Tcl_DString * dsPtr);
extern Tcl_UniChar *Tcl_UtfToUniCharDString(const char *src, int length, Tcl_DString * dsPtr);
extern Tcl_RegExp Tcl_GetRegExpFromObj(Tcl_Interp * interp, Tcl_Obj * patObj, int flags);
extern Tcl_Obj *Tcl_EvalTokens(Tcl_Interp * interp, Tcl_Token * tokenPtr, int count);
extern void Tcl_FreeParse(Tcl_Parse * parsePtr);
extern void Tcl_LogCommandInfo(Tcl_Interp * interp, const char *script, const char *command, int length);
extern int Tcl_ParseBraces(Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr, int append, const char **termPtr);
extern int Tcl_ParseCommand(Tcl_Interp * interp, const char *start, int numBytes, int nested, Tcl_Parse * parsePtr);
extern int Tcl_ParseExpr(Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr);
extern int Tcl_ParseQuotedString(Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr, int append, const char **termPtr);
extern int Tcl_ParseVarName(Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr, int append);
extern char *Tcl_GetCwd(Tcl_Interp * interp, Tcl_DString * cwdPtr);
extern int Tcl_Chdir(const char *dirName);
extern int Tcl_Access(const char *path, int mode);
extern int Tcl_Stat(const char *path, struct stat *bufPtr);
extern int Tcl_UtfNcmp(const char *s1, const char *s2, unsigned long n);
extern int Tcl_UtfNcasecmp(const char *s1, const char *s2, unsigned long n);
extern int Tcl_StringCaseMatch(const char *str, const char *pattern, int nocase);
extern int Tcl_UniCharIsControl(int ch);
extern int Tcl_UniCharIsGraph(int ch);
extern int Tcl_UniCharIsPrint(int ch);
extern int Tcl_UniCharIsPunct(int ch);
extern int Tcl_RegExpExecObj(Tcl_Interp * interp, Tcl_RegExp regexp, Tcl_Obj * textObj, int offset, int nmatches, int flags);
extern void Tcl_RegExpGetInfo(Tcl_RegExp regexp, Tcl_RegExpInfo * infoPtr);
extern Tcl_Obj *Tcl_NewUnicodeObj(const Tcl_UniChar * unicode, int numChars);
extern void Tcl_SetUnicodeObj(Tcl_Obj * objPtr, const Tcl_UniChar * unicode, int numChars);
extern int Tcl_GetCharLength(Tcl_Obj * objPtr);
extern Tcl_UniChar Tcl_GetUniChar(Tcl_Obj * objPtr, int index);
extern Tcl_UniChar *Tcl_GetUnicode(Tcl_Obj * objPtr);
extern Tcl_Obj *Tcl_GetRange(Tcl_Obj * objPtr, int first, int last);
extern void Tcl_AppendUnicodeToObj(Tcl_Obj * objPtr, const Tcl_UniChar * unicode, int length);
extern int Tcl_RegExpMatchObj(Tcl_Interp * interp, Tcl_Obj * textObj, Tcl_Obj * patternObj);
extern void Tcl_SetNotifier(Tcl_NotifierProcs * notifierProcPtr);
extern Tcl_Mutex *Tcl_GetAllocMutex(void);
extern int Tcl_GetChannelNames(Tcl_Interp * interp);
extern int Tcl_GetChannelNamesEx(Tcl_Interp * interp, const char *pattern);
extern int Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj * const objv[]);
extern void Tcl_ConditionFinalize(Tcl_Condition * condPtr);
extern void Tcl_MutexFinalize(Tcl_Mutex * mutex);
extern int Tcl_CreateThread(Tcl_ThreadId * idPtr, Tcl_ThreadCreateProc * proc, ClientData clientData, int stackSize, int flags);
extern int Tcl_ReadRaw(Tcl_Channel chan, char *dst, int bytesToRead);
extern int Tcl_WriteRaw(Tcl_Channel chan, const char *src, int srcLen);
extern Tcl_Channel Tcl_GetTopChannel(Tcl_Channel chan);
extern int Tcl_ChannelBuffered(Tcl_Channel chan);
extern const char *Tcl_ChannelName(const Tcl_ChannelType * chanTypePtr);
extern Tcl_ChannelTypeVersion Tcl_ChannelVersion(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverBlockModeProc *Tcl_ChannelBlockModeProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverCloseProc *Tcl_ChannelCloseProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverClose2Proc *Tcl_ChannelClose2Proc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverInputProc *Tcl_ChannelInputProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverOutputProc *Tcl_ChannelOutputProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverSeekProc *Tcl_ChannelSeekProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverSetOptionProc *Tcl_ChannelSetOptionProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverGetOptionProc *Tcl_ChannelGetOptionProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverWatchProc *Tcl_ChannelWatchProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverGetHandleProc *Tcl_ChannelGetHandleProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverFlushProc *Tcl_ChannelFlushProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_DriverHandlerProc *Tcl_ChannelHandlerProc(const Tcl_ChannelType * chanTypePtr);
extern int Tcl_JoinThread(Tcl_ThreadId threadId, int *result);
extern int Tcl_IsChannelShared(Tcl_Channel channel);
extern int Tcl_IsChannelRegistered(Tcl_Interp * interp, Tcl_Channel channel);
extern void Tcl_CutChannel(Tcl_Channel channel);
extern void Tcl_SpliceChannel(Tcl_Channel channel);
extern void Tcl_ClearChannelHandlers(Tcl_Channel channel);
extern int Tcl_IsChannelExisting(const char *channelName);
extern int Tcl_UniCharNcasecmp(const Tcl_UniChar * ucs, const Tcl_UniChar * uct, unsigned long numChars);
extern int Tcl_UniCharCaseMatch(const Tcl_UniChar * uniStr, const Tcl_UniChar * uniPattern, int nocase);
extern Tcl_HashEntry *Tcl_FindHashEntry(Tcl_HashTable * tablePtr, const void *key);
extern Tcl_HashEntry *Tcl_CreateHashEntry(Tcl_HashTable * tablePtr, const void *key, int *newPtr);
extern void Tcl_InitCustomHashTable(Tcl_HashTable * tablePtr, int keyType, const Tcl_HashKeyType * typePtr);
extern void Tcl_InitObjHashTable(Tcl_HashTable * tablePtr);
extern ClientData Tcl_CommandTraceInfo(Tcl_Interp * interp, const char *varName, int flags, Tcl_CommandTraceProc * procPtr, ClientData prevClientData);
extern int Tcl_TraceCommand(Tcl_Interp * interp, const char *varName, int flags, Tcl_CommandTraceProc * proc, ClientData clientData);
extern void Tcl_UntraceCommand(Tcl_Interp * interp, const char *varName, int flags, Tcl_CommandTraceProc * proc, ClientData clientData);
extern char *Tcl_AttemptAlloc(unsigned int size);
extern char *Tcl_AttemptDbCkalloc(unsigned int size, const char *file, int line);
extern char *Tcl_AttemptRealloc(char *ptr, unsigned int size);
extern char *Tcl_AttemptDbCkrealloc(char *ptr, unsigned int size, const char *file, int line);
extern int Tcl_AttemptSetObjLength(Tcl_Obj * objPtr, int length);
extern Tcl_ThreadId Tcl_GetChannelThread(Tcl_Channel channel);
extern Tcl_UniChar *Tcl_GetUnicodeFromObj(Tcl_Obj * objPtr, int *lengthPtr);
extern int Tcl_GetMathFuncInfo(Tcl_Interp * interp, const char *name, int *numArgsPtr, Tcl_ValueType ** argTypesPtr, Tcl_MathProc ** procPtr, ClientData * clientDataPtr);
extern Tcl_Obj *Tcl_ListMathFuncs(Tcl_Interp * interp, const char *pattern);
extern Tcl_Obj *Tcl_SubstObj(Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
extern int Tcl_DetachChannel(Tcl_Interp * interp, Tcl_Channel channel);
extern int Tcl_IsStandardChannel(Tcl_Channel channel);
extern int Tcl_FSCopyFile(Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr);
extern int Tcl_FSCopyDirectory(Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr, Tcl_Obj ** errorPtr);
extern int Tcl_FSCreateDirectory(Tcl_Obj * pathPtr);
extern int Tcl_FSDeleteFile(Tcl_Obj * pathPtr);
extern int Tcl_FSLoadFile(Tcl_Interp * interp, Tcl_Obj * pathPtr, const char *sym1, const char *sym2, Tcl_PackageInitProc ** proc1Ptr, Tcl_PackageInitProc ** proc2Ptr, Tcl_LoadHandle * handlePtr, Tcl_FSUnloadFileProc ** unloadProcPtr);
extern int Tcl_FSMatchInDirectory(Tcl_Interp * interp, Tcl_Obj * result, Tcl_Obj * pathPtr, const char *pattern, Tcl_GlobTypeData * types);
extern Tcl_Obj *Tcl_FSLink(Tcl_Obj * pathPtr, Tcl_Obj * toPtr, int linkAction);
extern int Tcl_FSRemoveDirectory(Tcl_Obj * pathPtr, int recursive, Tcl_Obj ** errorPtr);
extern int Tcl_FSRenameFile(Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr);
extern int Tcl_FSLstat(Tcl_Obj * pathPtr, Tcl_StatBuf * buf);
extern int Tcl_FSUtime(Tcl_Obj * pathPtr, struct utimbuf *tval);
extern int Tcl_FSFileAttrsGet(Tcl_Interp * interp, int index, Tcl_Obj * pathPtr, Tcl_Obj ** objPtrRef);
extern int Tcl_FSFileAttrsSet(Tcl_Interp * interp, int index, Tcl_Obj * pathPtr, Tcl_Obj * objPtr);
extern const char *const *Tcl_FSFileAttrStrings(Tcl_Obj * pathPtr, Tcl_Obj ** objPtrRef);
extern int Tcl_FSStat(Tcl_Obj * pathPtr, Tcl_StatBuf * buf);
extern int Tcl_FSAccess(Tcl_Obj * pathPtr, int mode);
extern Tcl_Channel Tcl_FSOpenFileChannel(Tcl_Interp * interp, Tcl_Obj * pathPtr, const char *modeString, int permissions);
extern Tcl_Obj *Tcl_FSGetCwd(Tcl_Interp * interp);
extern int Tcl_FSChdir(Tcl_Obj * pathPtr);
extern int Tcl_FSConvertToPathType(Tcl_Interp * interp, Tcl_Obj * pathPtr);
extern Tcl_Obj *Tcl_FSJoinPath(Tcl_Obj * listObj, int elements);
extern Tcl_Obj *Tcl_FSSplitPath(Tcl_Obj * pathPtr, int *lenPtr);
extern int Tcl_FSEqualPaths(Tcl_Obj * firstPtr, Tcl_Obj * secondPtr);
extern Tcl_Obj *Tcl_FSGetNormalizedPath(Tcl_Interp * interp, Tcl_Obj * pathPtr);
extern Tcl_Obj *Tcl_FSJoinToPath(Tcl_Obj * pathPtr, int objc, Tcl_Obj * const objv[]);
extern ClientData Tcl_FSGetInternalRep(Tcl_Obj * pathPtr, const Tcl_Filesystem * fsPtr);
extern Tcl_Obj *Tcl_FSGetTranslatedPath(Tcl_Interp * interp, Tcl_Obj * pathPtr);
extern int Tcl_FSEvalFile(Tcl_Interp * interp, Tcl_Obj * fileName);
extern Tcl_Obj *Tcl_FSNewNativePath(const Tcl_Filesystem * fromFilesystem, ClientData clientData);
extern const void *Tcl_FSGetNativePath(Tcl_Obj * pathPtr);
extern Tcl_Obj *Tcl_FSFileSystemInfo(Tcl_Obj * pathPtr);
extern Tcl_Obj *Tcl_FSPathSeparator(Tcl_Obj * pathPtr);
extern Tcl_Obj *Tcl_FSListVolumes(void);
extern int Tcl_FSRegister(ClientData clientData, const Tcl_Filesystem * fsPtr);
extern int Tcl_FSUnregister(const Tcl_Filesystem * fsPtr);
extern ClientData Tcl_FSData(const Tcl_Filesystem * fsPtr);
extern const char *Tcl_FSGetTranslatedStringPath(Tcl_Interp * interp, Tcl_Obj * pathPtr);
extern const Tcl_Filesystem *Tcl_FSGetFileSystemForPath(Tcl_Obj * pathPtr);
extern Tcl_PathType Tcl_FSGetPathType(Tcl_Obj * pathPtr);
extern int Tcl_OutputBuffered(Tcl_Channel chan);
extern void Tcl_FSMountsChanged(const Tcl_Filesystem * fsPtr);
extern int Tcl_EvalTokensStandard(Tcl_Interp * interp, Tcl_Token * tokenPtr, int count);
extern void Tcl_GetTime(Tcl_Time * timeBuf);
extern Tcl_Trace Tcl_CreateObjTrace(Tcl_Interp * interp, int level, int flags, Tcl_CmdObjTraceProc * objProc, ClientData clientData, Tcl_CmdObjTraceDeleteProc * delProc);
extern int Tcl_GetCommandInfoFromToken(Tcl_Command token, Tcl_CmdInfo * infoPtr);
extern int Tcl_SetCommandInfoFromToken(Tcl_Command token, const Tcl_CmdInfo * infoPtr);
extern Tcl_Obj *Tcl_DbNewWideIntObj(Tcl_WideInt wideValue, const char *file, int line);
extern int Tcl_GetWideIntFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_WideInt * widePtr);
extern Tcl_Obj *Tcl_NewWideIntObj(Tcl_WideInt wideValue);
extern void Tcl_SetWideIntObj(Tcl_Obj * objPtr, Tcl_WideInt wideValue);
extern Tcl_StatBuf *Tcl_AllocStatBuf(void);
extern Tcl_WideInt Tcl_Seek(Tcl_Channel chan, Tcl_WideInt offset, int mode);
extern Tcl_WideInt Tcl_Tell(Tcl_Channel chan);
extern Tcl_DriverWideSeekProc *Tcl_ChannelWideSeekProc(const Tcl_ChannelType * chanTypePtr);
extern int Tcl_DictObjPut(Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_Obj * keyPtr, Tcl_Obj * valuePtr);
extern int Tcl_DictObjGet(Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_Obj * keyPtr, Tcl_Obj ** valuePtrPtr);
extern int Tcl_DictObjRemove(Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_Obj * keyPtr);
extern int Tcl_DictObjSize(Tcl_Interp * interp, Tcl_Obj * dictPtr, int *sizePtr);
extern int Tcl_DictObjFirst(Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_DictSearch * searchPtr, Tcl_Obj ** keyPtrPtr, Tcl_Obj ** valuePtrPtr, int *donePtr);
extern void Tcl_DictObjNext(Tcl_DictSearch * searchPtr, Tcl_Obj ** keyPtrPtr, Tcl_Obj ** valuePtrPtr, int *donePtr);
extern void Tcl_DictObjDone(Tcl_DictSearch * searchPtr);
extern int Tcl_DictObjPutKeyList(Tcl_Interp * interp, Tcl_Obj * dictPtr, int keyc, Tcl_Obj * const *keyv, Tcl_Obj * valuePtr);
extern int Tcl_DictObjRemoveKeyList(Tcl_Interp * interp, Tcl_Obj * dictPtr, int keyc, Tcl_Obj * const *keyv);
extern Tcl_Obj *Tcl_NewDictObj(void);
extern Tcl_Obj *Tcl_DbNewDictObj(const char *file, int line);
extern void Tcl_RegisterConfig(Tcl_Interp * interp, const char *pkgName, const Tcl_Config * configuration, const char *valEncoding);
extern Tcl_Namespace *Tcl_CreateNamespace(Tcl_Interp * interp, const char *name, ClientData clientData, Tcl_NamespaceDeleteProc * deleteProc);
extern void Tcl_DeleteNamespace(Tcl_Namespace * nsPtr);
extern int Tcl_AppendExportList(Tcl_Interp * interp, Tcl_Namespace * nsPtr, Tcl_Obj * objPtr);
extern int Tcl_Export(Tcl_Interp * interp, Tcl_Namespace * nsPtr, const char *pattern, int resetListFirst);
extern int Tcl_Import(Tcl_Interp * interp, Tcl_Namespace * nsPtr, const char *pattern, int allowOverwrite);
extern int Tcl_ForgetImport(Tcl_Interp * interp, Tcl_Namespace * nsPtr, const char *pattern);
extern Tcl_Namespace *Tcl_GetCurrentNamespace(Tcl_Interp * interp);
extern Tcl_Namespace *Tcl_GetGlobalNamespace(Tcl_Interp * interp);
extern Tcl_Namespace *Tcl_FindNamespace(Tcl_Interp * interp, const char *name, Tcl_Namespace * contextNsPtr, int flags);
extern Tcl_Command Tcl_FindCommand(Tcl_Interp * interp, const char *name, Tcl_Namespace * contextNsPtr, int flags);
extern Tcl_Command Tcl_GetCommandFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr);
extern void Tcl_GetCommandFullName(Tcl_Interp * interp, Tcl_Command command, Tcl_Obj * objPtr);
extern int Tcl_FSEvalFileEx(Tcl_Interp * interp, Tcl_Obj * fileName, const char *encodingName);
extern Tcl_ExitProc *Tcl_SetExitProc(Tcl_ExitProc * proc);
extern void Tcl_LimitAddHandler(Tcl_Interp * interp, int type, Tcl_LimitHandlerProc * handlerProc, ClientData clientData, Tcl_LimitHandlerDeleteProc * deleteProc);
extern void Tcl_LimitRemoveHandler(Tcl_Interp * interp, int type, Tcl_LimitHandlerProc * handlerProc, ClientData clientData);
extern int Tcl_LimitReady(Tcl_Interp * interp);
extern int Tcl_LimitCheck(Tcl_Interp * interp);
extern int Tcl_LimitExceeded(Tcl_Interp * interp);
extern void Tcl_LimitSetCommands(Tcl_Interp * interp, int commandLimit);
extern void Tcl_LimitSetTime(Tcl_Interp * interp, Tcl_Time * timeLimitPtr);
extern void Tcl_LimitSetGranularity(Tcl_Interp * interp, int type, int granularity);
extern int Tcl_LimitTypeEnabled(Tcl_Interp * interp, int type);
extern int Tcl_LimitTypeExceeded(Tcl_Interp * interp, int type);
extern void Tcl_LimitTypeSet(Tcl_Interp * interp, int type);
extern void Tcl_LimitTypeReset(Tcl_Interp * interp, int type);
extern int Tcl_LimitGetCommands(Tcl_Interp * interp);
extern void Tcl_LimitGetTime(Tcl_Interp * interp, Tcl_Time * timeLimitPtr);
extern int Tcl_LimitGetGranularity(Tcl_Interp * interp, int type);
extern Tcl_InterpState Tcl_SaveInterpState(Tcl_Interp * interp, int status);
extern int Tcl_RestoreInterpState(Tcl_Interp * interp, Tcl_InterpState state);
extern void Tcl_DiscardInterpState(Tcl_InterpState state);
extern int Tcl_SetReturnOptions(Tcl_Interp * interp, Tcl_Obj * options);
extern Tcl_Obj *Tcl_GetReturnOptions(Tcl_Interp * interp, int result);
extern int Tcl_IsEnsemble(Tcl_Command token);
extern Tcl_Command Tcl_CreateEnsemble(Tcl_Interp * interp, const char *name, Tcl_Namespace * namespacePtr, int flags);
extern Tcl_Command Tcl_FindEnsemble(Tcl_Interp * interp, Tcl_Obj * cmdNameObj, int flags);
extern int Tcl_SetEnsembleSubcommandList(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * subcmdList);
extern int Tcl_SetEnsembleMappingDict(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * mapDict);
extern int Tcl_SetEnsembleUnknownHandler(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * unknownList);
extern int Tcl_SetEnsembleFlags(Tcl_Interp * interp, Tcl_Command token, int flags);
extern int Tcl_GetEnsembleSubcommandList(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** subcmdListPtr);
extern int Tcl_GetEnsembleMappingDict(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** mapDictPtr);
extern int Tcl_GetEnsembleUnknownHandler(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** unknownListPtr);
extern int Tcl_GetEnsembleFlags(Tcl_Interp * interp, Tcl_Command token, int *flagsPtr);
extern int Tcl_GetEnsembleNamespace(Tcl_Interp * interp, Tcl_Command token, Tcl_Namespace ** namespacePtrPtr);
extern void Tcl_SetTimeProc(Tcl_GetTimeProc * getProc, Tcl_ScaleTimeProc * scaleProc, ClientData clientData);
extern void Tcl_QueryTimeProc(Tcl_GetTimeProc ** getProc, Tcl_ScaleTimeProc ** scaleProc, ClientData * clientData);
extern Tcl_DriverThreadActionProc *Tcl_ChannelThreadActionProc(const Tcl_ChannelType * chanTypePtr);
extern Tcl_Obj *Tcl_NewBignumObj(mp_int * value);
extern Tcl_Obj *Tcl_DbNewBignumObj(mp_int * value, const char *file, int line);
extern void Tcl_SetBignumObj(Tcl_Obj * obj, mp_int * value);
extern int Tcl_GetBignumFromObj(Tcl_Interp * interp, Tcl_Obj * obj, mp_int * value);
extern int Tcl_TakeBignumFromObj(Tcl_Interp * interp, Tcl_Obj * obj, mp_int * value);
extern int Tcl_TruncateChannel(Tcl_Channel chan, Tcl_WideInt length);
extern Tcl_DriverTruncateProc *Tcl_ChannelTruncateProc(const Tcl_ChannelType * chanTypePtr);
extern void Tcl_SetChannelErrorInterp(Tcl_Interp * interp, Tcl_Obj * msg);
extern void Tcl_GetChannelErrorInterp(Tcl_Interp * interp, Tcl_Obj ** msg);
extern void Tcl_SetChannelError(Tcl_Channel chan, Tcl_Obj * msg);
extern void Tcl_GetChannelError(Tcl_Channel chan, Tcl_Obj ** msg);
extern int Tcl_InitBignumFromDouble(Tcl_Interp * interp, double initval, mp_int * toInit);
extern Tcl_Obj *Tcl_GetNamespaceUnknownHandler(Tcl_Interp * interp, Tcl_Namespace * nsPtr);
extern int Tcl_SetNamespaceUnknownHandler(Tcl_Interp * interp, Tcl_Namespace * nsPtr, Tcl_Obj * handlerPtr);
extern int Tcl_GetEncodingFromObj(Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_Encoding * encodingPtr);
extern Tcl_Obj *Tcl_GetEncodingSearchPath(void);
extern int Tcl_SetEncodingSearchPath(Tcl_Obj * searchPath);
extern const char *Tcl_GetEncodingNameFromEnvironment(Tcl_DString * bufPtr);
extern int Tcl_PkgRequireProc(Tcl_Interp * interp, const char *name, int objc, Tcl_Obj * const objv[], void *clientDataPtr);
extern void Tcl_AppendObjToErrorInfo(Tcl_Interp * interp, Tcl_Obj * objPtr);
extern void Tcl_AppendLimitedToObj(Tcl_Obj * objPtr, const char *bytes, int length, int limit, const char *ellipsis);
extern Tcl_Obj *Tcl_Format(Tcl_Interp * interp, const char *format, int objc, Tcl_Obj * const objv[]);
extern int Tcl_AppendFormatToObj(Tcl_Interp * interp, Tcl_Obj * objPtr, const char *format, int objc, Tcl_Obj * const objv[]);
extern Tcl_Obj *Tcl_ObjPrintf(const char *format, ...);
extern void Tcl_AppendPrintfToObj(Tcl_Obj * objPtr, const char *format, ...);
extern int Tcl_CancelEval(Tcl_Interp * interp, Tcl_Obj * resultObjPtr, ClientData clientData, int flags);
extern int Tcl_Canceled(Tcl_Interp * interp, int flags);
extern int Tcl_CreatePipe(Tcl_Interp * interp, Tcl_Channel * rchan, Tcl_Channel * wchan, int flags);
extern Tcl_Command Tcl_NRCreateCommand(Tcl_Interp * interp, const char *cmdName, Tcl_ObjCmdProc * proc, Tcl_ObjCmdProc * nreProc, ClientData clientData, Tcl_CmdDeleteProc * deleteProc);
extern int Tcl_NREvalObj(Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
extern int Tcl_NREvalObjv(Tcl_Interp * interp, int objc, Tcl_Obj * const objv[], int flags);
extern int Tcl_NRCmdSwap(Tcl_Interp * interp, Tcl_Command cmd, int objc, Tcl_Obj * const objv[], int flags);
extern void Tcl_NRAddCallback(Tcl_Interp * interp, Tcl_NRPostProc * postProcPtr, ClientData data0, ClientData data1, ClientData data2, ClientData data3);
extern int Tcl_NRCallObjProc(Tcl_Interp * interp, Tcl_ObjCmdProc * objProc, ClientData clientData, int objc, Tcl_Obj * const objv[]);
extern unsigned Tcl_GetFSDeviceFromStat(const Tcl_StatBuf * statPtr);
extern unsigned Tcl_GetFSInodeFromStat(const Tcl_StatBuf * statPtr);
extern unsigned Tcl_GetModeFromStat(const Tcl_StatBuf * statPtr);
extern int Tcl_GetLinkCountFromStat(const Tcl_StatBuf * statPtr);
extern int Tcl_GetUserIdFromStat(const Tcl_StatBuf * statPtr);
extern int Tcl_GetGroupIdFromStat(const Tcl_StatBuf * statPtr);
extern int Tcl_GetDeviceTypeFromStat(const Tcl_StatBuf * statPtr);
extern Tcl_WideInt Tcl_GetAccessTimeFromStat(const Tcl_StatBuf * statPtr);
extern Tcl_WideInt Tcl_GetModificationTimeFromStat(const Tcl_StatBuf * statPtr);
extern Tcl_WideInt Tcl_GetChangeTimeFromStat(const Tcl_StatBuf * statPtr);
extern Tcl_WideUInt Tcl_GetSizeFromStat(const Tcl_StatBuf * statPtr);
extern Tcl_WideUInt Tcl_GetBlocksFromStat(const Tcl_StatBuf * statPtr);
extern unsigned Tcl_GetBlockSizeFromStat(const Tcl_StatBuf * statPtr);
extern int Tcl_SetEnsembleParameterList(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * paramList);
extern int Tcl_GetEnsembleParameterList(Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** paramListPtr);
extern int Tcl_ParseArgsObjv(Tcl_Interp * interp, const Tcl_ArgvInfo * argTable, int *objcPtr, Tcl_Obj * const *objv, Tcl_Obj *** remObjv);
extern int Tcl_GetErrorLine(Tcl_Interp * interp);
extern void Tcl_SetErrorLine(Tcl_Interp * interp, int lineNum);
extern void Tcl_TransferResult(Tcl_Interp * sourceInterp, int result, Tcl_Interp * targetInterp);
extern int Tcl_InterpActive(Tcl_Interp * interp);
extern void Tcl_BackgroundException(Tcl_Interp * interp, int code);
extern int Tcl_ZlibDeflate(Tcl_Interp * interp, int format, Tcl_Obj * data, int level, Tcl_Obj * gzipHeaderDictObj);
extern int Tcl_ZlibInflate(Tcl_Interp * interp, int format, Tcl_Obj * data, int buffersize, Tcl_Obj * gzipHeaderDictObj);
extern unsigned int Tcl_ZlibCRC32(unsigned int crc, const unsigned char *buf, int len);
extern unsigned int Tcl_ZlibAdler32(unsigned int adler, const unsigned char *buf, int len);
extern int Tcl_ZlibStreamInit(Tcl_Interp * interp, int mode, int format, int level, Tcl_Obj * dictObj, Tcl_ZlibStream * zshandle);
extern Tcl_Obj *Tcl_ZlibStreamGetCommandName(Tcl_ZlibStream zshandle);
extern int Tcl_ZlibStreamEof(Tcl_ZlibStream zshandle);
extern int Tcl_ZlibStreamChecksum(Tcl_ZlibStream zshandle);
extern int Tcl_ZlibStreamPut(Tcl_ZlibStream zshandle, Tcl_Obj * data, int flush);
extern int Tcl_ZlibStreamGet(Tcl_ZlibStream zshandle, Tcl_Obj * data, int count);
extern int Tcl_ZlibStreamClose(Tcl_ZlibStream zshandle);
extern int Tcl_ZlibStreamReset(Tcl_ZlibStream zshandle);
extern void Tcl_SetStartupScript(Tcl_Obj * path, const char *encoding);
extern Tcl_Obj *Tcl_GetStartupScript(const char **encodingPtr);
extern int Tcl_CloseEx(Tcl_Interp * interp, Tcl_Channel chan, int flags);
extern int Tcl_NRExprObj(Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_Obj * resultPtr);
extern int Tcl_NRSubstObj(Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
extern int Tcl_LoadFile(Tcl_Interp * interp, Tcl_Obj * pathPtr, const char *const symv[], int flags, void *procPtrs, Tcl_LoadHandle * handlePtr);
extern void *Tcl_FindSymbol(Tcl_Interp * interp, Tcl_LoadHandle handle, const char *symbol);
extern int Tcl_FSUnloadFile(Tcl_Interp * interp, Tcl_LoadHandle handlePtr);
extern void Tcl_ZlibStreamSetCompressionDictionary(Tcl_ZlibStream zhandle, Tcl_Obj * compressionDictionaryObj);
typedef struct {
	const struct TclPlatStubs *tclPlatStubs;
	const struct TclIntStubs *tclIntStubs;
	const struct TclIntPlatStubs *tclIntPlatStubs;
} TclStubHooks;
typedef struct TclStubs {
	int magic;
	const TclStubHooks *hooks;
	int (*tcl_PkgProvideEx) (Tcl_Interp * interp, const char *name, const char *version, const void *clientData);
	const char *(*tcl_PkgRequireEx) (Tcl_Interp * interp, const char *name, const char *version, int exact, void *clientDataPtr);
	void (*tcl_Panic) (const char *format, ...);
	char *(*tcl_Alloc) (unsigned int size);
	void (*tcl_Free) (char *ptr);
	char *(*tcl_Realloc) (char *ptr, unsigned int size);
	char *(*tcl_DbCkalloc) (unsigned int size, const char *file, int line);
	void (*tcl_DbCkfree) (char *ptr, const char *file, int line);
	char *(*tcl_DbCkrealloc) (char *ptr, unsigned int size, const char *file, int line);
	void (*tcl_CreateFileHandler) (int fd, int mask, Tcl_FileProc * proc, ClientData clientData);
	void (*tcl_DeleteFileHandler) (int fd);
	void (*tcl_SetTimer) (const Tcl_Time * timePtr);
	void (*tcl_Sleep) (int ms);
	int (*tcl_WaitForEvent) (const Tcl_Time * timePtr);
	int (*tcl_AppendAllObjTypes) (Tcl_Interp * interp, Tcl_Obj * objPtr);
	void (*tcl_AppendStringsToObj) (Tcl_Obj * objPtr, ...);
	void (*tcl_AppendToObj) (Tcl_Obj * objPtr, const char *bytes, int length);
	Tcl_Obj *(*tcl_ConcatObj) (int objc, Tcl_Obj * const objv[]);
	int (*tcl_ConvertToType) (Tcl_Interp * interp, Tcl_Obj * objPtr, const Tcl_ObjType * typePtr);
	void (*tcl_DbDecrRefCount) (Tcl_Obj * objPtr, const char *file, int line);
	void (*tcl_DbIncrRefCount) (Tcl_Obj * objPtr, const char *file, int line);
	int (*tcl_DbIsShared) (Tcl_Obj * objPtr, const char *file, int line);
	Tcl_Obj *(*tcl_DbNewBooleanObj) (int boolValue, const char *file, int line);
	Tcl_Obj *(*tcl_DbNewByteArrayObj) (const unsigned char *bytes, int length, const char *file, int line);
	Tcl_Obj *(*tcl_DbNewDoubleObj) (double doubleValue, const char *file, int line);
	Tcl_Obj *(*tcl_DbNewListObj) (int objc, Tcl_Obj * const *objv, const char *file, int line);
	Tcl_Obj *(*tcl_DbNewLongObj) (long longValue, const char *file, int line);
	Tcl_Obj *(*tcl_DbNewObj) (const char *file, int line);
	Tcl_Obj *(*tcl_DbNewStringObj) (const char *bytes, int length, const char *file, int line);
	Tcl_Obj *(*tcl_DuplicateObj) (Tcl_Obj * objPtr);
	void (*tclFreeObj) (Tcl_Obj * objPtr);
	int (*tcl_GetBoolean) (Tcl_Interp * interp, const char *src, int *boolPtr);
	int (*tcl_GetBooleanFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, int *boolPtr);
	unsigned char *(*tcl_GetByteArrayFromObj) (Tcl_Obj * objPtr, int *lengthPtr);
	int (*tcl_GetDouble) (Tcl_Interp * interp, const char *src, double *doublePtr);
	int (*tcl_GetDoubleFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, double *doublePtr);
	int (*tcl_GetIndexFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, const char *const *tablePtr, const char *msg, int flags, int *indexPtr);
	int (*tcl_GetInt) (Tcl_Interp * interp, const char *src, int *intPtr);
	int (*tcl_GetIntFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, int *intPtr);
	int (*tcl_GetLongFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, long *longPtr);
	const Tcl_ObjType *(*tcl_GetObjType) (const char *typeName);
	char *(*tcl_GetStringFromObj) (Tcl_Obj * objPtr, int *lengthPtr);
	void (*tcl_InvalidateStringRep) (Tcl_Obj * objPtr);
	int (*tcl_ListObjAppendList) (Tcl_Interp * interp, Tcl_Obj * listPtr, Tcl_Obj * elemListPtr);
	int (*tcl_ListObjAppendElement) (Tcl_Interp * interp, Tcl_Obj * listPtr, Tcl_Obj * objPtr);
	int (*tcl_ListObjGetElements) (Tcl_Interp * interp, Tcl_Obj * listPtr, int *objcPtr, Tcl_Obj *** objvPtr);
	int (*tcl_ListObjIndex) (Tcl_Interp * interp, Tcl_Obj * listPtr, int index, Tcl_Obj ** objPtrPtr);
	int (*tcl_ListObjLength) (Tcl_Interp * interp, Tcl_Obj * listPtr, int *lengthPtr);
	int (*tcl_ListObjReplace) (Tcl_Interp * interp, Tcl_Obj * listPtr, int first, int count, int objc, Tcl_Obj * const objv[]);
	Tcl_Obj *(*tcl_NewBooleanObj) (int boolValue);
	Tcl_Obj *(*tcl_NewByteArrayObj) (const unsigned char *bytes, int length);
	Tcl_Obj *(*tcl_NewDoubleObj) (double doubleValue);
	Tcl_Obj *(*tcl_NewIntObj) (int intValue);
	Tcl_Obj *(*tcl_NewListObj) (int objc, Tcl_Obj * const objv[]);
	Tcl_Obj *(*tcl_NewLongObj) (long longValue);
	Tcl_Obj *(*tcl_NewObj) (void);
	Tcl_Obj *(*tcl_NewStringObj) (const char *bytes, int length);
	void (*tcl_SetBooleanObj) (Tcl_Obj * objPtr, int boolValue);
	unsigned char *(*tcl_SetByteArrayLength) (Tcl_Obj * objPtr, int length);
	void (*tcl_SetByteArrayObj) (Tcl_Obj * objPtr, const unsigned char *bytes, int length);
	void (*tcl_SetDoubleObj) (Tcl_Obj * objPtr, double doubleValue);
	void (*tcl_SetIntObj) (Tcl_Obj * objPtr, int intValue);
	void (*tcl_SetListObj) (Tcl_Obj * objPtr, int objc, Tcl_Obj * const objv[]);
	void (*tcl_SetLongObj) (Tcl_Obj * objPtr, long longValue);
	void (*tcl_SetObjLength) (Tcl_Obj * objPtr, int length);
	void (*tcl_SetStringObj) (Tcl_Obj * objPtr, const char *bytes, int length);
	void (*tcl_AddErrorInfo) (Tcl_Interp * interp, const char *message);
	void (*tcl_AddObjErrorInfo) (Tcl_Interp * interp, const char *message, int length);
	void (*tcl_AllowExceptions) (Tcl_Interp * interp);
	void (*tcl_AppendElement) (Tcl_Interp * interp, const char *element);
	void (*tcl_AppendResult) (Tcl_Interp * interp, ...);
	 Tcl_AsyncHandler(*tcl_AsyncCreate) (Tcl_AsyncProc * proc, ClientData clientData);
	void (*tcl_AsyncDelete) (Tcl_AsyncHandler async);
	int (*tcl_AsyncInvoke) (Tcl_Interp * interp, int code);
	void (*tcl_AsyncMark) (Tcl_AsyncHandler async);
	int (*tcl_AsyncReady) (void);
	void (*tcl_BackgroundError) (Tcl_Interp * interp);
	char (*tcl_Backslash) (const char *src, int *readPtr);
	int (*tcl_BadChannelOption) (Tcl_Interp * interp, const char *optionName, const char *optionList);
	void (*tcl_CallWhenDeleted) (Tcl_Interp * interp, Tcl_InterpDeleteProc * proc, ClientData clientData);
	void (*tcl_CancelIdleCall) (Tcl_IdleProc * idleProc, ClientData clientData);
	int (*tcl_Close) (Tcl_Interp * interp, Tcl_Channel chan);
	int (*tcl_CommandComplete) (const char *cmd);
	char *(*tcl_Concat) (int argc, const char *const *argv);
	int (*tcl_ConvertElement) (const char *src, char *dst, int flags);
	int (*tcl_ConvertCountedElement) (const char *src, int length, char *dst, int flags);
	int (*tcl_CreateAlias) (Tcl_Interp * slave, const char *slaveCmd, Tcl_Interp * target, const char *targetCmd, int argc, const char *const *argv);
	int (*tcl_CreateAliasObj) (Tcl_Interp * slave, const char *slaveCmd, Tcl_Interp * target, const char *targetCmd, int objc, Tcl_Obj * const objv[]);
	 Tcl_Channel(*tcl_CreateChannel) (const Tcl_ChannelType * typePtr, const char *chanName, ClientData instanceData, int mask);
	void (*tcl_CreateChannelHandler) (Tcl_Channel chan, int mask, Tcl_ChannelProc * proc, ClientData clientData);
	void (*tcl_CreateCloseHandler) (Tcl_Channel chan, Tcl_CloseProc * proc, ClientData clientData);
	 Tcl_Command(*tcl_CreateCommand) (Tcl_Interp * interp, const char *cmdName, Tcl_CmdProc * proc, ClientData clientData, Tcl_CmdDeleteProc * deleteProc);
	void (*tcl_CreateEventSource) (Tcl_EventSetupProc * setupProc, Tcl_EventCheckProc * checkProc, ClientData clientData);
	void (*tcl_CreateExitHandler) (Tcl_ExitProc * proc, ClientData clientData);
	Tcl_Interp *(*tcl_CreateInterp) (void);
	void (*tcl_CreateMathFunc) (Tcl_Interp * interp, const char *name, int numArgs, Tcl_ValueType * argTypes, Tcl_MathProc * proc, ClientData clientData);
	 Tcl_Command(*tcl_CreateObjCommand) (Tcl_Interp * interp, const char *cmdName, Tcl_ObjCmdProc * proc, ClientData clientData, Tcl_CmdDeleteProc * deleteProc);
	Tcl_Interp *(*tcl_CreateSlave) (Tcl_Interp * interp, const char *slaveName, int isSafe);
	 Tcl_TimerToken(*tcl_CreateTimerHandler) (int milliseconds, Tcl_TimerProc * proc, ClientData clientData);
	 Tcl_Trace(*tcl_CreateTrace) (Tcl_Interp * interp, int level, Tcl_CmdTraceProc * proc, ClientData clientData);
	void (*tcl_DeleteAssocData) (Tcl_Interp * interp, const char *name);
	void (*tcl_DeleteChannelHandler) (Tcl_Channel chan, Tcl_ChannelProc * proc, ClientData clientData);
	void (*tcl_DeleteCloseHandler) (Tcl_Channel chan, Tcl_CloseProc * proc, ClientData clientData);
	int (*tcl_DeleteCommand) (Tcl_Interp * interp, const char *cmdName);
	int (*tcl_DeleteCommandFromToken) (Tcl_Interp * interp, Tcl_Command command);
	void (*tcl_DeleteEvents) (Tcl_EventDeleteProc * proc, ClientData clientData);
	void (*tcl_DeleteEventSource) (Tcl_EventSetupProc * setupProc, Tcl_EventCheckProc * checkProc, ClientData clientData);
	void (*tcl_DeleteExitHandler) (Tcl_ExitProc * proc, ClientData clientData);
	void (*tcl_DeleteHashEntry) (Tcl_HashEntry * entryPtr);
	void (*tcl_DeleteHashTable) (Tcl_HashTable * tablePtr);
	void (*tcl_DeleteInterp) (Tcl_Interp * interp);
	void (*tcl_DetachPids) (int numPids, Tcl_Pid * pidPtr);
	void (*tcl_DeleteTimerHandler) (Tcl_TimerToken token);
	void (*tcl_DeleteTrace) (Tcl_Interp * interp, Tcl_Trace trace);
	void (*tcl_DontCallWhenDeleted) (Tcl_Interp * interp, Tcl_InterpDeleteProc * proc, ClientData clientData);
	int (*tcl_DoOneEvent) (int flags);
	void (*tcl_DoWhenIdle) (Tcl_IdleProc * proc, ClientData clientData);
	char *(*tcl_DStringAppend) (Tcl_DString * dsPtr, const char *bytes, int length);
	char *(*tcl_DStringAppendElement) (Tcl_DString * dsPtr, const char *element);
	void (*tcl_DStringEndSublist) (Tcl_DString * dsPtr);
	void (*tcl_DStringFree) (Tcl_DString * dsPtr);
	void (*tcl_DStringGetResult) (Tcl_Interp * interp, Tcl_DString * dsPtr);
	void (*tcl_DStringInit) (Tcl_DString * dsPtr);
	void (*tcl_DStringResult) (Tcl_Interp * interp, Tcl_DString * dsPtr);
	void (*tcl_DStringSetLength) (Tcl_DString * dsPtr, int length);
	void (*tcl_DStringStartSublist) (Tcl_DString * dsPtr);
	int (*tcl_Eof) (Tcl_Channel chan);
	const char *(*tcl_ErrnoId) (void);
	const char *(*tcl_ErrnoMsg) (int err);
	int (*tcl_Eval) (Tcl_Interp * interp, const char *script);
	int (*tcl_EvalFile) (Tcl_Interp * interp, const char *fileName);
	int (*tcl_EvalObj) (Tcl_Interp * interp, Tcl_Obj * objPtr);
	void (*tcl_EventuallyFree) (ClientData clientData, Tcl_FreeProc * freeProc);
	void (*tcl_Exit) (int status);
	int (*tcl_ExposeCommand) (Tcl_Interp * interp, const char *hiddenCmdToken, const char *cmdName);
	int (*tcl_ExprBoolean) (Tcl_Interp * interp, const char *expr, int *ptr);
	int (*tcl_ExprBooleanObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, int *ptr);
	int (*tcl_ExprDouble) (Tcl_Interp * interp, const char *expr, double *ptr);
	int (*tcl_ExprDoubleObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, double *ptr);
	int (*tcl_ExprLong) (Tcl_Interp * interp, const char *expr, long *ptr);
	int (*tcl_ExprLongObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, long *ptr);
	int (*tcl_ExprObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_Obj ** resultPtrPtr);
	int (*tcl_ExprString) (Tcl_Interp * interp, const char *expr);
	void (*tcl_Finalize) (void);
	void (*tcl_FindExecutable) (const char *argv0);
	Tcl_HashEntry *(*tcl_FirstHashEntry) (Tcl_HashTable * tablePtr, Tcl_HashSearch * searchPtr);
	int (*tcl_Flush) (Tcl_Channel chan);
	void (*tcl_FreeResult) (Tcl_Interp * interp);
	int (*tcl_GetAlias) (Tcl_Interp * interp, const char *slaveCmd, Tcl_Interp ** targetInterpPtr, const char **targetCmdPtr, int *argcPtr, const char ***argvPtr);
	int (*tcl_GetAliasObj) (Tcl_Interp * interp, const char *slaveCmd, Tcl_Interp ** targetInterpPtr, const char **targetCmdPtr, int *objcPtr, Tcl_Obj *** objv);
	 ClientData(*tcl_GetAssocData) (Tcl_Interp * interp, const char *name, Tcl_InterpDeleteProc ** procPtr);
	 Tcl_Channel(*tcl_GetChannel) (Tcl_Interp * interp, const char *chanName, int *modePtr);
	int (*tcl_GetChannelBufferSize) (Tcl_Channel chan);
	int (*tcl_GetChannelHandle) (Tcl_Channel chan, int direction, ClientData * handlePtr);
	 ClientData(*tcl_GetChannelInstanceData) (Tcl_Channel chan);
	int (*tcl_GetChannelMode) (Tcl_Channel chan);
	const char *(*tcl_GetChannelName) (Tcl_Channel chan);
	int (*tcl_GetChannelOption) (Tcl_Interp * interp, Tcl_Channel chan, const char *optionName, Tcl_DString * dsPtr);
	const Tcl_ChannelType *(*tcl_GetChannelType) (Tcl_Channel chan);
	int (*tcl_GetCommandInfo) (Tcl_Interp * interp, const char *cmdName, Tcl_CmdInfo * infoPtr);
	const char *(*tcl_GetCommandName) (Tcl_Interp * interp, Tcl_Command command);
	int (*tcl_GetErrno) (void);
	const char *(*tcl_GetHostName) (void);
	int (*tcl_GetInterpPath) (Tcl_Interp * askInterp, Tcl_Interp * slaveInterp);
	Tcl_Interp *(*tcl_GetMaster) (Tcl_Interp * interp);
	const char *(*tcl_GetNameOfExecutable) (void);
	Tcl_Obj *(*tcl_GetObjResult) (Tcl_Interp * interp);
	int (*tcl_GetOpenFile) (Tcl_Interp * interp, const char *chanID, int forWriting, int checkUsage, ClientData * filePtr);
	 Tcl_PathType(*tcl_GetPathType) (const char *path);
	int (*tcl_Gets) (Tcl_Channel chan, Tcl_DString * dsPtr);
	int (*tcl_GetsObj) (Tcl_Channel chan, Tcl_Obj * objPtr);
	int (*tcl_GetServiceMode) (void);
	Tcl_Interp *(*tcl_GetSlave) (Tcl_Interp * interp, const char *slaveName);
	 Tcl_Channel(*tcl_GetStdChannel) (int type);
	const char *(*tcl_GetStringResult) (Tcl_Interp * interp);
	const char *(*tcl_GetVar) (Tcl_Interp * interp, const char *varName, int flags);
	const char *(*tcl_GetVar2) (Tcl_Interp * interp, const char *part1, const char *part2, int flags);
	int (*tcl_GlobalEval) (Tcl_Interp * interp, const char *command);
	int (*tcl_GlobalEvalObj) (Tcl_Interp * interp, Tcl_Obj * objPtr);
	int (*tcl_HideCommand) (Tcl_Interp * interp, const char *cmdName, const char *hiddenCmdToken);
	int (*tcl_Init) (Tcl_Interp * interp);
	void (*tcl_InitHashTable) (Tcl_HashTable * tablePtr, int keyType);
	int (*tcl_InputBlocked) (Tcl_Channel chan);
	int (*tcl_InputBuffered) (Tcl_Channel chan);
	int (*tcl_InterpDeleted) (Tcl_Interp * interp);
	int (*tcl_IsSafe) (Tcl_Interp * interp);
	char *(*tcl_JoinPath) (int argc, const char *const *argv, Tcl_DString * resultPtr);
	int (*tcl_LinkVar) (Tcl_Interp * interp, const char *varName, char *addr, int type);
	void (*reserved188) (void);
	 Tcl_Channel(*tcl_MakeFileChannel) (ClientData handle, int mode);
	int (*tcl_MakeSafe) (Tcl_Interp * interp);
	 Tcl_Channel(*tcl_MakeTcpClientChannel) (ClientData tcpSocket);
	char *(*tcl_Merge) (int argc, const char *const *argv);
	Tcl_HashEntry *(*tcl_NextHashEntry) (Tcl_HashSearch * searchPtr);
	void (*tcl_NotifyChannel) (Tcl_Channel channel, int mask);
	Tcl_Obj *(*tcl_ObjGetVar2) (Tcl_Interp * interp, Tcl_Obj * part1Ptr, Tcl_Obj * part2Ptr, int flags);
	Tcl_Obj *(*tcl_ObjSetVar2) (Tcl_Interp * interp, Tcl_Obj * part1Ptr, Tcl_Obj * part2Ptr, Tcl_Obj * newValuePtr, int flags);
	 Tcl_Channel(*tcl_OpenCommandChannel) (Tcl_Interp * interp, int argc, const char **argv, int flags);
	 Tcl_Channel(*tcl_OpenFileChannel) (Tcl_Interp * interp, const char *fileName, const char *modeString, int permissions);
	 Tcl_Channel(*tcl_OpenTcpClient) (Tcl_Interp * interp, int port, const char *address, const char *myaddr, int myport, int async);
	 Tcl_Channel(*tcl_OpenTcpServer) (Tcl_Interp * interp, int port, const char *host, Tcl_TcpAcceptProc * acceptProc, ClientData callbackData);
	void (*tcl_Preserve) (ClientData data);
	void (*tcl_PrintDouble) (Tcl_Interp * interp, double value, char *dst);
	int (*tcl_PutEnv) (const char *assignment);
	const char *(*tcl_PosixError) (Tcl_Interp * interp);
	void (*tcl_QueueEvent) (Tcl_Event * evPtr, Tcl_QueuePosition position);
	int (*tcl_Read) (Tcl_Channel chan, char *bufPtr, int toRead);
	void (*tcl_ReapDetachedProcs) (void);
	int (*tcl_RecordAndEval) (Tcl_Interp * interp, const char *cmd, int flags);
	int (*tcl_RecordAndEvalObj) (Tcl_Interp * interp, Tcl_Obj * cmdPtr, int flags);
	void (*tcl_RegisterChannel) (Tcl_Interp * interp, Tcl_Channel chan);
	void (*tcl_RegisterObjType) (const Tcl_ObjType * typePtr);
	 Tcl_RegExp(*tcl_RegExpCompile) (Tcl_Interp * interp, const char *pattern);
	int (*tcl_RegExpExec) (Tcl_Interp * interp, Tcl_RegExp regexp, const char *text, const char *start);
	int (*tcl_RegExpMatch) (Tcl_Interp * interp, const char *text, const char *pattern);
	void (*tcl_RegExpRange) (Tcl_RegExp regexp, int index, const char **startPtr, const char **endPtr);
	void (*tcl_Release) (ClientData clientData);
	void (*tcl_ResetResult) (Tcl_Interp * interp);
	int (*tcl_ScanElement) (const char *src, int *flagPtr);
	int (*tcl_ScanCountedElement) (const char *src, int length, int *flagPtr);
	int (*tcl_SeekOld) (Tcl_Channel chan, int offset, int mode);
	int (*tcl_ServiceAll) (void);
	int (*tcl_ServiceEvent) (int flags);
	void (*tcl_SetAssocData) (Tcl_Interp * interp, const char *name, Tcl_InterpDeleteProc * proc, ClientData clientData);
	void (*tcl_SetChannelBufferSize) (Tcl_Channel chan, int sz);
	int (*tcl_SetChannelOption) (Tcl_Interp * interp, Tcl_Channel chan, const char *optionName, const char *newValue);
	int (*tcl_SetCommandInfo) (Tcl_Interp * interp, const char *cmdName, const Tcl_CmdInfo * infoPtr);
	void (*tcl_SetErrno) (int err);
	void (*tcl_SetErrorCode) (Tcl_Interp * interp, ...);
	void (*tcl_SetMaxBlockTime) (const Tcl_Time * timePtr);
	void (*tcl_SetPanicProc) (Tcl_PanicProc * panicProc);
	int (*tcl_SetRecursionLimit) (Tcl_Interp * interp, int depth);
	void (*tcl_SetResult) (Tcl_Interp * interp, char *result, Tcl_FreeProc * freeProc);
	int (*tcl_SetServiceMode) (int mode);
	void (*tcl_SetObjErrorCode) (Tcl_Interp * interp, Tcl_Obj * errorObjPtr);
	void (*tcl_SetObjResult) (Tcl_Interp * interp, Tcl_Obj * resultObjPtr);
	void (*tcl_SetStdChannel) (Tcl_Channel channel, int type);
	const char *(*tcl_SetVar) (Tcl_Interp * interp, const char *varName, const char *newValue, int flags);
	const char *(*tcl_SetVar2) (Tcl_Interp * interp, const char *part1, const char *part2, const char *newValue, int flags);
	const char *(*tcl_SignalId) (int sig);
	const char *(*tcl_SignalMsg) (int sig);
	void (*tcl_SourceRCFile) (Tcl_Interp * interp);
	int (*tcl_SplitList) (Tcl_Interp * interp, const char *listStr, int *argcPtr, const char ***argvPtr);
	void (*tcl_SplitPath) (const char *path, int *argcPtr, const char ***argvPtr);
	void (*tcl_StaticPackage) (Tcl_Interp * interp, const char *pkgName, Tcl_PackageInitProc * initProc, Tcl_PackageInitProc * safeInitProc);
	int (*tcl_StringMatch) (const char *str, const char *pattern);
	int (*tcl_TellOld) (Tcl_Channel chan);
	int (*tcl_TraceVar) (Tcl_Interp * interp, const char *varName, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
	int (*tcl_TraceVar2) (Tcl_Interp * interp, const char *part1, const char *part2, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
	char *(*tcl_TranslateFileName) (Tcl_Interp * interp, const char *name, Tcl_DString * bufferPtr);
	int (*tcl_Ungets) (Tcl_Channel chan, const char *str, int len, int atHead);
	void (*tcl_UnlinkVar) (Tcl_Interp * interp, const char *varName);
	int (*tcl_UnregisterChannel) (Tcl_Interp * interp, Tcl_Channel chan);
	int (*tcl_UnsetVar) (Tcl_Interp * interp, const char *varName, int flags);
	int (*tcl_UnsetVar2) (Tcl_Interp * interp, const char *part1, const char *part2, int flags);
	void (*tcl_UntraceVar) (Tcl_Interp * interp, const char *varName, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
	void (*tcl_UntraceVar2) (Tcl_Interp * interp, const char *part1, const char *part2, int flags, Tcl_VarTraceProc * proc, ClientData clientData);
	void (*tcl_UpdateLinkedVar) (Tcl_Interp * interp, const char *varName);
	int (*tcl_UpVar) (Tcl_Interp * interp, const char *frameName, const char *varName, const char *localName, int flags);
	int (*tcl_UpVar2) (Tcl_Interp * interp, const char *frameName, const char *part1, const char *part2, const char *localName, int flags);
	int (*tcl_VarEval) (Tcl_Interp * interp, ...);
	 ClientData(*tcl_VarTraceInfo) (Tcl_Interp * interp, const char *varName, int flags, Tcl_VarTraceProc * procPtr, ClientData prevClientData);
	 ClientData(*tcl_VarTraceInfo2) (Tcl_Interp * interp, const char *part1, const char *part2, int flags, Tcl_VarTraceProc * procPtr, ClientData prevClientData);
	int (*tcl_Write) (Tcl_Channel chan, const char *s, int slen);
	void (*tcl_WrongNumArgs) (Tcl_Interp * interp, int objc, Tcl_Obj * const objv[], const char *message);
	int (*tcl_DumpActiveMemory) (const char *fileName);
	void (*tcl_ValidateAllMemory) (const char *file, int line);
	void (*tcl_AppendResultVA) (Tcl_Interp * interp, va_list argList);
	void (*tcl_AppendStringsToObjVA) (Tcl_Obj * objPtr, va_list argList);
	char *(*tcl_HashStats) (Tcl_HashTable * tablePtr);
	const char *(*tcl_ParseVar) (Tcl_Interp * interp, const char *start, const char **termPtr);
	const char *(*tcl_PkgPresent) (Tcl_Interp * interp, const char *name, const char *version, int exact);
	const char *(*tcl_PkgPresentEx) (Tcl_Interp * interp, const char *name, const char *version, int exact, void *clientDataPtr);
	int (*tcl_PkgProvide) (Tcl_Interp * interp, const char *name, const char *version);
	const char *(*tcl_PkgRequire) (Tcl_Interp * interp, const char *name, const char *version, int exact);
	void (*tcl_SetErrorCodeVA) (Tcl_Interp * interp, va_list argList);
	int (*tcl_VarEvalVA) (Tcl_Interp * interp, va_list argList);
	 Tcl_Pid(*tcl_WaitPid) (Tcl_Pid pid, int *statPtr, int options);
	void (*tcl_PanicVA) (const char *format, va_list argList);
	void (*tcl_GetVersion) (int *major, int *minor, int *patchLevel, int *type);
	void (*tcl_InitMemory) (Tcl_Interp * interp);
	 Tcl_Channel(*tcl_StackChannel) (Tcl_Interp * interp, const Tcl_ChannelType * typePtr, ClientData instanceData, int mask, Tcl_Channel prevChan);
	int (*tcl_UnstackChannel) (Tcl_Interp * interp, Tcl_Channel chan);
	 Tcl_Channel(*tcl_GetStackedChannel) (Tcl_Channel chan);
	void (*tcl_SetMainLoop) (Tcl_MainLoopProc * proc);
	void (*reserved285) (void);
	void (*tcl_AppendObjToObj) (Tcl_Obj * objPtr, Tcl_Obj * appendObjPtr);
	 Tcl_Encoding(*tcl_CreateEncoding) (const Tcl_EncodingType * typePtr);
	void (*tcl_CreateThreadExitHandler) (Tcl_ExitProc * proc, ClientData clientData);
	void (*tcl_DeleteThreadExitHandler) (Tcl_ExitProc * proc, ClientData clientData);
	void (*tcl_DiscardResult) (Tcl_SavedResult * statePtr);
	int (*tcl_EvalEx) (Tcl_Interp * interp, const char *script, int numBytes, int flags);
	int (*tcl_EvalObjv) (Tcl_Interp * interp, int objc, Tcl_Obj * const objv[], int flags);
	int (*tcl_EvalObjEx) (Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
	void (*tcl_ExitThread) (int status);
	int (*tcl_ExternalToUtf) (Tcl_Interp * interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState * statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
	char *(*tcl_ExternalToUtfDString) (Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString * dsPtr);
	void (*tcl_FinalizeThread) (void);
	void (*tcl_FinalizeNotifier) (ClientData clientData);
	void (*tcl_FreeEncoding) (Tcl_Encoding encoding);
	 Tcl_ThreadId(*tcl_GetCurrentThread) (void);
	 Tcl_Encoding(*tcl_GetEncoding) (Tcl_Interp * interp, const char *name);
	const char *(*tcl_GetEncodingName) (Tcl_Encoding encoding);
	void (*tcl_GetEncodingNames) (Tcl_Interp * interp);
	int (*tcl_GetIndexFromObjStruct) (Tcl_Interp * interp, Tcl_Obj * objPtr, const void *tablePtr, int offset, const char *msg, int flags, int *indexPtr);
	void *(*tcl_GetThreadData) (Tcl_ThreadDataKey * keyPtr, int size);
	Tcl_Obj *(*tcl_GetVar2Ex) (Tcl_Interp * interp, const char *part1, const char *part2, int flags);
	 ClientData(*tcl_InitNotifier) (void);
	void (*tcl_MutexLock) (Tcl_Mutex * mutexPtr);
	void (*tcl_MutexUnlock) (Tcl_Mutex * mutexPtr);
	void (*tcl_ConditionNotify) (Tcl_Condition * condPtr);
	void (*tcl_ConditionWait) (Tcl_Condition * condPtr, Tcl_Mutex * mutexPtr, const Tcl_Time * timePtr);
	int (*tcl_NumUtfChars) (const char *src, int length);
	int (*tcl_ReadChars) (Tcl_Channel channel, Tcl_Obj * objPtr, int charsToRead, int appendFlag);
	void (*tcl_RestoreResult) (Tcl_Interp * interp, Tcl_SavedResult * statePtr);
	void (*tcl_SaveResult) (Tcl_Interp * interp, Tcl_SavedResult * statePtr);
	int (*tcl_SetSystemEncoding) (Tcl_Interp * interp, const char *name);
	Tcl_Obj *(*tcl_SetVar2Ex) (Tcl_Interp * interp, const char *part1, const char *part2, Tcl_Obj * newValuePtr, int flags);
	void (*tcl_ThreadAlert) (Tcl_ThreadId threadId);
	void (*tcl_ThreadQueueEvent) (Tcl_ThreadId threadId, Tcl_Event * evPtr, Tcl_QueuePosition position);
	 Tcl_UniChar(*tcl_UniCharAtIndex) (const char *src, int index);
	 Tcl_UniChar(*tcl_UniCharToLower) (int ch);
	 Tcl_UniChar(*tcl_UniCharToTitle) (int ch);
	 Tcl_UniChar(*tcl_UniCharToUpper) (int ch);
	int (*tcl_UniCharToUtf) (int ch, char *buf);
	const char *(*tcl_UtfAtIndex) (const char *src, int index);
	int (*tcl_UtfCharComplete) (const char *src, int length);
	int (*tcl_UtfBackslash) (const char *src, int *readPtr, char *dst);
	const char *(*tcl_UtfFindFirst) (const char *src, int ch);
	const char *(*tcl_UtfFindLast) (const char *src, int ch);
	const char *(*tcl_UtfNext) (const char *src);
	const char *(*tcl_UtfPrev) (const char *src, const char *start);
	int (*tcl_UtfToExternal) (Tcl_Interp * interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState * statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
	char *(*tcl_UtfToExternalDString) (Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString * dsPtr);
	int (*tcl_UtfToLower) (char *src);
	int (*tcl_UtfToTitle) (char *src);
	int (*tcl_UtfToUniChar) (const char *src, Tcl_UniChar * chPtr);
	int (*tcl_UtfToUpper) (char *src);
	int (*tcl_WriteChars) (Tcl_Channel chan, const char *src, int srcLen);
	int (*tcl_WriteObj) (Tcl_Channel chan, Tcl_Obj * objPtr);
	char *(*tcl_GetString) (Tcl_Obj * objPtr);
	const char *(*tcl_GetDefaultEncodingDir) (void);
	void (*tcl_SetDefaultEncodingDir) (const char *path);
	void (*tcl_AlertNotifier) (ClientData clientData);
	void (*tcl_ServiceModeHook) (int mode);
	int (*tcl_UniCharIsAlnum) (int ch);
	int (*tcl_UniCharIsAlpha) (int ch);
	int (*tcl_UniCharIsDigit) (int ch);
	int (*tcl_UniCharIsLower) (int ch);
	int (*tcl_UniCharIsSpace) (int ch);
	int (*tcl_UniCharIsUpper) (int ch);
	int (*tcl_UniCharIsWordChar) (int ch);
	int (*tcl_UniCharLen) (const Tcl_UniChar * uniStr);
	int (*tcl_UniCharNcmp) (const Tcl_UniChar * ucs, const Tcl_UniChar * uct, unsigned long numChars);
	char *(*tcl_UniCharToUtfDString) (const Tcl_UniChar * uniStr, int uniLength, Tcl_DString * dsPtr);
	Tcl_UniChar *(*tcl_UtfToUniCharDString) (const char *src, int length, Tcl_DString * dsPtr);
	 Tcl_RegExp(*tcl_GetRegExpFromObj) (Tcl_Interp * interp, Tcl_Obj * patObj, int flags);
	Tcl_Obj *(*tcl_EvalTokens) (Tcl_Interp * interp, Tcl_Token * tokenPtr, int count);
	void (*tcl_FreeParse) (Tcl_Parse * parsePtr);
	void (*tcl_LogCommandInfo) (Tcl_Interp * interp, const char *script, const char *command, int length);
	int (*tcl_ParseBraces) (Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr, int append, const char **termPtr);
	int (*tcl_ParseCommand) (Tcl_Interp * interp, const char *start, int numBytes, int nested, Tcl_Parse * parsePtr);
	int (*tcl_ParseExpr) (Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr);
	int (*tcl_ParseQuotedString) (Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr, int append, const char **termPtr);
	int (*tcl_ParseVarName) (Tcl_Interp * interp, const char *start, int numBytes, Tcl_Parse * parsePtr, int append);
	char *(*tcl_GetCwd) (Tcl_Interp * interp, Tcl_DString * cwdPtr);
	int (*tcl_Chdir) (const char *dirName);
	int (*tcl_Access) (const char *path, int mode);
	int (*tcl_Stat) (const char *path, struct stat * bufPtr);
	int (*tcl_UtfNcmp) (const char *s1, const char *s2, unsigned long n);
	int (*tcl_UtfNcasecmp) (const char *s1, const char *s2, unsigned long n);
	int (*tcl_StringCaseMatch) (const char *str, const char *pattern, int nocase);
	int (*tcl_UniCharIsControl) (int ch);
	int (*tcl_UniCharIsGraph) (int ch);
	int (*tcl_UniCharIsPrint) (int ch);
	int (*tcl_UniCharIsPunct) (int ch);
	int (*tcl_RegExpExecObj) (Tcl_Interp * interp, Tcl_RegExp regexp, Tcl_Obj * textObj, int offset, int nmatches, int flags);
	void (*tcl_RegExpGetInfo) (Tcl_RegExp regexp, Tcl_RegExpInfo * infoPtr);
	Tcl_Obj *(*tcl_NewUnicodeObj) (const Tcl_UniChar * unicode, int numChars);
	void (*tcl_SetUnicodeObj) (Tcl_Obj * objPtr, const Tcl_UniChar * unicode, int numChars);
	int (*tcl_GetCharLength) (Tcl_Obj * objPtr);
	 Tcl_UniChar(*tcl_GetUniChar) (Tcl_Obj * objPtr, int index);
	Tcl_UniChar *(*tcl_GetUnicode) (Tcl_Obj * objPtr);
	Tcl_Obj *(*tcl_GetRange) (Tcl_Obj * objPtr, int first, int last);
	void (*tcl_AppendUnicodeToObj) (Tcl_Obj * objPtr, const Tcl_UniChar * unicode, int length);
	int (*tcl_RegExpMatchObj) (Tcl_Interp * interp, Tcl_Obj * textObj, Tcl_Obj * patternObj);
	void (*tcl_SetNotifier) (Tcl_NotifierProcs * notifierProcPtr);
	Tcl_Mutex *(*tcl_GetAllocMutex) (void);
	int (*tcl_GetChannelNames) (Tcl_Interp * interp);
	int (*tcl_GetChannelNamesEx) (Tcl_Interp * interp, const char *pattern);
	int (*tcl_ProcObjCmd) (ClientData clientData, Tcl_Interp * interp, int objc, Tcl_Obj * const objv[]);
	void (*tcl_ConditionFinalize) (Tcl_Condition * condPtr);
	void (*tcl_MutexFinalize) (Tcl_Mutex * mutex);
	int (*tcl_CreateThread) (Tcl_ThreadId * idPtr, Tcl_ThreadCreateProc * proc, ClientData clientData, int stackSize, int flags);
	int (*tcl_ReadRaw) (Tcl_Channel chan, char *dst, int bytesToRead);
	int (*tcl_WriteRaw) (Tcl_Channel chan, const char *src, int srcLen);
	 Tcl_Channel(*tcl_GetTopChannel) (Tcl_Channel chan);
	int (*tcl_ChannelBuffered) (Tcl_Channel chan);
	const char *(*tcl_ChannelName) (const Tcl_ChannelType * chanTypePtr);
	 Tcl_ChannelTypeVersion(*tcl_ChannelVersion) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverBlockModeProc *(*tcl_ChannelBlockModeProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverCloseProc *(*tcl_ChannelCloseProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverClose2Proc *(*tcl_ChannelClose2Proc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverInputProc *(*tcl_ChannelInputProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverOutputProc *(*tcl_ChannelOutputProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverSeekProc *(*tcl_ChannelSeekProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverSetOptionProc *(*tcl_ChannelSetOptionProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverGetOptionProc *(*tcl_ChannelGetOptionProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverWatchProc *(*tcl_ChannelWatchProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverGetHandleProc *(*tcl_ChannelGetHandleProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverFlushProc *(*tcl_ChannelFlushProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_DriverHandlerProc *(*tcl_ChannelHandlerProc) (const Tcl_ChannelType * chanTypePtr);
	int (*tcl_JoinThread) (Tcl_ThreadId threadId, int *result);
	int (*tcl_IsChannelShared) (Tcl_Channel channel);
	int (*tcl_IsChannelRegistered) (Tcl_Interp * interp, Tcl_Channel channel);
	void (*tcl_CutChannel) (Tcl_Channel channel);
	void (*tcl_SpliceChannel) (Tcl_Channel channel);
	void (*tcl_ClearChannelHandlers) (Tcl_Channel channel);
	int (*tcl_IsChannelExisting) (const char *channelName);
	int (*tcl_UniCharNcasecmp) (const Tcl_UniChar * ucs, const Tcl_UniChar * uct, unsigned long numChars);
	int (*tcl_UniCharCaseMatch) (const Tcl_UniChar * uniStr, const Tcl_UniChar * uniPattern, int nocase);
	Tcl_HashEntry *(*tcl_FindHashEntry) (Tcl_HashTable * tablePtr, const void *key);
	Tcl_HashEntry *(*tcl_CreateHashEntry) (Tcl_HashTable * tablePtr, const void *key, int *newPtr);
	void (*tcl_InitCustomHashTable) (Tcl_HashTable * tablePtr, int keyType, const Tcl_HashKeyType * typePtr);
	void (*tcl_InitObjHashTable) (Tcl_HashTable * tablePtr);
	 ClientData(*tcl_CommandTraceInfo) (Tcl_Interp * interp, const char *varName, int flags, Tcl_CommandTraceProc * procPtr, ClientData prevClientData);
	int (*tcl_TraceCommand) (Tcl_Interp * interp, const char *varName, int flags, Tcl_CommandTraceProc * proc, ClientData clientData);
	void (*tcl_UntraceCommand) (Tcl_Interp * interp, const char *varName, int flags, Tcl_CommandTraceProc * proc, ClientData clientData);
	char *(*tcl_AttemptAlloc) (unsigned int size);
	char *(*tcl_AttemptDbCkalloc) (unsigned int size, const char *file, int line);
	char *(*tcl_AttemptRealloc) (char *ptr, unsigned int size);
	char *(*tcl_AttemptDbCkrealloc) (char *ptr, unsigned int size, const char *file, int line);
	int (*tcl_AttemptSetObjLength) (Tcl_Obj * objPtr, int length);
	 Tcl_ThreadId(*tcl_GetChannelThread) (Tcl_Channel channel);
	Tcl_UniChar *(*tcl_GetUnicodeFromObj) (Tcl_Obj * objPtr, int *lengthPtr);
	int (*tcl_GetMathFuncInfo) (Tcl_Interp * interp, const char *name, int *numArgsPtr, Tcl_ValueType ** argTypesPtr, Tcl_MathProc ** procPtr, ClientData * clientDataPtr);
	Tcl_Obj *(*tcl_ListMathFuncs) (Tcl_Interp * interp, const char *pattern);
	Tcl_Obj *(*tcl_SubstObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
	int (*tcl_DetachChannel) (Tcl_Interp * interp, Tcl_Channel channel);
	int (*tcl_IsStandardChannel) (Tcl_Channel channel);
	int (*tcl_FSCopyFile) (Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr);
	int (*tcl_FSCopyDirectory) (Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr, Tcl_Obj ** errorPtr);
	int (*tcl_FSCreateDirectory) (Tcl_Obj * pathPtr);
	int (*tcl_FSDeleteFile) (Tcl_Obj * pathPtr);
	int (*tcl_FSLoadFile) (Tcl_Interp * interp, Tcl_Obj * pathPtr, const char *sym1, const char *sym2, Tcl_PackageInitProc ** proc1Ptr, Tcl_PackageInitProc ** proc2Ptr, Tcl_LoadHandle * handlePtr, Tcl_FSUnloadFileProc ** unloadProcPtr);
	int (*tcl_FSMatchInDirectory) (Tcl_Interp * interp, Tcl_Obj * result, Tcl_Obj * pathPtr, const char *pattern, Tcl_GlobTypeData * types);
	Tcl_Obj *(*tcl_FSLink) (Tcl_Obj * pathPtr, Tcl_Obj * toPtr, int linkAction);
	int (*tcl_FSRemoveDirectory) (Tcl_Obj * pathPtr, int recursive, Tcl_Obj ** errorPtr);
	int (*tcl_FSRenameFile) (Tcl_Obj * srcPathPtr, Tcl_Obj * destPathPtr);
	int (*tcl_FSLstat) (Tcl_Obj * pathPtr, Tcl_StatBuf * buf);
	int (*tcl_FSUtime) (Tcl_Obj * pathPtr, struct utimbuf * tval);
	int (*tcl_FSFileAttrsGet) (Tcl_Interp * interp, int index, Tcl_Obj * pathPtr, Tcl_Obj ** objPtrRef);
	int (*tcl_FSFileAttrsSet) (Tcl_Interp * interp, int index, Tcl_Obj * pathPtr, Tcl_Obj * objPtr);
	const char *const *(*tcl_FSFileAttrStrings) (Tcl_Obj * pathPtr, Tcl_Obj ** objPtrRef);
	int (*tcl_FSStat) (Tcl_Obj * pathPtr, Tcl_StatBuf * buf);
	int (*tcl_FSAccess) (Tcl_Obj * pathPtr, int mode);
	 Tcl_Channel(*tcl_FSOpenFileChannel) (Tcl_Interp * interp, Tcl_Obj * pathPtr, const char *modeString, int permissions);
	Tcl_Obj *(*tcl_FSGetCwd) (Tcl_Interp * interp);
	int (*tcl_FSChdir) (Tcl_Obj * pathPtr);
	int (*tcl_FSConvertToPathType) (Tcl_Interp * interp, Tcl_Obj * pathPtr);
	Tcl_Obj *(*tcl_FSJoinPath) (Tcl_Obj * listObj, int elements);
	Tcl_Obj *(*tcl_FSSplitPath) (Tcl_Obj * pathPtr, int *lenPtr);
	int (*tcl_FSEqualPaths) (Tcl_Obj * firstPtr, Tcl_Obj * secondPtr);
	Tcl_Obj *(*tcl_FSGetNormalizedPath) (Tcl_Interp * interp, Tcl_Obj * pathPtr);
	Tcl_Obj *(*tcl_FSJoinToPath) (Tcl_Obj * pathPtr, int objc, Tcl_Obj * const objv[]);
	 ClientData(*tcl_FSGetInternalRep) (Tcl_Obj * pathPtr, const Tcl_Filesystem * fsPtr);
	Tcl_Obj *(*tcl_FSGetTranslatedPath) (Tcl_Interp * interp, Tcl_Obj * pathPtr);
	int (*tcl_FSEvalFile) (Tcl_Interp * interp, Tcl_Obj * fileName);
	Tcl_Obj *(*tcl_FSNewNativePath) (const Tcl_Filesystem * fromFilesystem, ClientData clientData);
	const void *(*tcl_FSGetNativePath) (Tcl_Obj * pathPtr);
	Tcl_Obj *(*tcl_FSFileSystemInfo) (Tcl_Obj * pathPtr);
	Tcl_Obj *(*tcl_FSPathSeparator) (Tcl_Obj * pathPtr);
	Tcl_Obj *(*tcl_FSListVolumes) (void);
	int (*tcl_FSRegister) (ClientData clientData, const Tcl_Filesystem * fsPtr);
	int (*tcl_FSUnregister) (const Tcl_Filesystem * fsPtr);
	 ClientData(*tcl_FSData) (const Tcl_Filesystem * fsPtr);
	const char *(*tcl_FSGetTranslatedStringPath) (Tcl_Interp * interp, Tcl_Obj * pathPtr);
	const Tcl_Filesystem *(*tcl_FSGetFileSystemForPath) (Tcl_Obj * pathPtr);
	 Tcl_PathType(*tcl_FSGetPathType) (Tcl_Obj * pathPtr);
	int (*tcl_OutputBuffered) (Tcl_Channel chan);
	void (*tcl_FSMountsChanged) (const Tcl_Filesystem * fsPtr);
	int (*tcl_EvalTokensStandard) (Tcl_Interp * interp, Tcl_Token * tokenPtr, int count);
	void (*tcl_GetTime) (Tcl_Time * timeBuf);
	 Tcl_Trace(*tcl_CreateObjTrace) (Tcl_Interp * interp, int level, int flags, Tcl_CmdObjTraceProc * objProc, ClientData clientData, Tcl_CmdObjTraceDeleteProc * delProc);
	int (*tcl_GetCommandInfoFromToken) (Tcl_Command token, Tcl_CmdInfo * infoPtr);
	int (*tcl_SetCommandInfoFromToken) (Tcl_Command token, const Tcl_CmdInfo * infoPtr);
	Tcl_Obj *(*tcl_DbNewWideIntObj) (Tcl_WideInt wideValue, const char *file, int line);
	int (*tcl_GetWideIntFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_WideInt * widePtr);
	Tcl_Obj *(*tcl_NewWideIntObj) (Tcl_WideInt wideValue);
	void (*tcl_SetWideIntObj) (Tcl_Obj * objPtr, Tcl_WideInt wideValue);
	Tcl_StatBuf *(*tcl_AllocStatBuf) (void);
	 Tcl_WideInt(*tcl_Seek) (Tcl_Channel chan, Tcl_WideInt offset, int mode);
	 Tcl_WideInt(*tcl_Tell) (Tcl_Channel chan);
	Tcl_DriverWideSeekProc *(*tcl_ChannelWideSeekProc) (const Tcl_ChannelType * chanTypePtr);
	int (*tcl_DictObjPut) (Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_Obj * keyPtr, Tcl_Obj * valuePtr);
	int (*tcl_DictObjGet) (Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_Obj * keyPtr, Tcl_Obj ** valuePtrPtr);
	int (*tcl_DictObjRemove) (Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_Obj * keyPtr);
	int (*tcl_DictObjSize) (Tcl_Interp * interp, Tcl_Obj * dictPtr, int *sizePtr);
	int (*tcl_DictObjFirst) (Tcl_Interp * interp, Tcl_Obj * dictPtr, Tcl_DictSearch * searchPtr, Tcl_Obj ** keyPtrPtr, Tcl_Obj ** valuePtrPtr, int *donePtr);
	void (*tcl_DictObjNext) (Tcl_DictSearch * searchPtr, Tcl_Obj ** keyPtrPtr, Tcl_Obj ** valuePtrPtr, int *donePtr);
	void (*tcl_DictObjDone) (Tcl_DictSearch * searchPtr);
	int (*tcl_DictObjPutKeyList) (Tcl_Interp * interp, Tcl_Obj * dictPtr, int keyc, Tcl_Obj * const *keyv, Tcl_Obj * valuePtr);
	int (*tcl_DictObjRemoveKeyList) (Tcl_Interp * interp, Tcl_Obj * dictPtr, int keyc, Tcl_Obj * const *keyv);
	Tcl_Obj *(*tcl_NewDictObj) (void);
	Tcl_Obj *(*tcl_DbNewDictObj) (const char *file, int line);
	void (*tcl_RegisterConfig) (Tcl_Interp * interp, const char *pkgName, const Tcl_Config * configuration, const char *valEncoding);
	Tcl_Namespace *(*tcl_CreateNamespace) (Tcl_Interp * interp, const char *name, ClientData clientData, Tcl_NamespaceDeleteProc * deleteProc);
	void (*tcl_DeleteNamespace) (Tcl_Namespace * nsPtr);
	int (*tcl_AppendExportList) (Tcl_Interp * interp, Tcl_Namespace * nsPtr, Tcl_Obj * objPtr);
	int (*tcl_Export) (Tcl_Interp * interp, Tcl_Namespace * nsPtr, const char *pattern, int resetListFirst);
	int (*tcl_Import) (Tcl_Interp * interp, Tcl_Namespace * nsPtr, const char *pattern, int allowOverwrite);
	int (*tcl_ForgetImport) (Tcl_Interp * interp, Tcl_Namespace * nsPtr, const char *pattern);
	Tcl_Namespace *(*tcl_GetCurrentNamespace) (Tcl_Interp * interp);
	Tcl_Namespace *(*tcl_GetGlobalNamespace) (Tcl_Interp * interp);
	Tcl_Namespace *(*tcl_FindNamespace) (Tcl_Interp * interp, const char *name, Tcl_Namespace * contextNsPtr, int flags);
	 Tcl_Command(*tcl_FindCommand) (Tcl_Interp * interp, const char *name, Tcl_Namespace * contextNsPtr, int flags);
	 Tcl_Command(*tcl_GetCommandFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr);
	void (*tcl_GetCommandFullName) (Tcl_Interp * interp, Tcl_Command command, Tcl_Obj * objPtr);
	int (*tcl_FSEvalFileEx) (Tcl_Interp * interp, Tcl_Obj * fileName, const char *encodingName);
	Tcl_ExitProc *(*tcl_SetExitProc) (Tcl_ExitProc * proc);
	void (*tcl_LimitAddHandler) (Tcl_Interp * interp, int type, Tcl_LimitHandlerProc * handlerProc, ClientData clientData, Tcl_LimitHandlerDeleteProc * deleteProc);
	void (*tcl_LimitRemoveHandler) (Tcl_Interp * interp, int type, Tcl_LimitHandlerProc * handlerProc, ClientData clientData);
	int (*tcl_LimitReady) (Tcl_Interp * interp);
	int (*tcl_LimitCheck) (Tcl_Interp * interp);
	int (*tcl_LimitExceeded) (Tcl_Interp * interp);
	void (*tcl_LimitSetCommands) (Tcl_Interp * interp, int commandLimit);
	void (*tcl_LimitSetTime) (Tcl_Interp * interp, Tcl_Time * timeLimitPtr);
	void (*tcl_LimitSetGranularity) (Tcl_Interp * interp, int type, int granularity);
	int (*tcl_LimitTypeEnabled) (Tcl_Interp * interp, int type);
	int (*tcl_LimitTypeExceeded) (Tcl_Interp * interp, int type);
	void (*tcl_LimitTypeSet) (Tcl_Interp * interp, int type);
	void (*tcl_LimitTypeReset) (Tcl_Interp * interp, int type);
	int (*tcl_LimitGetCommands) (Tcl_Interp * interp);
	void (*tcl_LimitGetTime) (Tcl_Interp * interp, Tcl_Time * timeLimitPtr);
	int (*tcl_LimitGetGranularity) (Tcl_Interp * interp, int type);
	 Tcl_InterpState(*tcl_SaveInterpState) (Tcl_Interp * interp, int status);
	int (*tcl_RestoreInterpState) (Tcl_Interp * interp, Tcl_InterpState state);
	void (*tcl_DiscardInterpState) (Tcl_InterpState state);
	int (*tcl_SetReturnOptions) (Tcl_Interp * interp, Tcl_Obj * options);
	Tcl_Obj *(*tcl_GetReturnOptions) (Tcl_Interp * interp, int result);
	int (*tcl_IsEnsemble) (Tcl_Command token);
	 Tcl_Command(*tcl_CreateEnsemble) (Tcl_Interp * interp, const char *name, Tcl_Namespace * namespacePtr, int flags);
	 Tcl_Command(*tcl_FindEnsemble) (Tcl_Interp * interp, Tcl_Obj * cmdNameObj, int flags);
	int (*tcl_SetEnsembleSubcommandList) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * subcmdList);
	int (*tcl_SetEnsembleMappingDict) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * mapDict);
	int (*tcl_SetEnsembleUnknownHandler) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * unknownList);
	int (*tcl_SetEnsembleFlags) (Tcl_Interp * interp, Tcl_Command token, int flags);
	int (*tcl_GetEnsembleSubcommandList) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** subcmdListPtr);
	int (*tcl_GetEnsembleMappingDict) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** mapDictPtr);
	int (*tcl_GetEnsembleUnknownHandler) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** unknownListPtr);
	int (*tcl_GetEnsembleFlags) (Tcl_Interp * interp, Tcl_Command token, int *flagsPtr);
	int (*tcl_GetEnsembleNamespace) (Tcl_Interp * interp, Tcl_Command token, Tcl_Namespace ** namespacePtrPtr);
	void (*tcl_SetTimeProc) (Tcl_GetTimeProc * getProc, Tcl_ScaleTimeProc * scaleProc, ClientData clientData);
	void (*tcl_QueryTimeProc) (Tcl_GetTimeProc ** getProc, Tcl_ScaleTimeProc ** scaleProc, ClientData * clientData);
	Tcl_DriverThreadActionProc *(*tcl_ChannelThreadActionProc) (const Tcl_ChannelType * chanTypePtr);
	Tcl_Obj *(*tcl_NewBignumObj) (mp_int * value);
	Tcl_Obj *(*tcl_DbNewBignumObj) (mp_int * value, const char *file, int line);
	void (*tcl_SetBignumObj) (Tcl_Obj * obj, mp_int * value);
	int (*tcl_GetBignumFromObj) (Tcl_Interp * interp, Tcl_Obj * obj, mp_int * value);
	int (*tcl_TakeBignumFromObj) (Tcl_Interp * interp, Tcl_Obj * obj, mp_int * value);
	int (*tcl_TruncateChannel) (Tcl_Channel chan, Tcl_WideInt length);
	Tcl_DriverTruncateProc *(*tcl_ChannelTruncateProc) (const Tcl_ChannelType * chanTypePtr);
	void (*tcl_SetChannelErrorInterp) (Tcl_Interp * interp, Tcl_Obj * msg);
	void (*tcl_GetChannelErrorInterp) (Tcl_Interp * interp, Tcl_Obj ** msg);
	void (*tcl_SetChannelError) (Tcl_Channel chan, Tcl_Obj * msg);
	void (*tcl_GetChannelError) (Tcl_Channel chan, Tcl_Obj ** msg);
	int (*tcl_InitBignumFromDouble) (Tcl_Interp * interp, double initval, mp_int * toInit);
	Tcl_Obj *(*tcl_GetNamespaceUnknownHandler) (Tcl_Interp * interp, Tcl_Namespace * nsPtr);
	int (*tcl_SetNamespaceUnknownHandler) (Tcl_Interp * interp, Tcl_Namespace * nsPtr, Tcl_Obj * handlerPtr);
	int (*tcl_GetEncodingFromObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_Encoding * encodingPtr);
	Tcl_Obj *(*tcl_GetEncodingSearchPath) (void);
	int (*tcl_SetEncodingSearchPath) (Tcl_Obj * searchPath);
	const char *(*tcl_GetEncodingNameFromEnvironment) (Tcl_DString * bufPtr);
	int (*tcl_PkgRequireProc) (Tcl_Interp * interp, const char *name, int objc, Tcl_Obj * const objv[], void *clientDataPtr);
	void (*tcl_AppendObjToErrorInfo) (Tcl_Interp * interp, Tcl_Obj * objPtr);
	void (*tcl_AppendLimitedToObj) (Tcl_Obj * objPtr, const char *bytes, int length, int limit, const char *ellipsis);
	Tcl_Obj *(*tcl_Format) (Tcl_Interp * interp, const char *format, int objc, Tcl_Obj * const objv[]);
	int (*tcl_AppendFormatToObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, const char *format, int objc, Tcl_Obj * const objv[]);
	Tcl_Obj *(*tcl_ObjPrintf) (const char *format, ...);
	void (*tcl_AppendPrintfToObj) (Tcl_Obj * objPtr, const char *format, ...);
	int (*tcl_CancelEval) (Tcl_Interp * interp, Tcl_Obj * resultObjPtr, ClientData clientData, int flags);
	int (*tcl_Canceled) (Tcl_Interp * interp, int flags);
	int (*tcl_CreatePipe) (Tcl_Interp * interp, Tcl_Channel * rchan, Tcl_Channel * wchan, int flags);
	 Tcl_Command(*tcl_NRCreateCommand) (Tcl_Interp * interp, const char *cmdName, Tcl_ObjCmdProc * proc, Tcl_ObjCmdProc * nreProc, ClientData clientData, Tcl_CmdDeleteProc * deleteProc);
	int (*tcl_NREvalObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
	int (*tcl_NREvalObjv) (Tcl_Interp * interp, int objc, Tcl_Obj * const objv[], int flags);
	int (*tcl_NRCmdSwap) (Tcl_Interp * interp, Tcl_Command cmd, int objc, Tcl_Obj * const objv[], int flags);
	void (*tcl_NRAddCallback) (Tcl_Interp * interp, Tcl_NRPostProc * postProcPtr, ClientData data0, ClientData data1, ClientData data2, ClientData data3);
	int (*tcl_NRCallObjProc) (Tcl_Interp * interp, Tcl_ObjCmdProc * objProc, ClientData clientData, int objc, Tcl_Obj * const objv[]);
	unsigned (*tcl_GetFSDeviceFromStat) (const Tcl_StatBuf * statPtr);
	unsigned (*tcl_GetFSInodeFromStat) (const Tcl_StatBuf * statPtr);
	unsigned (*tcl_GetModeFromStat) (const Tcl_StatBuf * statPtr);
	int (*tcl_GetLinkCountFromStat) (const Tcl_StatBuf * statPtr);
	int (*tcl_GetUserIdFromStat) (const Tcl_StatBuf * statPtr);
	int (*tcl_GetGroupIdFromStat) (const Tcl_StatBuf * statPtr);
	int (*tcl_GetDeviceTypeFromStat) (const Tcl_StatBuf * statPtr);
	 Tcl_WideInt(*tcl_GetAccessTimeFromStat) (const Tcl_StatBuf * statPtr);
	 Tcl_WideInt(*tcl_GetModificationTimeFromStat) (const Tcl_StatBuf * statPtr);
	 Tcl_WideInt(*tcl_GetChangeTimeFromStat) (const Tcl_StatBuf * statPtr);
	 Tcl_WideUInt(*tcl_GetSizeFromStat) (const Tcl_StatBuf * statPtr);
	 Tcl_WideUInt(*tcl_GetBlocksFromStat) (const Tcl_StatBuf * statPtr);
	unsigned (*tcl_GetBlockSizeFromStat) (const Tcl_StatBuf * statPtr);
	int (*tcl_SetEnsembleParameterList) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj * paramList);
	int (*tcl_GetEnsembleParameterList) (Tcl_Interp * interp, Tcl_Command token, Tcl_Obj ** paramListPtr);
	int (*tcl_ParseArgsObjv) (Tcl_Interp * interp, const Tcl_ArgvInfo * argTable, int *objcPtr, Tcl_Obj * const *objv, Tcl_Obj *** remObjv);
	int (*tcl_GetErrorLine) (Tcl_Interp * interp);
	void (*tcl_SetErrorLine) (Tcl_Interp * interp, int lineNum);
	void (*tcl_TransferResult) (Tcl_Interp * sourceInterp, int result, Tcl_Interp * targetInterp);
	int (*tcl_InterpActive) (Tcl_Interp * interp);
	void (*tcl_BackgroundException) (Tcl_Interp * interp, int code);
	int (*tcl_ZlibDeflate) (Tcl_Interp * interp, int format, Tcl_Obj * data, int level, Tcl_Obj * gzipHeaderDictObj);
	int (*tcl_ZlibInflate) (Tcl_Interp * interp, int format, Tcl_Obj * data, int buffersize, Tcl_Obj * gzipHeaderDictObj);
	unsigned int (*tcl_ZlibCRC32) (unsigned int crc, const unsigned char *buf, int len);
	unsigned int (*tcl_ZlibAdler32) (unsigned int adler, const unsigned char *buf, int len);
	int (*tcl_ZlibStreamInit) (Tcl_Interp * interp, int mode, int format, int level, Tcl_Obj * dictObj, Tcl_ZlibStream * zshandle);
	Tcl_Obj *(*tcl_ZlibStreamGetCommandName) (Tcl_ZlibStream zshandle);
	int (*tcl_ZlibStreamEof) (Tcl_ZlibStream zshandle);
	int (*tcl_ZlibStreamChecksum) (Tcl_ZlibStream zshandle);
	int (*tcl_ZlibStreamPut) (Tcl_ZlibStream zshandle, Tcl_Obj * data, int flush);
	int (*tcl_ZlibStreamGet) (Tcl_ZlibStream zshandle, Tcl_Obj * data, int count);
	int (*tcl_ZlibStreamClose) (Tcl_ZlibStream zshandle);
	int (*tcl_ZlibStreamReset) (Tcl_ZlibStream zshandle);
	void (*tcl_SetStartupScript) (Tcl_Obj * path, const char *encoding);
	Tcl_Obj *(*tcl_GetStartupScript) (const char **encodingPtr);
	int (*tcl_CloseEx) (Tcl_Interp * interp, Tcl_Channel chan, int flags);
	int (*tcl_NRExprObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, Tcl_Obj * resultPtr);
	int (*tcl_NRSubstObj) (Tcl_Interp * interp, Tcl_Obj * objPtr, int flags);
	int (*tcl_LoadFile) (Tcl_Interp * interp, Tcl_Obj * pathPtr, const char *const symv[], int flags, void *procPtrs, Tcl_LoadHandle * handlePtr);
	void *(*tcl_FindSymbol) (Tcl_Interp * interp, Tcl_LoadHandle handle, const char *symbol);
	int (*tcl_FSUnloadFile) (Tcl_Interp * interp, Tcl_LoadHandle handlePtr);
	void (*tcl_ZlibStreamSetCompressionDictionary) (Tcl_ZlibStream zhandle, Tcl_Obj * compressionDictionaryObj);
} TclStubs;
extern const TclStubs *tclStubsPtr;
// /usr/include/tclPlatDecls.h

typedef struct TclPlatStubs {
	int magic;
	void *hooks;
} TclPlatStubs;
extern const TclPlatStubs *tclPlatStubsPtr;
// /usr/include/tcl.h

extern Tcl_AppInitProc Tcl_AppInit;
#define BUFSIZ _IO_BUFSIZ
#define CONST const
#define CONST84 const
#define CONST84_RETURN const
#define CONST86 CONST84
#define CRTIMPORT
#define DLLEXPORT
#define DLLIMPORT
#define EOF (-1)
#define EXTERN extern TCL_STORAGE_CLASS
#define INLINE
#define JOIN(a, b) JOIN1 ( a , b )
#define JOIN1(a, b) a ## b
#define MP_DIGIT_DECLARED
#define MP_INT_DECLARED
#define NULL ( ( void * ) 0 )
#define NUM_STATIC_TOKENS (20)
#define P_tmpdir "/tmp"
#define SEEK_CUR (1)
#define SEEK_END (2)
#define SEEK_SET (0)
#define STRINGIFY(x) STRINGIFY1 ( x )
#define STRINGIFY1(x) # x
#define TCL_ALLOW_INLINE_COMPILATION (131072)
#define TCL_ALL_EVENTS (-3)
#define TCL_ALPHA_RELEASE (0)
#define TCL_APPEND_VALUE (4)
#define TCL_ARGV_AUTO_HELP { TCL_ARGV_HELP , "-help" , NULL , NULL , "Print summary of command-line options and abort" , NULL }
#define TCL_ARGV_AUTO_REST { TCL_ARGV_REST , "--" , NULL , NULL , "Marks the end of the options" , NULL }
#define TCL_ARGV_CONSTANT (15)
#define TCL_ARGV_END (23)
#define TCL_ARGV_FLOAT (19)
#define TCL_ARGV_FUNC (20)
#define TCL_ARGV_GENFUNC (21)
#define TCL_ARGV_HELP (22)
#define TCL_ARGV_INT (16)
#define TCL_ARGV_REST (18)
#define TCL_ARGV_STRING (17)
#define TCL_ARGV_TABLE_END { TCL_ARGV_END , NULL , NULL , NULL , NULL , NULL }
#define TCL_BETA_RELEASE (1)
#define TCL_BREAK (3)
#define TCL_CANCEL_UNWIND (1048576)
#define TCL_CHANNEL_THREAD_INSERT (0)
#define TCL_CHANNEL_THREAD_REMOVE (1)
#define TCL_CHANNEL_VERSION_1 ( ( Tcl_ChannelTypeVersion ) 0x1 )
#define TCL_CHANNEL_VERSION_2 ( ( Tcl_ChannelTypeVersion ) 0x2 )
#define TCL_CHANNEL_VERSION_3 ( ( Tcl_ChannelTypeVersion ) 0x3 )
#define TCL_CHANNEL_VERSION_4 ( ( Tcl_ChannelTypeVersion ) 0x4 )
#define TCL_CHANNEL_VERSION_5 ( ( Tcl_ChannelTypeVersion ) 0x5 )
#define TCL_CLOSE2PROC ( ( Tcl_DriverCloseProc * ) 1 )
#define TCL_CLOSE_READ (2)
#define TCL_CLOSE_WRITE (4)
#define TCL_CONTINUE (4)
#define TCL_CONVERT_MULTIBYTE (-1)
#define TCL_CONVERT_NOSPACE (-4)
#define TCL_CONVERT_SYNTAX (-2)
#define TCL_CONVERT_UNKNOWN (-3)
#define TCL_CREATE_HARD_LINK (2)
#define TCL_CREATE_SYMBOLIC_LINK (1)
#define TCL_CUSTOM_PTR_KEYS (-1)
#define TCL_CUSTOM_TYPE_KEYS (-2)
#define TCL_DECLARE_MUTEX(name)
#define TCL_DEPRECATED_API(msg)
#define TCL_DONT_QUOTE_HASH (8)
#define TCL_DONT_USE_BRACES (1)
#define TCL_DONT_WAIT (2)
#define TCL_DOUBLE_SPACE (27)
#define TCL_DSTRING_STATIC_SIZE (200)
#define TCL_DYNAMIC ( ( Tcl_FreeProc * ) 3 )
#define TCL_ENCODING_CHAR_LIMIT (16)
#define TCL_ENCODING_END (2)
#define TCL_ENCODING_NO_TERMINATE (8)
#define TCL_ENCODING_START (1)
#define TCL_ENCODING_STOPONERROR (4)
#define TCL_ENFORCE_MODE (16)
#define TCL_ENSEMBLE_PREFIX (2)
#define TCL_ERROR (1)
#define TCL_EVAL_DIRECT (262144)
#define TCL_EVAL_GLOBAL (131072)
#define TCL_EVAL_INVOKE (524288)
#define TCL_EVAL_NOERR (2097152)
#define TCL_EXACT (1)
#define TCL_EXCEPTION (8)
#define TCL_FILESYSTEM_VERSION_1 ( ( Tcl_FSVersion ) 0x1 )
#define TCL_FILE_EVENTS (8)
#define TCL_FINAL_RELEASE (2)
#define TCL_FORMAT_PRINTF(a, b)
#define TCL_GLOBAL_ONLY (1)
#define TCL_GLOB_PERM_HIDDEN (2)
#define TCL_GLOB_PERM_R (4)
#define TCL_GLOB_PERM_RONLY (1)
#define TCL_GLOB_PERM_W (8)
#define TCL_GLOB_PERM_X (16)
#define TCL_GLOB_TYPE_BLOCK (1)
#define TCL_GLOB_TYPE_CHAR (2)
#define TCL_GLOB_TYPE_DIR (4)
#define TCL_GLOB_TYPE_FILE (16)
#define TCL_GLOB_TYPE_LINK (32)
#define TCL_GLOB_TYPE_MOUNT (128)
#define TCL_GLOB_TYPE_PIPE (8)
#define TCL_GLOB_TYPE_SOCK (64)
#define TCL_HASH_KEY_RANDOMIZE_HASH (1)
#define TCL_HASH_KEY_STORE_HASH (1)
#define TCL_HASH_KEY_SYSTEM_HASH (2)
#define TCL_HASH_KEY_TYPE_VERSION (1)
#define TCL_IDLE_EVENTS (32)
#define TCL_INTEGER_SPACE (24)
#define TCL_INTERP_DESTROYED (256)
#define TCL_LEAVE_ERR_MSG (512)
#define TCL_LIMIT_COMMANDS (1)
#define TCL_LIMIT_TIME (2)
#define TCL_LINK_BOOLEAN (3)
#define TCL_LINK_CHAR (6)
#define TCL_LINK_DOUBLE (2)
#define TCL_LINK_FLOAT (13)
#define TCL_LINK_INT (1)
#define TCL_LINK_LONG (11)
#define TCL_LINK_READ_ONLY (128)
#define TCL_LINK_SHORT (8)
#define TCL_LINK_STRING (4)
#define TCL_LINK_UCHAR (7)
#define TCL_LINK_UINT (10)
#define TCL_LINK_ULONG (12)
#define TCL_LINK_USHORT (9)
#define TCL_LINK_WIDE_INT (5)
#define TCL_LINK_WIDE_UINT (14)
#define TCL_LIST_ELEMENT (8)
#define TCL_LL_MODIFIER "ll"
#define TCL_LOAD_GLOBAL (1)
#define TCL_LOAD_LAZY (2)
#define TCL_MAJOR_VERSION (8)
#define TCL_MATCH_NOCASE (1)
#define TCL_MAX_PREC (17)
#define TCL_MINOR_VERSION (6)
#define TCL_MODE_BLOCKING (0)
#define TCL_MODE_NONBLOCKING (1)
#define TCL_NAMESPACE_ONLY (2)
#define TCL_NORETURN
#define TCL_NORETURN1
#define TCL_NO_EVAL (65536)
#define TCL_OK (0)
#define TCL_ONE_WORD_KEYS (1)
#define TCL_PARSE_BAD_NUMBER (9)
#define TCL_PARSE_BRACE_EXTRA (2)
#define TCL_PARSE_MISSING_BRACE (3)
#define TCL_PARSE_MISSING_BRACKET (4)
#define TCL_PARSE_MISSING_PAREN (5)
#define TCL_PARSE_MISSING_QUOTE (6)
#define TCL_PARSE_MISSING_VAR_BRACE (7)
#define TCL_PARSE_PART1 (1024)
#define TCL_PARSE_QUOTE_EXTRA (1)
#define TCL_PARSE_SUCCESS (0)
#define TCL_PARSE_SYNTAX (8)
#define TCL_PATCH_LEVEL "8.6.5"
#define TCL_READABLE (2)
#define TCL_REG_ADVANCED (3)
#define TCL_REG_ADVF (2)
#define TCL_REG_BASIC (0)
#define TCL_REG_CANMATCH (512)
#define TCL_REG_EXPANDED (32)
#define TCL_REG_EXTENDED (1)
#define TCL_REG_NEWLINE (192)
#define TCL_REG_NLANCH (128)
#define TCL_REG_NLSTOP (64)
#define TCL_REG_NOCASE (8)
#define TCL_REG_NOSUB (16)
#define TCL_REG_NOTBOL (1)
#define TCL_REG_NOTEOL (2)
#define TCL_REG_QUOTE (4)
#define TCL_RELEASE_LEVEL TCL_FINAL_RELEASE
#define TCL_RELEASE_SERIAL (5)
#define TCL_RESULT_SIZE (200)
#define TCL_RETURN (2)
#define TCL_SERVICE_ALL (1)
#define TCL_SERVICE_NONE (0)
#define TCL_SMALL_HASH_TABLE (4)
#define TCL_STATIC ( ( Tcl_FreeProc * ) 0 )
#define TCL_STDERR (8)
#define TCL_STDIN (2)
#define TCL_STDOUT (4)
#define TCL_STORAGE_CLASS DLLIMPORT
#define TCL_STRING_KEYS (0)
#define TCL_STUB_MAGIC ( ( int ) 0xFCA3BACF )
#define TCL_SUBST_ALL (7)
#define TCL_SUBST_BACKSLASHES (4)
#define TCL_SUBST_COMMANDS (1)
#define TCL_SUBST_VARIABLES (2)
#define TCL_THREAD_CREATE_RETURN
#define TCL_THREAD_JOINABLE (1)
#define TCL_THREAD_NOFLAGS (0)
#define TCL_THREAD_STACK_DEFAULT (0)
#define TCL_TIMER_EVENTS (16)
#define TCL_TOKEN_BS (8)
#define TCL_TOKEN_COMMAND (16)
#define TCL_TOKEN_EXPAND_WORD (256)
#define TCL_TOKEN_OPERATOR (128)
#define TCL_TOKEN_SIMPLE_WORD (2)
#define TCL_TOKEN_SUB_EXPR (64)
#define TCL_TOKEN_TEXT (4)
#define TCL_TOKEN_VARIABLE (32)
#define TCL_TOKEN_WORD (1)
#define TCL_TRACE_ARRAY (2048)
#define TCL_TRACE_DELETE (16384)
#define TCL_TRACE_DESTROYED (128)
#define TCL_TRACE_OLD_STYLE (4096)
#define TCL_TRACE_READS (16)
#define TCL_TRACE_RENAME (8192)
#define TCL_TRACE_RESULT_DYNAMIC (32768)
#define TCL_TRACE_RESULT_OBJECT (65536)
#define TCL_TRACE_UNSETS (64)
#define TCL_TRACE_WRITES (32)
#define TCL_UNLOAD_DETACH_FROM_INTERPRETER (1)
#define TCL_UNLOAD_DETACH_FROM_PROCESS (2)
#define TCL_UTF_MAX (3)
#define TCL_VARARGS(type, name) ( type name , ... )
#define TCL_VARARGS_DEF(type, name) ( type name , ... )
#define TCL_VARARGS_START(type, name, list) ( va_start ( list , name ) , name )
#define TCL_VERSION "8.6"
#define TCL_VOLATILE ( ( Tcl_FreeProc * ) 1 )
#define TCL_WIDE_INT_TYPE long long
#define TCL_WINDOW_EVENTS (4)
#define TCL_WRITABLE (4)
#define TCL_ZLIB_COMPRESS_BEST (9)
#define TCL_ZLIB_COMPRESS_DEFAULT (-1)
#define TCL_ZLIB_COMPRESS_FAST (1)
#define TCL_ZLIB_COMPRESS_NONE (0)
#define TCL_ZLIB_FINALIZE (4)
#define TCL_ZLIB_FLUSH (2)
#define TCL_ZLIB_FORMAT_AUTO (8)
#define TCL_ZLIB_FORMAT_GZIP (4)
#define TCL_ZLIB_FORMAT_RAW (1)
#define TCL_ZLIB_FORMAT_ZLIB (2)
#define TCL_ZLIB_FULLFLUSH (3)
#define TCL_ZLIB_NO_FLUSH (0)
#define TCL_ZLIB_STREAM_DEFLATE (16)
#define TCL_ZLIB_STREAM_INFLATE (32)
#define Tcl_Ckalloc Tcl_Alloc
#define Tcl_Ckfree Tcl_Free
#define Tcl_Ckrealloc Tcl_Realloc
#define Tcl_ConditionFinalize(condPtr)
#define Tcl_ConditionNotify(condPtr)
#define Tcl_ConditionWait(condPtr, mutexPtr, timePtr)
#define Tcl_CreateHashEntry(tablePtr, key, newPtr) ( * ( ( tablePtr ) -> createProc ) ) ( tablePtr , ( const char * ) ( key ) , newPtr )
#define Tcl_DStringLength(dsPtr) ( ( dsPtr ) -> length )
#define Tcl_DStringTrunc Tcl_DStringSetLength
#define Tcl_DStringValue(dsPtr) ( ( dsPtr ) -> string )
#define Tcl_DbNewBooleanObj(boolValue, file, line) Tcl_DbNewLongObj ( ( boolValue ) != 0 , file , line )
#define Tcl_DecrRefCount(objPtr) do { Tcl_Obj * _objPtr = ( objPtr ) ; if ( ( _objPtr ) -> refCount -- <= 1 ) { TclFreeObj ( _objPtr ) ; } } while ( 0 )
#define Tcl_DoubleAsWide(val) ( ( Tcl_WideInt ) ( ( double ) ( val ) ) )
#define Tcl_DumpActiveMemory(x)
#define Tcl_EvalObj(interp, objPtr) Tcl_EvalObjEx ( ( interp ) , ( objPtr ) , 0 )
#define Tcl_FindHashEntry(tablePtr, key) ( * ( ( tablePtr ) -> findProc ) ) ( tablePtr , ( const char * ) ( key ) )
#define Tcl_GetHashKey(tablePtr, h) ( ( void * ) ( ( ( tablePtr ) -> keyType == TCL_ONE_WORD_KEYS || ( tablePtr ) -> keyType == TCL_CUSTOM_PTR_KEYS ) ? ( h ) -> key . oneWordValue : ( h ) -> key . string ) )
#define Tcl_GetHashValue(h) ( ( h ) -> clientData )
#define Tcl_GetIndexFromObj(interp, objPtr, tablePtr, msg, flags, indexPtr) Tcl_GetIndexFromObjStruct ( interp , objPtr , tablePtr , sizeof ( char * ) , msg , flags , indexPtr )
#define Tcl_GetVar(interp, varName, flags) Tcl_GetVar2 ( interp , varName , NULL , flags )
#define Tcl_GlobalEvalObj(interp, objPtr) Tcl_EvalObjEx ( ( interp ) , ( objPtr ) , TCL_EVAL_GLOBAL )
#define Tcl_IncrRefCount(objPtr) ++ ( objPtr ) -> refCount
#define Tcl_InitMemory(x)
#define Tcl_InitStubs(interp, version, exact) Tcl_PkgInitStubsCheck ( interp , version , exact )
#define Tcl_IsShared(objPtr) ( ( objPtr ) -> refCount > 1 )
#define Tcl_LongAsWide(val) ( ( Tcl_WideInt ) ( ( long ) ( val ) ) )
#define Tcl_Main(argc, argv, proc) Tcl_MainEx ( argc , argv , proc , ( ( Tcl_CreateInterp ) ( ) ) )
#define Tcl_MutexFinalize(mutexPtr)
#define Tcl_MutexLock(mutexPtr)
#define Tcl_MutexUnlock(mutexPtr)
#define Tcl_NewBooleanObj(boolValue) Tcl_NewIntObj ( ( boolValue ) != 0 )
#define Tcl_PkgPresent(interp, name, version, exact) Tcl_PkgPresentEx ( interp , name , version , exact , NULL )
#define Tcl_PkgProvide(interp, name, version) Tcl_PkgProvideEx ( interp , name , version , NULL )
#define Tcl_PkgRequire(interp, name, version, exact) Tcl_PkgRequireEx ( interp , name , version , exact , NULL )
#define Tcl_Return Tcl_SetResult
#define Tcl_SetBooleanObj(objPtr, boolValue) Tcl_SetIntObj ( ( objPtr ) , ( boolValue ) != 0 )
#define Tcl_SetHashValue(h, value) ( ( h ) -> clientData = ( ClientData ) ( value ) )
#define Tcl_SetVar(interp, varName, newValue, flags) Tcl_SetVar2 ( interp , varName , NULL , newValue , flags )
#define Tcl_ThreadCreateType void
#define Tcl_TildeSubst Tcl_TranslateFileName
#define Tcl_TraceVar(interp, varName, flags, proc, clientData) Tcl_TraceVar2 ( interp , varName , NULL , flags , proc , clientData )
#define Tcl_UnsetVar(interp, varName, flags) Tcl_UnsetVar2 ( interp , varName , NULL , flags )
#define Tcl_UntraceVar(interp, varName, flags, proc, clientData) Tcl_UntraceVar2 ( interp , varName , NULL , flags , proc , clientData )
#define Tcl_UpVar(interp, frameName, varName, localName, flags) Tcl_UpVar2 ( interp , frameName , varName , NULL , localName , flags )
#define Tcl_ValidateAllMemory(x, y)
#define Tcl_VarTraceInfo(interp, varName, flags, proc, prevClientData) Tcl_VarTraceInfo2 ( interp , varName , NULL , flags , proc , prevClientData )
#define Tcl_WideAsDouble(val) ( ( double ) ( ( Tcl_WideInt ) ( val ) ) )
#define Tcl_WideAsLong(val) ( ( long ) ( ( Tcl_WideInt ) ( val ) ) )
#define VOID void
#define _ANSI_ARGS_(x) x
#define _ANSI_STDARG_H_
#define _BITS_TYPES_H (1)
#define _BSD_SIZE_T_
#define _BSD_SIZE_T_DEFINED_
#define _CLIENTDATA
#define _GCC_SIZE_T
#define _G_BUFSIZ (8192)
#define _G_HAVE_MMAP (1)
#define _G_HAVE_MREMAP (1)
#define _G_HAVE_ST_BLKSIZE defined ( _STATBUF_ST_BLKSIZE )
#define _G_IO_IO_FILE_VERSION (131073)
#define _G_config_h (1)
#define _G_va_list __gnuc_va_list
#define _IOFBF (0)
#define _IOLBF (1)
#define _IONBF (2)
#define _IOS_APPEND (8)
#define _IOS_ATEND (4)
#define _IOS_BIN (128)
#define _IOS_INPUT (1)
#define _IOS_NOCREATE (32)
#define _IOS_NOREPLACE (64)
#define _IOS_OUTPUT (2)
#define _IOS_TRUNC (16)
#define _IO_BAD_SEEN (16384)
#define _IO_BE(expr, res) ( expr )
#define _IO_BOOLALPHA (65536)
#define _IO_BUFSIZ _G_BUFSIZ
#define _IO_CURRENTLY_PUTTING (2048)
#define _IO_DEC (16)
#define _IO_DELETE_DONT_CLOSE (64)
#define _IO_DONT_CLOSE (32768)
#define _IO_EOF_SEEN (16)
#define _IO_ERR_SEEN (32)
#define _IO_FIXED (4096)
#define _IO_FLAGS2_MMAP (1)
#define _IO_FLAGS2_NOTCANCEL (2)
#define _IO_FLAGS2_USER_WBUF (8)
#define _IO_HAVE_ST_BLKSIZE _G_HAVE_ST_BLKSIZE
#define _IO_HEX (64)
#define _IO_INTERNAL (8)
#define _IO_IN_BACKUP (256)
#define _IO_IS_APPENDING (4096)
#define _IO_IS_FILEBUF (8192)
#define _IO_LEFT (2)
#define _IO_LINE_BUF (512)
#define _IO_LINKED (128)
#define _IO_MAGIC (4222418944u)
#define _IO_MAGIC_MASK (4294901760u)
#define _IO_NO_READS (4)
#define _IO_NO_WRITES (8)
#define _IO_OCT (32)
#define _IO_PENDING_OUTPUT_COUNT(_fp) ( ( _fp ) -> _IO_write_ptr - ( _fp ) -> _IO_write_base )
#define _IO_RIGHT (4)
#define _IO_SCIENTIFIC (2048)
#define _IO_SHOWBASE (128)
#define _IO_SHOWPOINT (256)
#define _IO_SHOWPOS (1024)
#define _IO_SKIPWS (1)
#define _IO_STDIO (16384)
#define _IO_STDIO_H
#define _IO_TIED_PUT_GET (1024)
#define _IO_UNBUFFERED (2)
#define _IO_UNIFIED_JUMPTABLES (1)
#define _IO_UNITBUF (8192)
#define _IO_UPPERCASE (512)
#define _IO_USER_BUF (1)
#define _IO_USER_LOCK (32768)
#define _IO_cleanup_region_end(_Doit)
#define _IO_cleanup_region_start(_fct, _fp)
#define _IO_feof_unlocked(__fp) ( ( ( __fp ) -> _flags & _IO_EOF_SEEN ) != 0 )
#define _IO_ferror_unlocked(__fp) ( ( ( __fp ) -> _flags & _IO_ERR_SEEN ) != 0 )
#define _IO_file_flags _flags
#define _IO_flockfile(_fp)
#define _IO_fpos64_t _G_fpos64_t
#define _IO_fpos_t _G_fpos_t
#define _IO_ftrylockfile(_fp)
#define _IO_funlockfile(_fp)
#define _IO_getc_unlocked(_fp) ( _IO_BE ( ( _fp ) -> _IO_read_ptr >= ( _fp ) -> _IO_read_end , 0 ) ? __uflow ( _fp ) : * ( unsigned char * ) ( _fp ) -> _IO_read_ptr ++ )
#define _IO_iconv_t _G_iconv_t
#define _IO_off64_t __off64_t
#define _IO_off_t __off_t
#define _IO_peekc(_fp) _IO_peekc_unlocked ( _fp )
#define _IO_peekc_unlocked(_fp) ( _IO_BE ( ( _fp ) -> _IO_read_ptr >= ( _fp ) -> _IO_read_end , 0 ) && __underflow ( _fp ) == EOF ? EOF : * ( unsigned char * ) ( _fp ) -> _IO_read_ptr )
#define _IO_pid_t __pid_t
#define _IO_putc_unlocked(_ch, _fp) ( _IO_BE ( ( _fp ) -> _IO_write_ptr >= ( _fp ) -> _IO_write_end , 0 ) ? __overflow ( _fp , ( unsigned char ) ( _ch ) ) : ( unsigned char ) ( * ( _fp ) -> _IO_write_ptr ++ = ( _ch ) ) )
#define _IO_size_t size_t
#define _IO_ssize_t __ssize_t
#define _IO_stderr ( ( _IO_FILE * ) ( & _IO_2_1_stderr_ ) )
#define _IO_stdin ( ( _IO_FILE * ) ( & _IO_2_1_stdin_ ) )
#define _IO_stdout ( ( _IO_FILE * ) ( & _IO_2_1_stdout_ ) )
#define _IO_uid_t __uid_t
#define _IO_va_list __gnuc_va_list
#define _IO_wint_t wint_t
#define _OLD_STDIO_MAGIC (4206624768u)
#define _SIZET_
#define _SIZE_T
#define _SIZE_T_
#define _SIZE_T_DECLARED
#define _SIZE_T_DEFINED
#define _SIZE_T_DEFINED_
#define _STDARG_H
#define _STDIO_H (1)
#define _STDIO_USES_IOSTREAM
#define _SYS_SIZE_T_H
#define _TCL
#define _TCLDECLS
#define _TCLPLATDECLS
#define _T_SIZE
#define _T_SIZE_
#define _VA_LIST
#define _VA_LIST_
#define _VA_LIST_DEFINED
#define _VA_LIST_T_H
#define __FILE_defined (1)
#define __GNUC_VA_LIST
#define __HAVE_COLUMN
#define __S16_TYPE short int
#define __S32_TYPE int
#define __S64_TYPE __quad_t
#define __SIZE_T
#define __SIZE_T__
#define __SLONG32_TYPE long int
#define __SLONGWORD_TYPE long int
#define __SQUAD_TYPE __quad_t
#define __SWORD_TYPE int
#define __U16_TYPE unsigned short int
#define __U32_TYPE unsigned int
#define __U64_TYPE __u_quad_t
#define __ULONG32_TYPE unsigned long int
#define __ULONGWORD_TYPE unsigned long int
#define __UQUAD_TYPE __u_quad_t
#define __UWORD_TYPE unsigned int
#define ____FILE_defined (1)
#define ____mbstate_t_defined (1)
#define ___int_size_t_h
#define __size_t
#define __size_t__
#define __va_copy(d, s) __builtin_va_copy ( d , s )
#define __va_list__
#define attemptckalloc(x) ( ( void * ) Tcl_AttemptAlloc ( ( unsigned ) ( x ) ) )
#define attemptckrealloc(x, y) ( ( void * ) Tcl_AttemptRealloc ( ( char * ) ( x ) , ( unsigned ) ( y ) ) )
#define ckalloc(x) ( ( void * ) Tcl_Alloc ( ( unsigned ) ( x ) ) )
#define ckfree(x) Tcl_Free ( ( char * ) ( x ) )
#define ckrealloc(x, y) ( ( void * ) Tcl_Realloc ( ( char * ) ( x ) , ( unsigned ) ( y ) ) )
#define fgetpos fgetpos64
#define fopen fopen64
#define freopen freopen64
#define fscanf __isoc99_fscanf
#define fseeko fseeko64
#define fsetpos fsetpos64
#define ftello ftello64
#define getc(_fp) _IO_getc ( _fp )
#define panic Tcl_Panic
#define panicVA Tcl_PanicVA
#define putc(_ch, _fp) _IO_putc ( _ch , _fp )
#define scanf __isoc99_scanf
#define sscanf __isoc99_sscanf
#define stderr stderr
#define stdin stdin
#define stdout stdout
#define tmpfile tmpfile64
#define va_arg(v, l) __builtin_va_arg ( v , l )
#define va_copy(d, s) __builtin_va_copy ( d , s )
#define va_end(v) __builtin_va_end ( v )
#define va_start(v, l) __builtin_va_start ( v , l )
#define vfscanf __isoc99_vfscanf
#define vscanf __isoc99_vscanf
#define vsscanf __isoc99_vsscanf
