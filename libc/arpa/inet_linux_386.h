// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// ----------------------------------------------------------------------------
//      /usr/include/stdint.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1997-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/i386-linux-gnu/sys/types.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/lib/gcc/i686-linux-gnu/5/include/stddef.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1989-2015 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/i386-linux-gnu/bits/uio.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1996-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/i386-linux-gnu/sys/uio.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/netinet/in.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/arpa/inet.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1997-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

typedef signed char int8_t;
typedef short int int16_t;
typedef int int32_t;
typedef long long int int64_t;
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long long int uint64_t;
typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;
typedef long long int int_least64_t;
typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned long long int uint_least64_t;
typedef signed char int_fast8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef long long int int_fast64_t;
typedef unsigned char uint_fast8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned long long int uint_fast64_t;
typedef int intptr_t;
typedef unsigned int uintptr_t;
typedef long long int intmax_t;
typedef unsigned long long int uintmax_t;
// /usr/include/i386-linux-gnu/bits/types.h

typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;
typedef signed long long int __int64_t;
typedef unsigned long long int __uint64_t;
typedef long long int __quad_t;
typedef unsigned long long int __u_quad_t;
typedef __u_quad_t __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef __u_quad_t __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long int __off_t;
typedef __quad_t __off64_t;
typedef int __pid_t;
typedef struct {
	int __val[2];
} __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef __u_quad_t __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef int __daddr_t;
typedef int __key_t;
typedef int __clockid_t;
typedef void *__timer_t;
typedef long int __blksize_t;
typedef long int __blkcnt_t;
typedef __quad_t __blkcnt64_t;
typedef unsigned long int __fsblkcnt_t;
typedef __u_quad_t __fsblkcnt64_t;
typedef unsigned long int __fsfilcnt_t;
typedef __u_quad_t __fsfilcnt64_t;
typedef int __fsword_t;
typedef int __ssize_t;
typedef long int __syscall_slong_t;
typedef unsigned long int __syscall_ulong_t;
typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;
typedef int __intptr_t;
typedef unsigned int __socklen_t;
// /usr/include/i386-linux-gnu/sys/types.h

typedef __loff_t loff_t;
typedef __ino64_t ino_t;
typedef __ino64_t ino64_t;
typedef __dev_t dev_t;
typedef __gid_t gid_t;
typedef __mode_t mode_t;
typedef __nlink_t nlink_t;
typedef __uid_t uid_t;
typedef __off64_t off_t;
typedef __off64_t off64_t;
typedef __pid_t pid_t;
typedef __id_t id_t;
typedef __ssize_t ssize_t;
typedef __key_t key_t;
typedef __useconds_t useconds_t;
typedef __suseconds_t suseconds_t;
// /usr/lib/gcc/i686-linux-gnu/5/include/stddef.h

typedef unsigned int size_t;
// /usr/include/i386-linux-gnu/sys/types.h

typedef unsigned char u_int8_t;
typedef unsigned short int u_int16_t;
typedef unsigned int u_int32_t;
typedef unsigned long long int u_int64_t;
typedef int register_t;
typedef __blksize_t blksize_t;
typedef __blkcnt64_t blkcnt_t;
typedef __fsblkcnt64_t fsblkcnt_t;
typedef __fsfilcnt64_t fsfilcnt_t;
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;
// /usr/include/i386-linux-gnu/bits/uio.h

struct iovec {
	void *iov_base;
	size_t iov_len;
};
// /usr/include/i386-linux-gnu/sys/uio.h

extern ssize_t readv(int __fd, const struct iovec *__iovec, int __count);
extern ssize_t writev(int __fd, const struct iovec *__iovec, int __count);
// /usr/include/i386-linux-gnu/bits/socket.h

typedef __socklen_t socklen_t;
// /usr/include/i386-linux-gnu/bits/sockaddr.h

typedef unsigned short int sa_family_t;
// /usr/include/i386-linux-gnu/bits/socket.h

struct sockaddr {
	sa_family_t sa_family;
	char sa_data[14];
};
struct sockaddr_storage {
	sa_family_t ss_family;
	char __ss_padding[122u];
	unsigned long int __ss_align;
};
enum { MSG_OOB = 1, MSG_PEEK = 2, MSG_DONTROUTE = 4, MSG_CTRUNC = 8, MSG_PROXY = 16, MSG_TRUNC = 32, MSG_DONTWAIT = 64, MSG_EOR = 128, MSG_WAITALL = 256, MSG_FIN = 512, MSG_SYN = 1024, MSG_CONFIRM = 2048, MSG_RST = 4096, MSG_ERRQUEUE = 8192, MSG_NOSIGNAL = 16384, MSG_MORE = 32768, MSG_WAITFORONE = 65536, MSG_FASTOPEN = 536870912, MSG_CMSG_CLOEXEC = 1073741824 };
struct msghdr {
	void *msg_name;
	socklen_t msg_namelen;
	struct iovec *msg_iov;
	size_t msg_iovlen;
	void *msg_control;
	size_t msg_controllen;
	int msg_flags;
};
struct cmsghdr {
	size_t cmsg_len;
	int cmsg_level;
	int cmsg_type;
	unsigned char __cmsg_data[];
};
extern struct cmsghdr *__cmsg_nxthdr(struct msghdr *__mhdr, struct cmsghdr *__cmsg);
enum { SCM_RIGHTS = 1 };
struct linger {
	int l_onoff;
	int l_linger;
};
// /usr/include/i386-linux-gnu/sys/socket.h

enum { SHUT_RD = 0, SHUT_WR, SHUT_RDWR };
extern int socket(int __domain, int __type, int __protocol);
extern int socketpair(int __domain, int __type, int __protocol, int __fds[2]);
extern int bind(int __fd, const struct sockaddr *__addr, socklen_t __len);
extern int getsockname(int __fd, struct sockaddr *__addr, socklen_t * __len);
extern int connect(int __fd, const struct sockaddr *__addr, socklen_t __len);
extern int getpeername(int __fd, struct sockaddr *__addr, socklen_t * __len);
extern ssize_t send(int __fd, const void *__buf, size_t __n, int __flags);
extern ssize_t recv(int __fd, void *__buf, size_t __n, int __flags);
extern ssize_t sendto(int __fd, const void *__buf, size_t __n, int __flags, const struct sockaddr *__addr, socklen_t __addr_len);
extern ssize_t recvfrom(int __fd, void *__buf, size_t __n, int __flags, struct sockaddr *__addr, socklen_t * __addr_len);
extern ssize_t sendmsg(int __fd, const struct msghdr *__message, int __flags);
extern ssize_t recvmsg(int __fd, struct msghdr *__message, int __flags);
extern int getsockopt(int __fd, int __level, int __optname, void *__optval, socklen_t * __optlen);
extern int setsockopt(int __fd, int __level, int __optname, const void *__optval, socklen_t __optlen);
extern int listen(int __fd, int __n);
extern int accept(int __fd, struct sockaddr *__addr, socklen_t * __addr_len);
extern int shutdown(int __fd, int __how);
// /usr/include/netinet/in.h

typedef uint32_t in_addr_t;
struct in_addr {
	in_addr_t s_addr;
};
enum { IPPROTO_IP = 0, IPPROTO_ICMP = 1, IPPROTO_IGMP = 2, IPPROTO_IPIP = 4, IPPROTO_TCP = 6, IPPROTO_EGP = 8, IPPROTO_PUP = 12, IPPROTO_UDP = 17, IPPROTO_IDP = 22, IPPROTO_TP = 29, IPPROTO_DCCP = 33, IPPROTO_IPV6 = 41, IPPROTO_RSVP = 46, IPPROTO_GRE = 47, IPPROTO_ESP = 50, IPPROTO_AH = 51, IPPROTO_MTP = 92, IPPROTO_BEETPH = 94, IPPROTO_ENCAP = 98, IPPROTO_PIM = 103, IPPROTO_COMP = 108, IPPROTO_SCTP = 132, IPPROTO_UDPLITE = 136, IPPROTO_MPLS = 137, IPPROTO_RAW = 255, IPPROTO_MAX };
enum { IPPROTO_HOPOPTS = 0, IPPROTO_ROUTING = 43, IPPROTO_FRAGMENT = 44, IPPROTO_ICMPV6 = 58, IPPROTO_NONE = 59, IPPROTO_DSTOPTS = 60, IPPROTO_MH = 135 };
typedef uint16_t in_port_t;
enum { IPPORT_ECHO = 7, IPPORT_DISCARD = 9, IPPORT_SYSTAT = 11, IPPORT_DAYTIME = 13, IPPORT_NETSTAT = 15, IPPORT_FTP = 21, IPPORT_TELNET = 23, IPPORT_SMTP = 25, IPPORT_TIMESERVER = 37, IPPORT_NAMESERVER = 42, IPPORT_WHOIS = 43, IPPORT_MTP = 57, IPPORT_TFTP = 69, IPPORT_RJE = 77, IPPORT_FINGER = 79, IPPORT_TTYLINK = 87, IPPORT_SUPDUP = 95, IPPORT_EXECSERVER = 512, IPPORT_LOGINSERVER = 513, IPPORT_CMDSERVER = 514, IPPORT_EFSSERVER = 520, IPPORT_BIFFUDP = 512, IPPORT_WHOSERVER = 513, IPPORT_ROUTESERVER = 520, IPPORT_RESERVED = 1024, IPPORT_USERRESERVED = 5000 };
struct in6_addr {
	union {
		uint8_t __u6_addr8[16];
	} __in6_u;
};
extern const struct in6_addr in6addr_any;
extern const struct in6_addr in6addr_loopback;
struct sockaddr_in {
	sa_family_t sin_family;
	in_port_t sin_port;
	struct in_addr sin_addr;
	unsigned char sin_zero[8u];
};
struct sockaddr_in6 {
	sa_family_t sin6_family;
	in_port_t sin6_port;
	uint32_t sin6_flowinfo;
	struct in6_addr sin6_addr;
	uint32_t sin6_scope_id;
};
struct ipv6_mreq {
	struct in6_addr ipv6mr_multiaddr;
	unsigned int ipv6mr_interface;
};
extern uint32_t ntohl(uint32_t __netlong);
extern uint16_t ntohs(uint16_t __netshort);
extern uint32_t htonl(uint32_t __hostlong);
extern uint16_t htons(uint16_t __hostshort);
// /usr/include/arpa/inet.h

extern in_addr_t inet_addr(const char *__cp);
extern in_addr_t inet_lnaof(struct in_addr __in);
extern struct in_addr inet_makeaddr(in_addr_t __net, in_addr_t __host);
extern in_addr_t inet_netof(struct in_addr __in);
extern in_addr_t inet_network(const char *__cp);
extern char *inet_ntoa(struct in_addr __in);
extern int inet_pton(int __af, const char *__cp, void *__buf);
extern const char *inet_ntop(int __af, const void *__cp, char *__buf, socklen_t __len);
#define AF_ALG PF_ALG
#define AF_APPLETALK PF_APPLETALK
#define AF_ASH PF_ASH
#define AF_ATMPVC PF_ATMPVC
#define AF_ATMSVC PF_ATMSVC
#define AF_AX25 PF_AX25
#define AF_BLUETOOTH PF_BLUETOOTH
#define AF_BRIDGE PF_BRIDGE
#define AF_CAIF PF_CAIF
#define AF_CAN PF_CAN
#define AF_DECnet PF_DECnet
#define AF_ECONET PF_ECONET
#define AF_FILE PF_FILE
#define AF_IB PF_IB
#define AF_IEEE802154 PF_IEEE802154
#define AF_INET PF_INET
#define AF_INET6 PF_INET6
#define AF_IPX PF_IPX
#define AF_IRDA PF_IRDA
#define AF_ISDN PF_ISDN
#define AF_IUCV PF_IUCV
#define AF_KEY PF_KEY
#define AF_LLC PF_LLC
#define AF_LOCAL PF_LOCAL
#define AF_MAX PF_MAX
#define AF_MPLS PF_MPLS
#define AF_NETBEUI PF_NETBEUI
#define AF_NETLINK PF_NETLINK
#define AF_NETROM PF_NETROM
#define AF_NFC PF_NFC
#define AF_PACKET PF_PACKET
#define AF_PHONET PF_PHONET
#define AF_PPPOX PF_PPPOX
#define AF_RDS PF_RDS
#define AF_ROSE PF_ROSE
#define AF_ROUTE PF_ROUTE
#define AF_RXRPC PF_RXRPC
#define AF_SECURITY PF_SECURITY
#define AF_SNA PF_SNA
#define AF_TIPC PF_TIPC
#define AF_UNIX PF_UNIX
#define AF_UNSPEC PF_UNSPEC
#define AF_VSOCK PF_VSOCK
#define AF_WANPIPE PF_WANPIPE
#define AF_X25 PF_X25
#define CMSG_ALIGN(len) ( ( ( len ) + sizeof ( size_t ) - 1 ) & ( size_t ) ~ ( sizeof ( size_t ) - 1 ) )
#define CMSG_DATA(cmsg) ( ( cmsg ) -> __cmsg_data )
#define CMSG_FIRSTHDR(mhdr) ( ( size_t ) ( mhdr ) -> msg_controllen >= sizeof ( struct cmsghdr ) ? ( struct cmsghdr * ) ( mhdr ) -> msg_control : ( struct cmsghdr * ) 0 )
#define CMSG_LEN(len) ( CMSG_ALIGN ( sizeof ( struct cmsghdr ) ) + ( len ) )
#define CMSG_NXTHDR(mhdr, cmsg) __cmsg_nxthdr ( mhdr , cmsg )
#define CMSG_SPACE(len) ( CMSG_ALIGN ( len ) + CMSG_ALIGN ( sizeof ( struct cmsghdr ) ) )
#define IN6ADDR_ANY_INIT { { { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 } } }
#define IN6ADDR_LOOPBACK_INIT { { { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 } } }
#define IN6_ARE_ADDR_EQUAL(a, b) ( ( ( ( const uint32_t * ) ( a ) ) [ 0 ] == ( ( const uint32_t * ) ( b ) ) [ 0 ] ) && ( ( ( const uint32_t * ) ( a ) ) [ 1 ] == ( ( const uint32_t * ) ( b ) ) [ 1 ] ) && ( ( ( const uint32_t * ) ( a ) ) [ 2 ] == ( ( const uint32_t * ) ( b ) ) [ 2 ] ) && ( ( ( const uint32_t * ) ( a ) ) [ 3 ] == ( ( const uint32_t * ) ( b ) ) [ 3 ] ) )
#define IN6_IS_ADDR_LINKLOCAL(a) ( ( ( ( const uint32_t * ) ( a ) ) [ 0 ] & htonl ( 0xffc00000 ) ) == htonl ( 0xfe800000 ) )
#define IN6_IS_ADDR_LOOPBACK(a) ( ( ( const uint32_t * ) ( a ) ) [ 0 ] == 0 && ( ( const uint32_t * ) ( a ) ) [ 1 ] == 0 && ( ( const uint32_t * ) ( a ) ) [ 2 ] == 0 && ( ( const uint32_t * ) ( a ) ) [ 3 ] == htonl ( 1 ) )
#define IN6_IS_ADDR_MC_GLOBAL(a) ( IN6_IS_ADDR_MULTICAST ( a ) && ( ( ( ( const uint8_t * ) ( a ) ) [ 1 ] & 0xf ) == 0xe ) )
#define IN6_IS_ADDR_MC_LINKLOCAL(a) ( IN6_IS_ADDR_MULTICAST ( a ) && ( ( ( ( const uint8_t * ) ( a ) ) [ 1 ] & 0xf ) == 0x2 ) )
#define IN6_IS_ADDR_MC_NODELOCAL(a) ( IN6_IS_ADDR_MULTICAST ( a ) && ( ( ( ( const uint8_t * ) ( a ) ) [ 1 ] & 0xf ) == 0x1 ) )
#define IN6_IS_ADDR_MC_ORGLOCAL(a) ( IN6_IS_ADDR_MULTICAST ( a ) && ( ( ( ( const uint8_t * ) ( a ) ) [ 1 ] & 0xf ) == 0x8 ) )
#define IN6_IS_ADDR_MC_SITELOCAL(a) ( IN6_IS_ADDR_MULTICAST ( a ) && ( ( ( ( const uint8_t * ) ( a ) ) [ 1 ] & 0xf ) == 0x5 ) )
#define IN6_IS_ADDR_MULTICAST(a) ( ( ( const uint8_t * ) ( a ) ) [ 0 ] == 0xff )
#define IN6_IS_ADDR_SITELOCAL(a) ( ( ( ( const uint32_t * ) ( a ) ) [ 0 ] & htonl ( 0xffc00000 ) ) == htonl ( 0xfec00000 ) )
#define IN6_IS_ADDR_UNSPECIFIED(a) ( ( ( const uint32_t * ) ( a ) ) [ 0 ] == 0 && ( ( const uint32_t * ) ( a ) ) [ 1 ] == 0 && ( ( const uint32_t * ) ( a ) ) [ 2 ] == 0 && ( ( const uint32_t * ) ( a ) ) [ 3 ] == 0 )
#define IN6_IS_ADDR_V4COMPAT(a) ( ( ( ( const uint32_t * ) ( a ) ) [ 0 ] == 0 ) && ( ( ( const uint32_t * ) ( a ) ) [ 1 ] == 0 ) && ( ( ( const uint32_t * ) ( a ) ) [ 2 ] == 0 ) && ( ntohl ( ( ( const uint32_t * ) ( a ) ) [ 3 ] ) > 1 ) )
#define IN6_IS_ADDR_V4MAPPED(a) ( ( ( ( const uint32_t * ) ( a ) ) [ 0 ] == 0 ) && ( ( ( const uint32_t * ) ( a ) ) [ 1 ] == 0 ) && ( ( ( const uint32_t * ) ( a ) ) [ 2 ] == htonl ( 0xffff ) ) )
#define INADDR_ALLHOSTS_GROUP ( ( in_addr_t ) 0xe0000001 )
#define INADDR_ALLRTRS_GROUP ( ( in_addr_t ) 0xe0000002 )
#define INADDR_ANY ( ( in_addr_t ) 0x00000000 )
#define INADDR_BROADCAST ( ( in_addr_t ) 0xffffffff )
#define INADDR_LOOPBACK ( ( in_addr_t ) 0x7f000001 )
#define INADDR_MAX_LOCAL_GROUP ( ( in_addr_t ) 0xe00000ff )
#define INADDR_NONE ( ( in_addr_t ) 0xffffffff )
#define INADDR_UNSPEC_GROUP ( ( in_addr_t ) 0xe0000000 )
#define INET6_ADDRSTRLEN (46)
#define INET_ADDRSTRLEN (16)
#define INT16_C(c) c
#define INT16_MAX (32767)
#define INT16_MIN (-32768)
#define INT32_C(c) c
#define INT32_MAX (2147483647)
#define INT32_MIN (-2147483648)
#define INT64_C(c) c ## LL
#define INT64_MAX (9223372036854775807ll)
#define INT64_MIN (-9223372036854775808ll)
#define INT8_C(c) c
#define INT8_MAX (127)
#define INT8_MIN (-128)
#define INTMAX_C(c) c ## LL
#define INTMAX_MAX (9223372036854775807ll)
#define INTMAX_MIN (-9223372036854775808ll)
#define INTPTR_MAX (2147483647)
#define INTPTR_MIN (-2147483648)
#define INT_FAST16_MAX (2147483647)
#define INT_FAST16_MIN (-2147483648)
#define INT_FAST32_MAX (2147483647)
#define INT_FAST32_MIN (-2147483648)
#define INT_FAST64_MAX (9223372036854775807ll)
#define INT_FAST64_MIN (-9223372036854775808ll)
#define INT_FAST8_MAX (127)
#define INT_FAST8_MIN (-128)
#define INT_LEAST16_MAX (32767)
#define INT_LEAST16_MIN (-32768)
#define INT_LEAST32_MAX (2147483647)
#define INT_LEAST32_MIN (-2147483648)
#define INT_LEAST64_MAX (9223372036854775807ll)
#define INT_LEAST64_MIN (-9223372036854775808ll)
#define INT_LEAST8_MAX (127)
#define INT_LEAST8_MIN (-128)
#define IN_BADCLASS(a) ( ( ( ( in_addr_t ) ( a ) ) & 0xf0000000 ) == 0xf0000000 )
#define IN_CLASSA(a) ( ( ( ( in_addr_t ) ( a ) ) & 0x80000000 ) == 0 )
#define IN_CLASSA_HOST (16777215u)
#define IN_CLASSA_MAX (128)
#define IN_CLASSA_NET (4278190080u)
#define IN_CLASSA_NSHIFT (24)
#define IN_CLASSB(a) ( ( ( ( in_addr_t ) ( a ) ) & 0xc0000000 ) == 0x80000000 )
#define IN_CLASSB_HOST (65535u)
#define IN_CLASSB_MAX (65536)
#define IN_CLASSB_NET (4294901760u)
#define IN_CLASSB_NSHIFT (16)
#define IN_CLASSC(a) ( ( ( ( in_addr_t ) ( a ) ) & 0xe0000000 ) == 0xc0000000 )
#define IN_CLASSC_HOST (255u)
#define IN_CLASSC_NET (4294967040u)
#define IN_CLASSC_NSHIFT (8)
#define IN_CLASSD(a) ( ( ( ( in_addr_t ) ( a ) ) & 0xf0000000 ) == 0xe0000000 )
#define IN_EXPERIMENTAL(a) ( ( ( ( in_addr_t ) ( a ) ) & 0xe0000000 ) == 0xe0000000 )
#define IN_LOOPBACKNET (127)
#define IN_MULTICAST(a) IN_CLASSD ( a )
#define IPPROTO_AH IPPROTO_AH
#define IPPROTO_BEETPH IPPROTO_BEETPH
#define IPPROTO_COMP IPPROTO_COMP
#define IPPROTO_DCCP IPPROTO_DCCP
#define IPPROTO_DSTOPTS IPPROTO_DSTOPTS
#define IPPROTO_EGP IPPROTO_EGP
#define IPPROTO_ENCAP IPPROTO_ENCAP
#define IPPROTO_ESP IPPROTO_ESP
#define IPPROTO_FRAGMENT IPPROTO_FRAGMENT
#define IPPROTO_GRE IPPROTO_GRE
#define IPPROTO_HOPOPTS IPPROTO_HOPOPTS
#define IPPROTO_ICMP IPPROTO_ICMP
#define IPPROTO_ICMPV6 IPPROTO_ICMPV6
#define IPPROTO_IDP IPPROTO_IDP
#define IPPROTO_IGMP IPPROTO_IGMP
#define IPPROTO_IP IPPROTO_IP
#define IPPROTO_IPIP IPPROTO_IPIP
#define IPPROTO_IPV6 IPPROTO_IPV6
#define IPPROTO_MH IPPROTO_MH
#define IPPROTO_MPLS IPPROTO_MPLS
#define IPPROTO_MTP IPPROTO_MTP
#define IPPROTO_NONE IPPROTO_NONE
#define IPPROTO_PIM IPPROTO_PIM
#define IPPROTO_PUP IPPROTO_PUP
#define IPPROTO_RAW IPPROTO_RAW
#define IPPROTO_ROUTING IPPROTO_ROUTING
#define IPPROTO_RSVP IPPROTO_RSVP
#define IPPROTO_SCTP IPPROTO_SCTP
#define IPPROTO_TCP IPPROTO_TCP
#define IPPROTO_TP IPPROTO_TP
#define IPPROTO_UDP IPPROTO_UDP
#define IPPROTO_UDPLITE IPPROTO_UDPLITE
#define MSG_CMSG_CLOEXEC MSG_CMSG_CLOEXEC
#define MSG_CONFIRM MSG_CONFIRM
#define MSG_CTRUNC MSG_CTRUNC
#define MSG_DONTROUTE MSG_DONTROUTE
#define MSG_DONTWAIT MSG_DONTWAIT
#define MSG_EOR MSG_EOR
#define MSG_ERRQUEUE MSG_ERRQUEUE
#define MSG_FASTOPEN MSG_FASTOPEN
#define MSG_FIN MSG_FIN
#define MSG_MORE MSG_MORE
#define MSG_NOSIGNAL MSG_NOSIGNAL
#define MSG_OOB MSG_OOB
#define MSG_PEEK MSG_PEEK
#define MSG_PROXY MSG_PROXY
#define MSG_RST MSG_RST
#define MSG_SYN MSG_SYN
#define MSG_TRUNC MSG_TRUNC
#define MSG_WAITALL MSG_WAITALL
#define MSG_WAITFORONE MSG_WAITFORONE
#define PF_ALG (38)
#define PF_APPLETALK (5)
#define PF_ASH (18)
#define PF_ATMPVC (8)
#define PF_ATMSVC (20)
#define PF_AX25 (3)
#define PF_BLUETOOTH (31)
#define PF_BRIDGE (7)
#define PF_CAIF (37)
#define PF_CAN (29)
#define PF_DECnet (12)
#define PF_ECONET (19)
#define PF_FILE PF_LOCAL
#define PF_IB (27)
#define PF_IEEE802154 (36)
#define PF_INET (2)
#define PF_INET6 (10)
#define PF_IPX (4)
#define PF_IRDA (23)
#define PF_ISDN (34)
#define PF_IUCV (32)
#define PF_KEY (15)
#define PF_LLC (26)
#define PF_LOCAL (1)
#define PF_MAX (41)
#define PF_MPLS (28)
#define PF_NETBEUI (13)
#define PF_NETLINK (16)
#define PF_NETROM (6)
#define PF_NFC (39)
#define PF_PACKET (17)
#define PF_PHONET (35)
#define PF_PPPOX (24)
#define PF_RDS (21)
#define PF_ROSE (11)
#define PF_ROUTE PF_NETLINK
#define PF_RXRPC (33)
#define PF_SECURITY (14)
#define PF_SNA (22)
#define PF_TIPC (30)
#define PF_UNIX PF_LOCAL
#define PF_UNSPEC (0)
#define PF_VSOCK (40)
#define PF_WANPIPE (25)
#define PF_X25 (9)
#define PTRDIFF_MAX (2147483647)
#define PTRDIFF_MIN (-2147483648)
#define SCM_RIGHTS SCM_RIGHTS
#define SHUT_RD SHUT_RD
#define SHUT_RDWR SHUT_RDWR
#define SHUT_WR SHUT_WR
#define SIG_ATOMIC_MAX (2147483647)
#define SIG_ATOMIC_MIN (-2147483648)
#define SIZE_MAX (4294967295u)
#define SOL_AAL (265)
#define SOL_ATM (264)
#define SOL_DECNET (261)
#define SOL_IRDA (266)
#define SOL_PACKET (263)
#define SOL_RAW (255)
#define SOL_X25 (262)
#define SOMAXCONN (128)
#define UINT16_C(c) c
#define UINT16_MAX (65535)
#define UINT32_C(c) c ## U
#define UINT32_MAX (4294967295u)
#define UINT64_C(c) c ## ULL
#define UINT64_MAX (18446744073709551615ull)
#define UINT8_C(c) c
#define UINT8_MAX (255)
#define UINTMAX_C(c) c ## ULL
#define UINTMAX_MAX (18446744073709551615ull)
#define UINTPTR_MAX (4294967295u)
#define UINT_FAST16_MAX (4294967295u)
#define UINT_FAST32_MAX (4294967295u)
#define UINT_FAST64_MAX (18446744073709551615ull)
#define UINT_FAST8_MAX (255)
#define UINT_LEAST16_MAX (65535)
#define UINT_LEAST32_MAX (4294967295u)
#define UINT_LEAST64_MAX (18446744073709551615ull)
#define UINT_LEAST8_MAX (255)
#define UIO_MAXIOV (1024)
#define WCHAR_MAX __WCHAR_MAX
#define WCHAR_MIN __WCHAR_MIN
#define WINT_MAX (4294967295u)
#define WINT_MIN (0u)
#define _ARPA_INET_H (1)
#define _BITS_SOCKADDR_H (1)
#define _BITS_TYPES_H (1)
#define _BITS_UIO_H (1)
#define _BSD_SIZE_T_
#define _BSD_SIZE_T_DEFINED_
#define _GCC_SIZE_T
#define _NETINET_IN_H (1)
#define _SIZET_
#define _SIZE_T
#define _SIZE_T_
#define _SIZE_T_DECLARED
#define _SIZE_T_DEFINED
#define _SIZE_T_DEFINED_
#define _SS_PADSIZE ( _SS_SIZE - __SOCKADDR_COMMON_SIZE - sizeof ( __ss_aligntype ) )
#define _SS_SIZE (128)
#define _STDINT_H (1)
#define _SYS_SIZE_T_H
#define _SYS_SOCKET_H (1)
#define _SYS_TYPES_H (1)
#define _SYS_UIO_H (1)
#define _T_SIZE
#define _T_SIZE_
#define __BITS_SOCKET_H
#define __BIT_TYPES_DEFINED__ (1)
#define __CONST_SOCKADDR_ARG const struct sockaddr *
#define __S16_TYPE short int
#define __S32_TYPE int
#define __S64_TYPE __quad_t
#define __SIZE_T
#define __SIZE_T__
#define __SLONG32_TYPE long int
#define __SLONGWORD_TYPE long int
#define __SOCKADDR_ARG struct sockaddr * __restrict
#define __SOCKADDR_COMMON(sa_prefix) sa_family_t sa_prefix ## family
#define __SOCKADDR_COMMON_SIZE ( sizeof ( unsigned short int ) )
#define __SQUAD_TYPE __quad_t
#define __SWORD_TYPE int
#define __U16_TYPE unsigned short int
#define __U32_TYPE unsigned int
#define __U64_TYPE __u_quad_t
#define __ULONG32_TYPE unsigned long int
#define __ULONGWORD_TYPE unsigned long int
#define __UQUAD_TYPE __u_quad_t
#define __UWORD_TYPE unsigned int
#define ___int_size_t_h
#define __blkcnt_t_defined
#define __blksize_t_defined
#define __dev_t_defined
#define __fsblkcnt_t_defined
#define __fsfilcnt_t_defined
#define __gid_t_defined
#define __id_t_defined
#define __ino64_t_defined
#define __ino_t_defined
#define __int8_t_defined
#define __intptr_t_defined
#define __key_t_defined
#define __mode_t_defined
#define __need_clockid_t
#define __nlink_t_defined
#define __off64_t_defined
#define __off_t_defined
#define __pid_t_defined
#define __size_t
#define __size_t__
#define __socklen_t_defined
#define __ss_aligntype unsigned long int
#define __ssize_t_defined
#define __suseconds_t_defined
#define __uid_t_defined
#define __uint32_t_defined
#define __useconds_t_defined
#define s6_addr __in6_u . __u6_addr8
