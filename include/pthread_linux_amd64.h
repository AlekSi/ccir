// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// source: /usr/include/pthread.h

#define _PTHREAD_H 1
enum { PTHREAD_CREATE_JOINABLE, PTHREAD_CREATE_DETACHED };
#define PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_JOINABLE
#define PTHREAD_CREATE_DETACHED PTHREAD_CREATE_DETACHED
enum { PTHREAD_MUTEX_TIMED_NP, PTHREAD_MUTEX_RECURSIVE_NP, PTHREAD_MUTEX_ERRORCHECK_NP, PTHREAD_MUTEX_ADAPTIVE_NP };
#define PTHREAD_MUTEX_INITIALIZER { { 0 , 0 , 0 , 0 , 0 , __PTHREAD_SPINS , { 0 , 0 } } }
enum { PTHREAD_INHERIT_SCHED, PTHREAD_EXPLICIT_SCHED };
#define PTHREAD_INHERIT_SCHED PTHREAD_INHERIT_SCHED
#define PTHREAD_EXPLICIT_SCHED PTHREAD_EXPLICIT_SCHED
enum { PTHREAD_SCOPE_SYSTEM, PTHREAD_SCOPE_PROCESS };
#define PTHREAD_SCOPE_SYSTEM PTHREAD_SCOPE_SYSTEM
#define PTHREAD_SCOPE_PROCESS PTHREAD_SCOPE_PROCESS
enum { PTHREAD_PROCESS_PRIVATE, PTHREAD_PROCESS_SHARED };
#define PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE
#define PTHREAD_PROCESS_SHARED PTHREAD_PROCESS_SHARED
#define PTHREAD_COND_INITIALIZER { { 0 , 0 , 0 , 0 , 0 , ( void * ) 0 , 0 , 0 } }
struct _pthread_cleanup_buffer {
	void (*__routine) (void *);
	void *__arg;
	int __canceltype;
	struct _pthread_cleanup_buffer *__prev;
};
enum { PTHREAD_CANCEL_ENABLE, PTHREAD_CANCEL_DISABLE };
#define PTHREAD_CANCEL_ENABLE PTHREAD_CANCEL_ENABLE
#define PTHREAD_CANCEL_DISABLE PTHREAD_CANCEL_DISABLE
enum { PTHREAD_CANCEL_DEFERRED, PTHREAD_CANCEL_ASYNCHRONOUS };
#define PTHREAD_CANCEL_DEFERRED PTHREAD_CANCEL_DEFERRED
#define PTHREAD_CANCEL_ASYNCHRONOUS PTHREAD_CANCEL_ASYNCHRONOUS
#define PTHREAD_CANCELED ( ( void * ) - 1 )
#define PTHREAD_ONCE_INIT 0
extern int pthread_create(pthread_t * __newthread, pthread_attr_t * __attr, void *(*__start_routine) (void *), void *__arg);
extern void pthread_exit(void *__retval);
extern int pthread_join(pthread_t __th, void **__thread_return);
extern int pthread_detach(pthread_t __th);
extern pthread_t pthread_self(void);
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2);
extern int pthread_attr_init(pthread_attr_t * __attr);
extern int pthread_attr_destroy(pthread_attr_t * __attr);
extern int pthread_attr_getdetachstate(pthread_attr_t * __attr, int *__detachstate);
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate);
extern int pthread_attr_getguardsize(pthread_attr_t * __attr, size_t * __guardsize);
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize);
extern int pthread_attr_getschedparam(pthread_attr_t * __attr, struct sched_param *__param);
extern int pthread_attr_setschedparam(pthread_attr_t * __attr, struct sched_param *__param);
extern int pthread_attr_getschedpolicy(pthread_attr_t * __attr, int *__policy);
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy);
extern int pthread_attr_getinheritsched(pthread_attr_t * __attr, int *__inherit);
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit);
extern int pthread_attr_getscope(pthread_attr_t * __attr, int *__scope);
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope);
extern int pthread_attr_getstackaddr(pthread_attr_t * __attr, void **__stackaddr);
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void *__stackaddr);
extern int pthread_attr_getstacksize(pthread_attr_t * __attr, size_t * __stacksize);
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize);
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, struct sched_param *__param);
extern int pthread_getschedparam(pthread_t __target_thread, int *__policy, struct sched_param *__param);
extern int pthread_setschedprio(pthread_t __target_thread, int __prio);
extern int pthread_once(pthread_once_t * __once_control, void (*__init_routine) (void));
extern int pthread_setcancelstate(int __state, int *__oldstate);
extern int pthread_setcanceltype(int __type, int *__oldtype);
extern int pthread_cancel(pthread_t __th);
extern void pthread_testcancel(void);
typedef struct {
	struct {
		__jmp_buf __cancel_jmp_buf;
		int __mask_was_saved;
	} __cancel_jmp_buf[1];
	void *__pad[4];
} __pthread_unwind_buf_t;
#define __cleanup_fct_attribute
struct __pthread_cleanup_frame {
	void (*__cancel_routine) (void *);
	void *__cancel_arg;
	int __do_it;
	int __cancel_type;
};
#define pthread_cleanup_push(routine, arg) do { __pthread_unwind_buf_t __cancel_buf ; void ( * __cancel_routine ) ( void * ) = ( routine ) ; void * __cancel_arg = ( arg ) ; int __not_first_call = __sigsetjmp ( ( struct __jmp_buf_tag * ) ( void * ) __cancel_buf . __cancel_jmp_buf , 0 ) ; if ( __glibc_unlikely ( __not_first_call ) ) { __cancel_routine ( __cancel_arg ) ; __pthread_unwind_next ( & __cancel_buf ) ; } __pthread_register_cancel ( & __cancel_buf ) ; do {
extern void __pthread_register_cancel(__pthread_unwind_buf_t * __buf);
#define pthread_cleanup_pop(execute) do { } while ( 0 ) ; } while ( 0 ) ; __pthread_unregister_cancel ( & __cancel_buf ) ; if ( execute ) __cancel_routine ( __cancel_arg ) ; } while ( 0 )
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t * __buf);
extern void __pthread_unwind_next(__pthread_unwind_buf_t * __buf);
struct __jmp_buf_tag;
extern int __sigsetjmp(struct __jmp_buf_tag *__env, int __savemask);
extern int pthread_mutex_init(pthread_mutex_t * __mutex, pthread_mutexattr_t * __mutexattr);
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex);
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex);
extern int pthread_mutex_lock(pthread_mutex_t * __mutex);
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex);
extern int pthread_mutex_getprioceiling(pthread_mutex_t * __mutex, int *__prioceiling);
extern int pthread_mutex_setprioceiling(pthread_mutex_t * __mutex, int __prioceiling, int *__old_ceiling);
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr);
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr);
extern int pthread_mutexattr_getpshared(pthread_mutexattr_t * __attr, int *__pshared);
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared);
extern int pthread_mutexattr_getprotocol(pthread_mutexattr_t * __attr, int *__protocol);
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol);
extern int pthread_mutexattr_getprioceiling(pthread_mutexattr_t * __attr, int *__prioceiling);
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling);
extern int pthread_cond_init(pthread_cond_t * __cond, pthread_condattr_t * __cond_attr);
extern int pthread_cond_destroy(pthread_cond_t * __cond);
extern int pthread_cond_signal(pthread_cond_t * __cond);
extern int pthread_cond_broadcast(pthread_cond_t * __cond);
extern int pthread_cond_wait(pthread_cond_t * __cond, pthread_mutex_t * __mutex);
extern int pthread_cond_timedwait(pthread_cond_t * __cond, pthread_mutex_t * __mutex, struct timespec *__abstime);
extern int pthread_condattr_init(pthread_condattr_t * __attr);
extern int pthread_condattr_destroy(pthread_condattr_t * __attr);
extern int pthread_condattr_getpshared(pthread_condattr_t * __attr, int *__pshared);
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared);
extern int pthread_key_create(pthread_key_t * __key, void (*__destr_function) (void *));
extern int pthread_key_delete(pthread_key_t __key);
extern void *pthread_getspecific(pthread_key_t __key);
extern int pthread_setspecific(pthread_key_t __key, void *__pointer);
extern int pthread_atfork(void (*__prepare) (void), void (*__parent) (void), void (*__child) (void));
