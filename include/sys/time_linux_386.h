// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// ----------------------------------------------------------------------------
//      /usr/include/i386-linux-gnu/sys/time.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

#define _STRUCT_TIMEVAL (1)
struct timeval {
	__time_t tv_sec;
	__suseconds_t tv_usec;
};
#define _SIGSET_H_types (1)
typedef int __sig_atomic_t;
#define _SIGSET_NWORDS ( 1024 / ( 8 * sizeof ( unsigned long int ) ) )
typedef struct {
	unsigned long int __val[32];
} __sigset_t;
#define _SYS_SELECT_H (1)
#define __sigset_t_defined
typedef __sigset_t sigset_t;
typedef __suseconds_t suseconds_t;
#define __suseconds_t_defined
typedef long int __fd_mask;
#define __NFDBITS ( 8 * ( int ) sizeof ( __fd_mask ) )
#define __FD_ELT(d) ( ( d ) / __NFDBITS )
#define __FD_MASK(d) ( ( __fd_mask ) ( 1UL << ( ( d ) % __NFDBITS ) ) )
typedef struct {
	__fd_mask fds_bits[32];
} fd_set;
#define __FDS_BITS(set) ( ( set ) -> fds_bits )
#define FD_SETSIZE __FD_SETSIZE
#define FD_SET(fd, fdsetp) __FD_SET ( fd , fdsetp )
#define FD_CLR(fd, fdsetp) __FD_CLR ( fd , fdsetp )
#define FD_ISSET(fd, fdsetp) __FD_ISSET ( fd , fdsetp )
#define FD_ZERO(fdsetp) __FD_ZERO ( fdsetp )
extern int select(int __nfds, fd_set * __readfds, fd_set * __writefds, fd_set * __exceptfds, struct timeval *__timeout);
#define _SYS_TIME_H (1)
typedef void *__timezone_ptr_t;
extern int gettimeofday(struct timeval *__tv, __timezone_ptr_t __tz);
enum __itimer_which { ITIMER_REAL = 0, ITIMER_VIRTUAL = 1, ITIMER_PROF = 2 };
#define ITIMER_REAL ITIMER_REAL
#define ITIMER_VIRTUAL ITIMER_VIRTUAL
#define ITIMER_PROF ITIMER_PROF
struct itimerval {
	struct timeval it_interval;
	struct timeval it_value;
};
typedef int __itimer_which_t;
extern int getitimer(__itimer_which_t __which, struct itimerval *__value);
extern int setitimer(__itimer_which_t __which, struct itimerval *__new, struct itimerval *__old);
extern int utimes(char *__file, struct timeval __tvp[2]);
