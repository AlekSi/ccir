// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// ----------------------------------------------------------------------------
//      /usr/include/unistd.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

#define _UNISTD_H (1)
#define _POSIX_VERSION (199009l)
#define __POSIX2_THIS_VERSION (199209l)
#define _POSIX2_VERSION __POSIX2_THIS_VERSION
#define _POSIX2_C_VERSION __POSIX2_THIS_VERSION
#define _POSIX2_C_BIND __POSIX2_THIS_VERSION
#define _POSIX2_C_DEV __POSIX2_THIS_VERSION
#define _POSIX2_SW_DEV __POSIX2_THIS_VERSION
#define _POSIX2_LOCALEDEF __POSIX2_THIS_VERSION
#define _XOPEN_VERSION (4)
#define _XOPEN_XCU_VERSION (4)
#define _XOPEN_XPG2 (1)
#define _XOPEN_XPG3 (1)
#define _XOPEN_XPG4 (1)
#define _XOPEN_UNIX (1)
#define _XOPEN_CRYPT (1)
#define _XOPEN_ENH_I18N (1)
#define _XOPEN_LEGACY (1)
#define STDIN_FILENO (0)
#define STDOUT_FILENO (1)
#define STDERR_FILENO (2)
typedef __ssize_t ssize_t;
#define __ssize_t_defined
#define R_OK (4)
#define W_OK (2)
#define X_OK (1)
#define F_OK (0)
extern int access(char *__name, int __type);
#define SEEK_SET (0)
#define SEEK_CUR (1)
#define SEEK_END (2)
extern __off_t lseek(int __fd, __off_t __offset, int __whence);
extern int close(int __fd);
extern ssize_t read(int __fd, void *__buf, size_t __nbytes);
extern ssize_t write(int __fd, void *__buf, size_t __n);
extern int pipe(int __pipedes[2]);
extern unsigned int alarm(unsigned int __seconds);
extern unsigned int sleep(unsigned int __seconds);
extern int pause(void);
extern int chown(char *__file, __uid_t __owner, __gid_t __group);
extern int chdir(char *__path);
extern char *getcwd(char *__buf, size_t __size);
extern int dup(int __fd);
extern int dup2(int __fd, int __fd2);
extern char **__environ;
extern int execve(char *__path, char *__argv[], char *__envp[]);
extern int execv(char *__path, char *__argv[]);
extern int execle(char *__path, char *__arg, ...);
extern int execl(char *__path, char *__arg, ...);
extern int execvp(char *__file, char *__argv[]);
extern int execlp(char *__file, char *__arg, ...);
extern void _exit(int __status);
extern long int pathconf(char *__path, int __name);
extern long int fpathconf(int __fd, int __name);
extern long int sysconf(int __name);
extern __pid_t getpid(void);
extern __pid_t getppid(void);
extern __pid_t getpgrp(void);
extern __pid_t __getpgid(__pid_t __pid);
extern int setpgid(__pid_t __pid, __pid_t __pgid);
extern __pid_t setsid(void);
extern __uid_t getuid(void);
extern __uid_t geteuid(void);
extern __gid_t getgid(void);
extern __gid_t getegid(void);
extern int getgroups(int __size, __gid_t __list[]);
extern int setuid(__uid_t __uid);
extern int setgid(__gid_t __gid);
extern __pid_t fork(void);
extern char *ttyname(int __fd);
extern int ttyname_r(int __fd, char *__buf, size_t __buflen);
extern int isatty(int __fd);
extern int link(char *__from, char *__to);
extern int unlink(char *__name);
extern int rmdir(char *__path);
extern __pid_t tcgetpgrp(int __fd);
extern int tcsetpgrp(int __fd, __pid_t __pgrp_id);
extern char *getlogin(void);
extern int fsync(int __fd);
