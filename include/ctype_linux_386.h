// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// ----------------------------------------------------------------------------
//      /usr/include/ctype.h
// ----------------------------------------------------------------------------
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

#define _CTYPE_H (1)
#define _ISbit(bit) ( ( bit ) < 8 ? ( ( 1 << ( bit ) ) << 8 ) : ( ( 1 << ( bit ) ) >> 8 ) )
enum { _ISupper = 256, _ISlower = 512, _ISalpha = 1024, _ISdigit = 2048, _ISxdigit = 4096, _ISspace = 8192, _ISprint = 16384, _ISgraph = 32768, _ISblank = 1, _IScntrl = 2, _ISpunct = 4, _ISalnum = 8 };
extern unsigned short int **__ctype_b_loc(void);
extern __int32_t **__ctype_tolower_loc(void);
extern __int32_t **__ctype_toupper_loc(void);
#define __isctype(c, type) ( ( * __ctype_b_loc ( ) ) [ ( int ) ( c ) ] & ( unsigned short int ) type )
#define __isascii(c) ( ( ( c ) & ~ 0x7f ) == 0 )
#define __toascii(c) ( ( c ) & 0x7f )
#define __exctype(name) extern int name ( int ) __THROW
extern int isalnum(int);
extern int isalpha(int);
extern int iscntrl(int);
extern int isdigit(int);
extern int islower(int);
extern int isgraph(int);
extern int isprint(int);
extern int ispunct(int);
extern int isspace(int);
extern int isupper(int);
extern int isxdigit(int);
extern int tolower(int __c);
extern int toupper(int __c);
extern int isblank(int);
#define __tobody(c, f, a, args) ( __extension__ ( { int __res ; if ( sizeof ( c ) > 1 ) { if ( __builtin_constant_p ( c ) ) { int __c = ( c ) ; __res = __c < - 128 || __c > 255 ? __c : ( a ) [ __c ] ; } else __res = f args ; } else __res = ( a ) [ ( int ) ( c ) ] ; __res ; } ) )
#define isalnum(c) __isctype ( ( c ) , _ISalnum )
#define isalpha(c) __isctype ( ( c ) , _ISalpha )
#define iscntrl(c) __isctype ( ( c ) , _IScntrl )
#define isdigit(c) __isctype ( ( c ) , _ISdigit )
#define islower(c) __isctype ( ( c ) , _ISlower )
#define isgraph(c) __isctype ( ( c ) , _ISgraph )
#define isprint(c) __isctype ( ( c ) , _ISprint )
#define ispunct(c) __isctype ( ( c ) , _ISpunct )
#define isspace(c) __isctype ( ( c ) , _ISspace )
#define isupper(c) __isctype ( ( c ) , _ISupper )
#define isxdigit(c) __isctype ( ( c ) , _ISxdigit )
#define isblank(c) __isctype ( ( c ) , _ISblank )
