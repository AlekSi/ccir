// Code generated by running "go generate". DO NOT EDIT.

// +build ignore

// ----------------------------------------------------------------------------
//      /usr/include/i386-linux-gnu/bits/pthreadtypes.h
// ----------------------------------------------------------------------------
/* Copyright (C) 2002-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

// ----------------------------------------------------------------------------
//      /usr/include/pthread.h
// ----------------------------------------------------------------------------
/* Copyright (C) 2002-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

#define _BITS_PTHREADTYPES_H (1)
#define __SIZEOF_PTHREAD_ATTR_T (36)
#define __SIZEOF_PTHREAD_MUTEX_T (24)
#define __SIZEOF_PTHREAD_MUTEXATTR_T (4)
#define __SIZEOF_PTHREAD_COND_T (48)
#define __SIZEOF_PTHREAD_CONDATTR_T (4)
#define __SIZEOF_PTHREAD_RWLOCK_T (32)
#define __SIZEOF_PTHREAD_RWLOCKATTR_T (8)
#define __SIZEOF_PTHREAD_BARRIER_T (20)
#define __SIZEOF_PTHREAD_BARRIERATTR_T (4)
typedef unsigned long int pthread_t;
union pthread_attr_t {
	char __size[36];
	long int __align;
};
typedef union pthread_attr_t pthread_attr_t;
#define __have_pthread_attr_t (1)
typedef struct __pthread_internal_slist {
	struct __pthread_internal_slist *__next;
} __pthread_slist_t;
typedef union {
	struct __pthread_mutex_s {
		int __lock;
		unsigned int __count;
		int __owner;
		int __kind;
		unsigned int __nusers;
		union {
			struct {
				short __espins;
				short __elision;
			} __elision_data;
			__pthread_slist_t __list;
		};
	} __data;
	char __size[24];
	long int __align;
} pthread_mutex_t;
#define __spins __elision_data . __espins
#define __elision __elision_data . __elision
#define __PTHREAD_SPINS { 0 , 0 }
typedef union {
	char __size[4];
	int __align;
} pthread_mutexattr_t;
typedef union {
	struct {
		int __lock;
		unsigned int __futex;
		unsigned long long int __total_seq;
		unsigned long long int __wakeup_seq;
		unsigned long long int __woken_seq;
		void *__mutex;
		unsigned int __nwaiters;
		unsigned int __broadcast_seq;
	} __data;
	char __size[48];
	long long int __align;
} pthread_cond_t;
typedef union {
	char __size[4];
	int __align;
} pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef int pthread_once_t;
typedef union {
	struct {
		int __lock;
		unsigned int __nr_readers;
		unsigned int __readers_wakeup;
		unsigned int __writer_wakeup;
		unsigned int __nr_readers_queued;
		unsigned int __nr_writers_queued;
		unsigned char __flags;
		unsigned char __shared;
		signed char __rwelision;
		unsigned char __pad2;
		int __writer;
	} __data;
	char __size[32];
	long int __align;
} pthread_rwlock_t;
#define __PTHREAD_RWLOCK_ELISION_EXTRA (0)
typedef union {
	char __size[8];
	long int __align;
} pthread_rwlockattr_t;
#define __cleanup_fct_attribute __attribute__ ( ( __regparm__ ( 1 ) ) )
#define _PTHREAD_H (1)
enum { PTHREAD_CREATE_JOINABLE, PTHREAD_CREATE_DETACHED };
#define PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_JOINABLE
#define PTHREAD_CREATE_DETACHED PTHREAD_CREATE_DETACHED
enum { PTHREAD_MUTEX_TIMED_NP, PTHREAD_MUTEX_RECURSIVE_NP, PTHREAD_MUTEX_ERRORCHECK_NP, PTHREAD_MUTEX_ADAPTIVE_NP, PTHREAD_MUTEX_NORMAL = 0, PTHREAD_MUTEX_RECURSIVE = 1, PTHREAD_MUTEX_ERRORCHECK = 2, PTHREAD_MUTEX_DEFAULT = 0 };
enum { PTHREAD_PRIO_NONE, PTHREAD_PRIO_INHERIT, PTHREAD_PRIO_PROTECT };
#define PTHREAD_MUTEX_INITIALIZER { { 0 , 0 , 0 , 0 , 0 , { __PTHREAD_SPINS } } }
enum { PTHREAD_RWLOCK_PREFER_READER_NP, PTHREAD_RWLOCK_PREFER_WRITER_NP, PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, PTHREAD_RWLOCK_DEFAULT_NP = 0 };
#define PTHREAD_RWLOCK_INITIALIZER { { 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , __PTHREAD_RWLOCK_ELISION_EXTRA , 0 , 0 } }
enum { PTHREAD_INHERIT_SCHED, PTHREAD_EXPLICIT_SCHED };
#define PTHREAD_INHERIT_SCHED PTHREAD_INHERIT_SCHED
#define PTHREAD_EXPLICIT_SCHED PTHREAD_EXPLICIT_SCHED
enum { PTHREAD_SCOPE_SYSTEM, PTHREAD_SCOPE_PROCESS };
#define PTHREAD_SCOPE_SYSTEM PTHREAD_SCOPE_SYSTEM
#define PTHREAD_SCOPE_PROCESS PTHREAD_SCOPE_PROCESS
enum { PTHREAD_PROCESS_PRIVATE, PTHREAD_PROCESS_SHARED };
#define PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE
#define PTHREAD_PROCESS_SHARED PTHREAD_PROCESS_SHARED
#define PTHREAD_COND_INITIALIZER { { 0 , 0 , 0 , 0 , 0 , ( void * ) 0 , 0 , 0 } }
struct _pthread_cleanup_buffer {
	void (*__routine) (void *);
	void *__arg;
	int __canceltype;
	struct _pthread_cleanup_buffer *__prev;
};
enum { PTHREAD_CANCEL_ENABLE, PTHREAD_CANCEL_DISABLE };
#define PTHREAD_CANCEL_ENABLE PTHREAD_CANCEL_ENABLE
#define PTHREAD_CANCEL_DISABLE PTHREAD_CANCEL_DISABLE
enum { PTHREAD_CANCEL_DEFERRED, PTHREAD_CANCEL_ASYNCHRONOUS };
#define PTHREAD_CANCEL_DEFERRED PTHREAD_CANCEL_DEFERRED
#define PTHREAD_CANCEL_ASYNCHRONOUS PTHREAD_CANCEL_ASYNCHRONOUS
#define PTHREAD_CANCELED ( ( void * ) - 1 )
#define PTHREAD_ONCE_INIT (0)
extern int pthread_create(pthread_t * __newthread, pthread_attr_t * __attr, void *(*__start_routine) (void *), void *__arg);
extern void pthread_exit(void *__retval);
extern int pthread_join(pthread_t __th, void **__thread_return);
extern int pthread_detach(pthread_t __th);
extern pthread_t pthread_self(void);
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2);
extern int pthread_attr_init(pthread_attr_t * __attr);
extern int pthread_attr_destroy(pthread_attr_t * __attr);
extern int pthread_attr_getdetachstate(pthread_attr_t * __attr, int *__detachstate);
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate);
extern int pthread_attr_getguardsize(pthread_attr_t * __attr, size_t * __guardsize);
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize);
extern int pthread_attr_getschedparam(pthread_attr_t * __attr, struct sched_param *__param);
extern int pthread_attr_setschedparam(pthread_attr_t * __attr, struct sched_param *__param);
extern int pthread_attr_getschedpolicy(pthread_attr_t * __attr, int *__policy);
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy);
extern int pthread_attr_getinheritsched(pthread_attr_t * __attr, int *__inherit);
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit);
extern int pthread_attr_getscope(pthread_attr_t * __attr, int *__scope);
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope);
extern int pthread_attr_getstackaddr(pthread_attr_t * __attr, void **__stackaddr);
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void *__stackaddr);
extern int pthread_attr_getstacksize(pthread_attr_t * __attr, size_t * __stacksize);
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize);
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, struct sched_param *__param);
extern int pthread_getschedparam(pthread_t __target_thread, int *__policy, struct sched_param *__param);
extern int pthread_setschedprio(pthread_t __target_thread, int __prio);
extern int pthread_getconcurrency(void);
extern int pthread_setconcurrency(int __level);
extern int pthread_once(pthread_once_t * __once_control, void (*__init_routine) (void));
extern int pthread_setcancelstate(int __state, int *__oldstate);
extern int pthread_setcanceltype(int __type, int *__oldtype);
extern int pthread_cancel(pthread_t __th);
extern void pthread_testcancel(void);
typedef struct {
	struct {
		__jmp_buf __cancel_jmp_buf;
		int __mask_was_saved;
	} __cancel_jmp_buf[1];
	void *__pad[4];
} __pthread_unwind_buf_t;
struct __pthread_cleanup_frame {
	void (*__cancel_routine) (void *);
	void *__cancel_arg;
	int __do_it;
	int __cancel_type;
};
#define pthread_cleanup_push(routine, arg) do { __pthread_unwind_buf_t __cancel_buf ; void ( * __cancel_routine ) ( void * ) = ( routine ) ; void * __cancel_arg = ( arg ) ; int __not_first_call = __sigsetjmp ( ( struct __jmp_buf_tag * ) ( void * ) __cancel_buf . __cancel_jmp_buf , 0 ) ; if ( __glibc_unlikely ( __not_first_call ) ) { __cancel_routine ( __cancel_arg ) ; __pthread_unwind_next ( & __cancel_buf ) ; } __pthread_register_cancel ( & __cancel_buf ) ; do {
extern void __pthread_register_cancel(__pthread_unwind_buf_t * __buf);
#define pthread_cleanup_pop(execute) do { } while ( 0 ) ; } while ( 0 ) ; __pthread_unregister_cancel ( & __cancel_buf ) ; if ( execute ) __cancel_routine ( __cancel_arg ) ; } while ( 0 )
extern void __pthread_unregister_cancel(__pthread_unwind_buf_t * __buf);
extern void __pthread_unwind_next(__pthread_unwind_buf_t * __buf);
struct __jmp_buf_tag;
extern int __sigsetjmp(struct __jmp_buf_tag *__env, int __savemask);
extern int pthread_mutex_init(pthread_mutex_t * __mutex, pthread_mutexattr_t * __mutexattr);
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex);
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex);
extern int pthread_mutex_lock(pthread_mutex_t * __mutex);
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex);
extern int pthread_mutex_getprioceiling(pthread_mutex_t * __mutex, int *__prioceiling);
extern int pthread_mutex_setprioceiling(pthread_mutex_t * __mutex, int __prioceiling, int *__old_ceiling);
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr);
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr);
extern int pthread_mutexattr_getpshared(pthread_mutexattr_t * __attr, int *__pshared);
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared);
extern int pthread_mutexattr_gettype(pthread_mutexattr_t * __attr, int *__kind);
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind);
extern int pthread_mutexattr_getprotocol(pthread_mutexattr_t * __attr, int *__protocol);
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol);
extern int pthread_mutexattr_getprioceiling(pthread_mutexattr_t * __attr, int *__prioceiling);
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling);
extern int pthread_rwlock_init(pthread_rwlock_t * __rwlock, pthread_rwlockattr_t * __attr);
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock);
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr);
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr);
extern int pthread_rwlockattr_getpshared(pthread_rwlockattr_t * __attr, int *__pshared);
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared);
extern int pthread_rwlockattr_getkind_np(pthread_rwlockattr_t * __attr, int *__pref);
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref);
extern int pthread_cond_init(pthread_cond_t * __cond, pthread_condattr_t * __cond_attr);
extern int pthread_cond_destroy(pthread_cond_t * __cond);
extern int pthread_cond_signal(pthread_cond_t * __cond);
extern int pthread_cond_broadcast(pthread_cond_t * __cond);
extern int pthread_cond_wait(pthread_cond_t * __cond, pthread_mutex_t * __mutex);
extern int pthread_cond_timedwait(pthread_cond_t * __cond, pthread_mutex_t * __mutex, struct timespec *__abstime);
extern int pthread_condattr_init(pthread_condattr_t * __attr);
extern int pthread_condattr_destroy(pthread_condattr_t * __attr);
extern int pthread_condattr_getpshared(pthread_condattr_t * __attr, int *__pshared);
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared);
extern int pthread_key_create(pthread_key_t * __key, void (*__destr_function) (void *));
extern int pthread_key_delete(pthread_key_t __key);
extern void *pthread_getspecific(pthread_key_t __key);
extern int pthread_setspecific(pthread_key_t __key, void *__pointer);
extern int pthread_atfork(void (*__prepare) (void), void (*__parent) (void), void (*__child) (void));
